//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"
//#include "featureevents.rul"

//---------------------------------------------------------------------------
// Global variables
//---------------------------------------------------------------------------
string 	g_sSerial;
BOOL	g_NeedReboot;
//---------------------------------------------------------------------------
            
//---------------------------------------------------------------------------
// Definition
//---------------------------------------------------------------------------
#define DEF_FOLDER 				"KAC"
#define MSDE_INSTANCE_NAME	 	"kas_sql_srv"
#define MSDE_INSTANCE_FOLDER	PROGRAMFILES^"Microsoft SQL Server\\Mssql$"+MSDE_INSTANCE_NAME+"\\"

#define DLL_FILE  				TARGETDIR^"SQL_CONFIG.dll"    
#define SQL_USER_NAME_ 			"sa"
#define SQL_USER_PASS_ 			"KAStorka40"
#define SQL_SERVER_HOST_ 		"localhost\\kas_sql_srv"
#define SQL_STORED_PROC_DLL_   	"xp_indexing.dll"

#define SETUP_INI_FILE      	SRCDIR^"setupMSDE.ini"
#define INI_MAIN_SECTION_ID  	"main"
#define INI_UPDATE_DATE_ID    	"updateDate"
#define INI_VERSION_ID			"version"
#define INI_BUILD_ID			"build"  
#define INI_SERVER_ID			"server"

//---------------------------------------------------------------------------
// User defined function prototype
//---------------------------------------------------------------------------
prototype 				CreateUninstallShortcut		(); 
prototype 				ClearFolder					(byval string);
prototype BOOL 			CheckAdminRights			();
// SQL server management function
prototype 				StartServer					();
prototype 				StopServer					();
prototype 				ParseSerialNumber			(byval string, byref string, byref string);
prototype BOOL 			CheckMSDEStatus				();
// external SQL server management function
prototype CDECL BOOL 	SQL_CONFIG.initLibrary		();
prototype CDECL BOOL 	SQL_CONFIG.deInitLibrary	();
prototype CDECL BOOL 	SQL_CONFIG.testConnection	(byval string, byval string, byval string);
prototype CDECL BOOL 	SQL_CONFIG.tuneServer		(byval string, byval string, byval string);
prototype CDECL BOOL 	SQL_CONFIG.attachDatabase	(byval string, byval string, byval string, byval string, byval string);
prototype CDECL BOOL 	SQL_CONFIG.runSQLString		(byval string, byval string, byval string, byval string, byval string);
prototype CDECL BOOL 	SQL_CONFIG.detachDatabase	(byval string, byval string, byval string, byval string);
// export events for IS
export prototype 		MSDE_2000_Installed			();
export prototype 		MSDE_2000_UnInstalling		();
export prototype 		MSDE_2000_UnInstalled		();

//---------------------------------------------------------------------------
// User defined function
//---------------------------------------------------------------------------
function CreateUninstallShortcut()   
string strCmdLine;  
LIST lstPath; 
begin   
	 // For an InstallScript installation:
	 strCmdLine = DISK1TARGET ^ "Setup.exe";    
	 // For an InstallScript MSI installation:
	 strCmdLine = UNINSTALL_STRING;    
 
	 // The path has to be handled differently if you are running   
	 // an InstallScript MSI installation on Windows 9X.  
 	if ( SYSINFO.WIN9X.bWin9X ) then   
	 	lstPath = ListCreate( STRINGLIST );  
		StrGetTokens( lstPath, UNINSTALL_STRING, "/" );    
	
		ListGetFirstString( lstPath, strCmdLine );  
		LongPathToQuote( strCmdLine, TRUE );    
	
		strCmdLine = strCmdLine + " /M" + PRODUCT_GUID; 
	endif;  
	// Create the shortcut. 
	AddFolderIcon(SHELL_OBJECT_FOLDER, "Удаление КАС",strCmdLine, "",TARGETDIR^"MDISplit.ico",0, "", NULL );  
end;
//---------------------------------------------------------------------------
function ClearFolder(folder)
begin
	DeleteDir(folder,ALLCONTENTS);
end;                           
//---------------------------------------------------------------------------
function BOOL CheckAdminRights()
begin
	if (FALSE=SYSINFO.WIN9X.bWin9X) then
		if (FALSE=SYSINFO.WINNT.bAdmin_Logged_On) then
        	MessageBox("Для установки приложения необходимы права администратора!", SEVERE);
        	return FALSE;
		endif;
	endif;
	return TRUE;
end;                    
//---------------------------------------------------------------------------
function ParseSerialNumber(src, tgt0, tgt1)
    LIST   listID;
begin
    listID 		= ListCreate (STRINGLIST);
    // Get each path from the search path into the list.
    if (StrGetTokens (listID, src, "-") = 0) then
    	if (ListCount(listID)==2) then
    		ListGetFirstString(listID,tgt0);
    		ListGetNextString (listID,tgt1);
    	endif;
    endif;
    // Remove the list from memory.
    ListDestroy (listID);
end;
//---------------------------------------------------------------------------
function StartServer()
begin
	LaunchAppAndWait (PROGRAMFILES^"Microsoft SQL Server\\80\\Tools\\Binn\\scm.exe" , " -Action 1 -Silent 1 -Service mssql$kas_sql_srv", WAIT);
end;
//---------------------------------------------------------------------------
function StopServer()
begin
	LaunchAppAndWait (PROGRAMFILES^"Microsoft SQL Server\\80\\Tools\\Binn\\scm.exe" , " -Action 6 -Silent 1 -Service mssql$kas_sql_srv", WAIT);
end;
//---------------------------------------------------------------------------
function BOOL CheckMSDEStatus()
    object oObject, oStatus;
    string szStatus;
    BOOL res;
begin        
	res = FALSE;
    try
        set oObject = GetObject("MSDE_2000_Object");
        if (!IsObject(oObject)) then
            MessageBoxEx( "Ошибка при установке MSDE.", "", INFORMATION );
        endif;
        set oStatus = oObject.Status;
        if (!(oStatus.Number = OBJ_STATUS_SUCCESS ||
              oStatus.Number = MSI_ERROR_SUCCESS_REBOOT_REQUIRED)) then
            Sprintf( szStatus, "MSDE 2000 Object\n\nNumber:\t\t%d\n" +
                "Description:\t%s\nFile:\t\t%s\nLine:\t\t%d\nScript Error:\t%d", 
                oStatus.Number, oStatus.Description, oStatus.szScriptFile, 
                oStatus.nScriptLine, oStatus.nScriptError );
            MessageBoxEx( szStatus, "", SEVERE );
		else            
	        res = TRUE;
        endif; 
    catch    
        Sprintf( szStatus, "Unexpected Exception\n\nNumber: 0X%X\nDescription:" +
            "%s\nSource: %s\nHelp File: %s\nHelp Context: %d", Err.Number, 
            Err.Description, Err.Source, Err.HelpFile, Err.HelpContext);
        MessageBoxEx( szStatus, "", SEVERE );
    endcatch;
    return res;
end;
//---------------------------------------------------------------------------
            
//---------------------------------------------------------------------------                                                                        
// InstallShield Events
//---------------------------------------------------------------------------                                                                        
function OnBegin()
begin       
	g_NeedReboot = FALSE;
	// check admin rights
	if (FALSE=CheckAdminRights()) then abort; endif;
end;
//---------------------------------------------------------------------------                                                                        
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType, nUser;
    string  sTitle, sMsg, sOpt1, sOpt2, sLicenseFile;
    string  sName, sCompany, sTargetPath, sDir, sFeatures, sTargetdir;
    string  sSetupType, sMainDir;
    BOOL    bLicenseAccepted;	
    LIST 	listStartCopy;
begin	  
    SetTitle( @IDS_PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
   
    nSetupType 		= COMPLETE;	
    sDir 			= TARGETDIR;
    sName 			= "";
    sCompany		= "";
    bLicenseAccepted= FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    sTitle = "";
    sMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( sTitle, sMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    sTitle = "";
    sOpt1 = "";
    sOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    sLicenseFile = SUPPORTDIR ^ "License.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Rtf( sTitle, sOpt1, sOpt2, sLicenseFile, bLicenseAccepted );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif;
             
Dlg_SetupType:
    sTitle = "";
    sMsg   = "";
    nResult = SetupType(sTitle, sMsg, "", nSetupType, 0);
    if (nResult = BACK) then
        goto Dlg_SdLicense2;
    else
	    nSetupType 		= nResult;  
        sTargetPath 	= TARGETDIR;
		if (nSetupType 	= 301) then     
			sSetupType 	= "ClientServer";
		elseif(nSetupType = 302) then
			sSetupType 	= "Client";
		else
			sSetupType 	= "Server";
		endif;
		if (FeatureSetupTypeSet (MEDIA, sSetupType) < 0) then
			MessageBox ("FeatureSetupTypeSet failed.", SEVERE);
		endif;
        nSize = 0;
        FeatureCompareSizeRequired(MEDIA, sTargetPath, nSize);
        if (nSize != 0) then      
        	MessageBox(szSdStr_NotEnoughSpace, WARNING);
            goto Dlg_SetupType;
        endif;
    endif;    
             
Dlg_SdCustomerInformation:
	if (nSetupType = 301) then
		goto Dlg_SdCustomerInformationServer;      
	elseif(nSetupType = 302) then
		goto Dlg_SdCustomerInformationClient;
	else
		goto Dlg_SdCustomerInformationServer;      
	endif;

Dlg_SdCustomerInformationServer:
	g_sSerial 	="demo-kharkiv";
	nResult 	= SdCustomerInformationEx(sTitle, sName, sCompany, g_sSerial,nUser);
	if (nResult = BACK) then
		goto Dlg_SetupType;
	else
		goto Dlg_SdSelectedFolder;
	endif;
	if (g_sSerial ="demo-demo" ) then 
		g_sSerial ="";
	endif;

Dlg_SdCustomerInformationClient:
	nResult = SdCustomerInformation(sTitle, sName, sCompany, nUser);
	if (nResult = BACK) then
		goto Dlg_SetupType;
	else
		goto Dlg_SdSelectedFolder;
	endif;

Dlg_SdSelectedFolder:
	sMsg   		= "";
	sMainDir 	= DEF_FOLDER;
	nResult 	= SdSelectFolder (sTitle, sMsg, sMainDir);
	if (nResult = BACK) then
		goto Dlg_SdCustomerInformation;
	endif;     
	SHELL_OBJECT_FOLDER	= sMainDir;
	
Dlg_SdAskDestPath2:
	sTitle = "";
    sMsg = "";
	nResult = SdAskDestPath2( sTitle, sMsg, sDir );
    TARGETDIR = sDir;
    if (nResult = BACK) goto Dlg_SdSelectedFolder;

Dlg_SQLServer:
    nResult 	= OnSQLServerInitialize( nResult );
    if( nResult = BACK ) goto Dlg_SdAskDestPath2;

Dlg_ObjDialogs:
    nResult 	= ShowObjWizardPages( nResult );
    if (nResult = BACK) goto Dlg_SQLServer;
    
Dlg_SdStartCopy:
	sMsg   = "";
	listStartCopy = ListCreate( STRINGLIST );

    ListAddString(listStartCopy,@IDS_UI_CURDIR,AFTER);
    ListAddString(listStartCopy,"\t"+TARGETDIR,AFTER);
   
    ListAddString(listStartCopy,@IDS_UI_MENU_FOLDER,AFTER);
    ListAddString(listStartCopy,"\t"+sMainDir,AFTER);
    
    ListAddString(listStartCopy,@IDS_UI_SETUP_TYPE,AFTER);
    
	if (nSetupType = 301) then
	    ListAddString(listStartCopy,"\t"+@ID_ST_CLIENT_SERVER_NAME,AFTER);
	elseif(nSetupType = 302) then
		ListAddString(listStartCopy,"\t"+@ID_ST_CLIENT_NAME,AFTER);		                                                      
	else
		ListAddString(listStartCopy,"\t"+@ID_ST_SERVER_NAME,AFTER);		                                                      
	endif;
	
	nResult = SdStartCopy( sTitle, sMsg, listStartCopy );			
	ListDestroy(listStartCopy);

	if (nResult = BACK) then
		goto Dlg_SdAskDestPath2;    
	endif; 
                           
	// clear target folders 
	StopServer	();
    ClearFolder	(TARGETDIR);
    ClearFolder	(MSDE_INSTANCE_FOLDER);

    return 0;
end;
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType, nMediaFlags;
    string	szTitle, szMsg, szIgnore;
begin
	// nType defaults to MODIFY.
	nType = MODIFY;

    //Initialize SQL
    OnSQLServerInitializeMaint( );

// Beginning of UI Sequence
Dlg_Start:

    // Hide the initial progress dialog as otherwise the user can
    // click on it, and hide the MessageBox.
    Disable( DIALOGCACHE );

    // In RemoveOnly mode, set to remove.
    nType = REMOVEALL;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            // In REMOVEONLY mode, abort the setup.
            abort;
		endif;
	endif;

	// check admin rights
	if (FALSE=CheckAdminRights()) then abort; endif;
	
Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
						
			// Ensure that all previously installed features are removed
			// for media that supports updating.
			MediaGetData( MEDIA, MEDIA_FIELD_MEDIA_FLAGS, nMediaFlags, szIgnore );
			
			if( nMediaFlags & MEDIA_FLAG_UPDATEMODE_SUPPORTED ) then
				FeatureRemoveAllInMediaAndLog();
			else
				FeatureRemoveAllInMedia();
			endif;

        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

    endswitch;
end;
//---------------------------------------------------------------------------
function MSDE_2000_Installed()
	number 	nResult,nRootKey;
	BOOL 	bRes;
	string 	sTmp,db_files,sInsertSQL,sServerName;
	string 	sPrimReg,sSecReg,sVersion,sBuild,sLastUpdate;
	NUMBER 	nvType, nvSize, nLocation;
begin
	bRes = CheckMSDEStatus();    
	if (TRUE=bRes) then
		// register our SQLDMO.dll
		LaunchAppAndWait (WINSYSDIR^"regsvr32" , "/s sqldmo.dll", WAIT); // /s 
		           
		// load dll
	    nResult 	= UseDLL (DLL_FILE);
	    if (nResult != 0) then
	        MessageBox ("Невозможно загрузить: "+DLL_FILE, SEVERE);
	        abort;
	    endif;                  
	    
	    SQL_CONFIG.initLibrary();
	        
	    // Enable the progress bar.
	    Enable			(STATUS);
    
	    // Set the limit of the progress bar to 99% completion.
	    StatusUpdate 	(ON, 99);
    
	    // Display a message; do not change the progress bar.
	    SetStatusWindow (-1, "Настройка сервера.");
    
	    SetStatusWindow (10, "Запуск сервера.");
	    StartServer		();
	    
	    SetStatusWindow (20, "Проверка соединения.");
		bRes 			= SQL_CONFIG.testConnection(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_);
		if (bRes = 0) then 
		    SetStatusWindow (30, "Настройка соединения.");
		    bRes = SQL_CONFIG.tuneServer(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_);
		    if(bRes != 0) then
		        MessageBox ("Ошибка конфигурации сервера БД.", SEVERE);
		        bRes	= FALSE;
		        goto label_end;
		    endif;

		    SetStatusWindow (40, "Подключение базы 'KAS'.");
		    db_files = "["+TARGETDIR^"DATA\\KAS_Data.MDF] "+"["+TARGETDIR^"DATA\\KAS_Log.LDF]";
		    bRes = SQL_CONFIG.attachDatabase(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_,"KAS",db_files);
		    if(bRes != 0) then
		        MessageBox ("Ошибка при подключении базы 'KAS'.", SEVERE);
		        bRes	= FALSE;
		        goto label_end; 
		    else
		    	bRes=TRUE;
		    endif;
		
		    SetStatusWindow (50, "Подключение базы 'client_repl'.");
		    db_files = "["+TARGETDIR^"DATA\\client_repl_Data.MDF] "+"["+TARGETDIR^"DATA\\client_repl_Log.LDF]";
		    bRes = SQL_CONFIG.attachDatabase(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_,"client_repl",db_files);
		    if(bRes != 0) then
		        MessageBox ("Ошибка при подключении базы 'client_repl'.", SEVERE);
		        bRes	= FALSE;
		        goto label_end;
		    else
		    	bRes=TRUE;
		    endif;
		
		    SetStatusWindow (60, "Подключение базы 'searchdb'.");
		    db_files = "["+TARGETDIR^"DATA\\searchdb_Data.MDF] "+"["+TARGETDIR^"DATA\\searchdb_Log.LDF]";
		    bRes = SQL_CONFIG.attachDatabase(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_,"searchdb",db_files);
		    if(bRes != 0) then
		        MessageBox ("Ошибка при подключении базы 'searchdb'.", SEVERE);
		        bRes	= FALSE;
		        goto label_end;
		    else
		    	bRes=TRUE;
		    endif;
		 
		    SetStatusWindow (70, "Регистрация внешней хранимой поцедуры.");
		 	// copy stored proc dll  
			// register it in DB
		    bRes = SQL_CONFIG.runSQLString	(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_,
		    								"master",
		    								"EXEC sp_addextendedproc xp_check, '"+SQL_STORED_PROC_DLL_+"'");
		    if(bRes != 0) then
		        MessageBox ("Ошибка при регистрации внешней хранимой процедуры.", SEVERE);
		        bRes	= FALSE;
		        goto label_end;
		    else
		    	bRes=TRUE;
		    endif;
		
		    SetStatusWindow (80, "Чтение записей из файла инициализации.");
			GetProfString	(SETUP_INI_FILE, INI_MAIN_SECTION_ID, INI_UPDATE_DATE_ID, 	sLastUpdate);
			GetProfString	(SETUP_INI_FILE, INI_MAIN_SECTION_ID, INI_VERSION_ID, 		sVersion);
			GetProfString	(SETUP_INI_FILE, INI_MAIN_SECTION_ID, INI_BUILD_ID, 		sBuild);
			GetProfString	(SETUP_INI_FILE, INI_MAIN_SECTION_ID, INI_SERVER_ID, 		sServerName);
		
			// parse serial number      
			sPrimReg		= "";
			sSecReg			= "";	
			ParseSerialNumber(g_sSerial,sPrimReg,sSecReg);
		                           
		    SetStatusWindow (90, "Регистрация пользователя.");
			// prepare sql string
			sInsertSQL = "insert into Summary (primary_reg_id, secondary_reg_id, version_id, build, unique_id, last_update)";
			sInsertSQL = sInsertSQL+"values('"+sPrimReg+"','"+sSecReg+"','"+sVersion+"','"+sBuild+"',newId(),'"+sLastUpdate+"')"; 
		    bRes = SQL_CONFIG.runSQLString	(SQL_SERVER_HOST_,SQL_USER_NAME_,SQL_USER_PASS_,
		    								"KAS",
		    								sInsertSQL);
		    if(bRes != 0) then
		        MessageBox ("Ошибка при выполнении SQL запроса.", SEVERE);
		        bRes	= FALSE;
		        goto label_end;
		    else
		    	bRes=TRUE;
		    endif;
		
		    SetStatusWindow (95, "Добавление данных в реестр.");
			// insert registry keys
			nRootKey 				= HKEY_LOCAL_MACHINE;
			RegDBSetDefaultRoot		(nRootKey);
			if (RegDBSetKeyValueEx 	("Software\\KASClient\\Settings", "VersionDB", REGDB_STRING, sVersion,-1) < 0) then
			    MessageBox 			("RegDBSetKeyValueEx failed.", SEVERE);
			endif;
			if (RegDBSetKeyValueEx 	("Software\\KASClient\\Settings", "Main_ServerName", REGDB_STRING, sServerName,-1) < 0) then
			    MessageBox 			("RegDBSetKeyValueEx failed.", SEVERE);
			endif;
//.
			nRootKey 				= HKEY_CURRENT_USER;
			RegDBSetDefaultRoot		(nRootKey);
			if (RegDBSetKeyValueEx 	("Software\\KASClient\\Settings", "VersionDB", REGDB_STRING, sVersion,-1) < 0) then
			    MessageBox 			("RegDBSetKeyValueEx failed.", SEVERE);
			endif;
			if (RegDBSetKeyValueEx 	("Software\\KASClient\\Settings", "Main_ServerName", REGDB_STRING, sServerName,-1) < 0) then
			    MessageBox 			("RegDBSetKeyValueEx failed.", SEVERE);
			endif;
//.
		else
	        MessageBox ("Ошибка соединения с сервером.", SEVERE);
	        bRes	= FALSE;
	        goto label_end;
		endif;
		
label_end:
	    // Set the progress bar to 100% and displays a message.
	    SetStatusWindow (100, "Настройка окончена.");
	
	    SQL_CONFIG.deInitLibrary();
	
		// free dll
	    nResult = UnUseDLL (DLL_FILE);
	    if (nResult < 0) then
	        MessageBox ("Невозможно выгрузить: "+DLL_FILE, SEVERE);
	    endif;

		if (bRes=TRUE) then
			g_NeedReboot = TRUE;
		endif;
	    
	    // if error found -> abort instalation          
	    if (bRes=FALSE) then abort; endif;
	endif;
end;
//---------------------------------------------------------------------------
function MSDE_2000_UnInstalled()
begin
    StopServer	();
    ClearFolder	(MSDE_INSTANCE_FOLDER);
//	ClearFolder	(TARGETDIR);
end;
//---------------------------------------------------------------------------
// OnUninstall
//
// The OnUninstall event is called when the setup is run with the -uninst
// switch, in this case this is the only event that will be called.
//---------------------------------------------------------------------------
function OnUninstall()
string szIgnore, szMsg;
number nResult, nRootKey;
BOOL bOpt1, bOpt2;
begin

    // Hide the initial progress dialog.
    Disable( DIALOGCACHE );
	
	// Show Uninstall Confirmation Dialog
	if( MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO ) != IDYES ) then
        abort;
    endif;

    // Remove all features.
	FeatureRemoveAllInMediaAndLog();

    // Show Status
	SetStatusWindow( 0, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );

    // Uninstall
	nResult = FeatureTransferData( MEDIA );

    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;

    // Disable Status
	Disable( STATUSEX );

	// remove registry keys
	nRootKey 				= HKEY_LOCAL_MACHINE;
	RegDBSetDefaultRoot		(nRootKey);
	RegDBDeleteKey 			("Software\\KASClient");
//.
	nRootKey 				= HKEY_CURRENT_USER;
	RegDBSetDefaultRoot		(nRootKey);
	RegDBDeleteKey 			("Software\\KASClient");
//.
    // Show final dialog.
    if ( BATCH_INSTALL ) then
        SdFinishReboot( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG2), SYS_BOOTMACHINE, "", 0 );
    else    
        SdFinish( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG1), "", "" , "", bOpt1 , bOpt2 );
    endif;
 
end;
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
	NUMBER bShowUpdateServiceDlg;

	BOOL	mdac_found, mdac_need_install;
    string 	mdac_ver;
    number 	nRootKey; 
	NUMBER 	nvType, nvSize, nLocation;
begin
	// launch MuDAC setup	
	nRootKey 				= HKEY_LOCAL_MACHINE;
	mdac_found				= FALSE;
	mdac_need_install		= TRUE;
	RegDBSetDefaultRoot		(nRootKey);
	if (RegDBGetKeyValueEx("Software\\Microsoft\\dataAccess","FullInstallVer",nvType,mdac_ver,nvSize) = 0) then
		nLocation			= StrFind(mdac_ver,"2.8");
		if (nLocation=0)	then  mdac_found=TRUE; endif;
	endif;
	if (mdac_found=TRUE) then
		if (AskYesNo("'MDAC' версии 2.8 или выше уже установлен. Переустановить?",NO)=NO) then
			mdac_need_install = FALSE;
	 	endif;
	endif;                                   
	if (mdac_need_install=TRUE) then
		LaunchAppAndWait ("mdac_typ.exe", " /Q:A /C:\"dasetup /Q /N\"", WAIT);
		g_NeedReboot 		= TRUE;
	endif;

	// create uninstall shortcut
	CreateUninstallShortcut();

	// set reboot flag 
	if (g_NeedReboot=TRUE) then BATCH_INSTALL = TRUE; endif;
        
	// 
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

	// Set this to true if you have the update service enabled, and if you want to check for updates.
	// Note: the ISUS Starter Edition does not support checking for updates programatically.  So, 
	// only set this to true if you have at least the ISUS Professional Edition.
	bShowUpdateServiceDlg = FALSE;
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
		
		// If the update service is enabled, show finish dialog that includes
		// update check option.
		if( bShowUpdateServiceDlg && ( ENABLED_ISERVICES & SERVICE_ISUPDATE ) ) then

			if( SdFinishUpdateEx( szTitle, szMsg1, szMsg2, szOpt1, szOpt2, TRUE ) ) then

				// Don't check for updates in silent mode.
				if( MODE != SILENTMODE ) then
					UpdateServiceCheckForUpdates( "", FALSE );
				endif;

			endif;

		else
			SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
		endif;

    endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)	
end;
//---------------------------------------------------------------------------
