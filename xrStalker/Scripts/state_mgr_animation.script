

--' Скриптовое положение у тела
--' мы уже находимся в необходимом состоянии?
class "eva_state_mgr_animstate" (property_evaluator)
function eva_state_mgr_animstate:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate:evaluate()
	return (state_lib.states[self.st.target_state].animstate == nil) or
		   (state_lib.states[self.st.target_state].animstate == self.st.animstate:state())
end
--' заняты ли мы
class "eva_state_mgr_animstate_busy" (property_evaluator)
function eva_state_mgr_animstate_busy:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_busy:evaluate()
	self.st.animstate:update_state()
	return self.st.animstate:state() == "busy"
end

--' Нужно ли нам стоять
class "eva_state_mgr_animstate_idle" (property_evaluator)
function eva_state_mgr_animstate_idle:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_idle:evaluate()
	return state_lib.states[self.st.target_state].animstate == "stand"
end
--' Стоим ли мы
class "eva_state_mgr_animstate_idle_now" (property_evaluator)
function eva_state_mgr_animstate_idle_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_idle_now:evaluate()
	return self.st.animstate:state() == "stand"
end

--' Нужно ли нам сидеть
class "eva_state_mgr_animstate_sit" (property_evaluator)
function eva_state_mgr_animstate_sit:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_sit:evaluate()
	return state_lib.states[self.st.target_state].animstate == "sit"
end
--' Сидим ли мы
class "eva_state_mgr_animstate_sit_now" (property_evaluator)
function eva_state_mgr_animstate_sit_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_sit_now:evaluate()
	return self.st.animstate:state() == "sit"
end

--' Нужно ли нам спать
class "eva_state_mgr_animstate_sleep" (property_evaluator)
function eva_state_mgr_animstate_sleep:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_sleep:evaluate()
	return state_lib.states[self.st.target_state].animstate == "sleep"
end
--' Спим ли мы
class "eva_state_mgr_animstate_sleep_now" (property_evaluator)
function eva_state_mgr_animstate_sleep_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_sleep_now:evaluate()
	return self.st.animstate:state() == "sleep"
end

--' Нужно ли нам быть раненым
class "eva_state_mgr_animstate_wounded" (property_evaluator)
function eva_state_mgr_animstate_wounded:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_wounded:evaluate()
	return state_lib.states[self.st.target_state].animstate == "wounded"
end
--' Ранены ли мы
class "eva_state_mgr_animstate_wounded_now" (property_evaluator)
function eva_state_mgr_animstate_wounded_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animstate_wounded_now:evaluate()
	return self.st.animstate:state() == "wounded"
end

--' Заглушка-ожидание
class "act_state_mgr_animstate_wait" (action_base)
function act_state_mgr_animstate_wait:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animstate_wait:initialize()
	action_base.initialize(self)
end
function act_state_mgr_animstate_wait:execute()
	action_base.execute(self)
end
function act_state_mgr_animstate_wait:finalize()
	action_base.finalize(self)
end

--' Садимся из айдла
class "act_state_mgr_animstate_2sit" (action_base)
function act_state_mgr_animstate_2sit:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animstate_2sit:initialize()
	action_base.initialize(self)
	self.st.animstate:set_state("sit")
end
function act_state_mgr_animstate_2sit:execute()
	action_base.execute(self)
end
function act_state_mgr_animstate_2sit:finalize()
	action_base.finalize(self)
end
--' Встаем в айдл из сидячего
class "act_state_mgr_animstate_2idle" (action_base)
function act_state_mgr_animstate_2idle:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animstate_2idle:initialize()
	action_base.initialize(self)
	self.st.animstate:set_state("stand")
end
function act_state_mgr_animstate_2idle:execute()
	action_base.execute(self)
end
function act_state_mgr_animstate_2idle:finalize()
	action_base.finalize(self)
end
--' Засыпаем из сидячего
class "act_state_mgr_animstate_2sleep" (action_base)
function act_state_mgr_animstate_2sleep:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animstate_2sleep:initialize()
	action_base.initialize(self)
	self.st.animstate:set_state("sleep")
end
function act_state_mgr_animstate_2sleep:execute()
	action_base.execute(self)
end
function act_state_mgr_animstate_2sleep:finalize()
	action_base.finalize(self)
end
--' Ранены из айдла
class "act_state_mgr_animstate_2wounded" (action_base)
function act_state_mgr_animstate_2wounded:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animstate_2wounded:initialize()
	action_base.initialize(self)
	self.st.animstate:set_state("wounded")
end
function act_state_mgr_animstate_2wounded:execute()
	action_base.execute(self)
end
function act_state_mgr_animstate_2wounded:finalize()
	action_base.finalize(self)
end



--' Класс, реализующий состояния тела

class "body_state"
function body_state:__init(npc)
	self.npc = npc
	self.target_state = "stand"
	self.current_state = "stand"

	self.transfer_anim = {
		stand		= { sit			= {"idle_to_sit_0"},
						sleep		= {"idle_to_sit_0","sit_to_sleep_0"}, 
						wounded		= {"idle_to_wounded_0"} },
		sit			= { stand		= {"sit_to_idle_0"},
						sleep		= {"sit_to_sleep_0"},
						wounded		= {"sit_to_idle_0","idle_to_wounded_0"} },
		sleep		= {	stand		= {"sleep_to_sit_0","sit_to_idle_0"},
						sit			= {"sleep_to_sit_0"},
						wounded		= {"sleep_to_sit_0","sit_to_idle_0","idle_to_wounded_0"} },			
		wounded		= {	stand		= {"wounded_to_idle_0"},
						sit			= {"wounded_to_idle_0","idle_to_sit_0"},
						sleep		= {"wounded_to_idle_0","idle_to_sit_0","sit_to_sleep_0"} } 
	}

	self.idle_anim = {
		sit			= "item_0_idle_0",
		sleep		= "sleep_idle_0",
		wounded		= "wounded_idle_0"
	}

end
--' Проверяет закончили ли мы изменение положения тела
function body_state:update_state()
	if self.target_state ~= self.current_state then
		if self.idle_anim[self.target_state] ~= nil then
			if self.npc:animation_count() <= 1 then
				self.current_state = self.target_state
			end
		else
			if self.npc:animation_count() == 0 then
				self.current_state = self.target_state
			end
		end
	end
end
--' Возвращает текущее состояние тела
function body_state:state()
	--printf("%s",self.current_state)
	return self.current_state
end
--' Установка нового положения тела
function body_state:set_state(id)
	printf("set new target state %s", id)
	
	self.npc:clear_animations()
	if self.transfer_anim[self.current_state] ~= nil and
	   self.transfer_anim[self.current_state][id] ~= nil
	then
		for k,v in self.transfer_anim[self.current_state][id] do
			self.npc:add_animation(v,true)
		end
	end
	if self.idle_anim[id] ~= nil then
		self.npc:add_animation(self.idle_anim[id],true)
	end
	self.current_state = "busy"
	self.target_state = id
end



