function printf()
end

local anima=0

--' Анимации персонажа
--' мы уже находимся в необходимом состоянии?
class "eva_state_mgr_animation" (property_evaluator)
function eva_state_mgr_animation:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation:evaluate()
	if self.st.callback ~= nil and
		self.st.callback.func ~= nil and
		state_lib.states[self.st.target_state].animation == nil and
		self.st.callback.begin == nil
	then
		--printf("animation false")
		return false
	end

	return state_lib.states[self.st.target_state].animation == self.st.animation:state()
end
--' нужно ли нам отыгрывать извращенную анимацию
class "eva_state_mgr_animation_play" (property_evaluator)
function eva_state_mgr_animation_play:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_play:evaluate()
	return state_lib.states[self.st.target_state].animation ~= nil
end
--' Отыгрываем ли мы сейчас извращенную анимацию
class "eva_state_mgr_animation_play_now" (property_evaluator)
function eva_state_mgr_animation_play_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_play_now:evaluate()
	return self.st.animation:state() ~= "wait" and self.st.animation:state() ~= nil
end
--' нужно ли нам вообще не отыгрывать анимацию
class "eva_state_mgr_animation_none" (property_evaluator)
function eva_state_mgr_animation_none:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_none:evaluate()
	return state_lib.states[self.st.target_state].animation == nil
end
--' мы уже не отыгрываем никакую извращенную анимацию
class "eva_state_mgr_animation_none_now" (property_evaluator)
function eva_state_mgr_animation_none_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_none_now:evaluate()
	return self.st.animation:state() == nil
end
--' нужен ли схеме экстренный ресет
class "eva_state_mgr_animation_reset" (property_evaluator)
function eva_state_mgr_animation_reset:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_reset:evaluate()
	--printf("reset state [%s]", utils.to_str(self.st.reset_state))
	--printf("state [%s]", utils.to_str(state_lib.states[target_state]))
//	if state_lib.states[target_state] ~= nil then
//		--printf("state reset [%s]", utils.to_str(state_lib.states[target_state].reset))
//	end

	if self.st.callback ~= nil and
		self.st.callback.func ~= nil and
		state_lib.states[self.st.target_state].animation == nil and
		self.st.callback.begin == nil
	then
		return true
	end
	
	return self.st.reset_state == true and
		   state_lib.states[self.st.target_state] ~= nil and
		   self.st.current_state == self.st.target_state and
		   state_lib.states[self.st.target_state].reset == true	
end
--' залочена ли схема
class "eva_state_mgr_animation_locked" (property_evaluator)
function eva_state_mgr_animation_locked:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_locked:evaluate()
--	printf("animstate %s", utils.to_str(self.st.animation:state()))
	return self.st.animation:state() == "wait" or
		   self.st.animation:state() == "new"
end


--' Играем входную анимацию
class "act_state_mgr_animation_start" (action_base)
function act_state_mgr_animation_start:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_start:initialize()
	action_base.initialize(self)
	self.st.animation:set_state(state_lib.states[self.st.target_state].animation)
end
function act_state_mgr_animation_start:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_start:finalize()
	action_base.finalize(self)
end
--' ресетим анимацию
class "act_state_mgr_animation_reset" (action_base)
function act_state_mgr_animation_reset:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_reset:initialize()
	action_base.initialize(self)
	--printf("RESET")
	self.st.animation:set_state(state_lib.states[self.st.target_state].animation, true)
	self.st.reset_state = false
end
function act_state_mgr_animation_reset:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_reset:finalize()
	action_base.finalize(self)
end
--' Играем выходную анимацию
class "act_state_mgr_animation_stop" (action_base)
function act_state_mgr_animation_stop:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_stop:initialize()
	action_base.initialize(self)
	self.st.animation:set_state(nil)
end
function act_state_mgr_animation_stop:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_stop:finalize()
	action_base.finalize(self)
end


class "animation"
function animation:__init(npc, mgr)
	self.mgr = mgr
	self.npc = npc
	
	self.animations = state_mgr_animation_list.get_anim()

	self.states = {
		last_id = nil,
		current_state = nil,
		target_state = nil,
		begin = nil,
		idle = nil,
		anim_level = 0,
		attach_items = {hand_radio	= {mode = "detach", done = true},
						bread_a		= {mode = "detach", done = true},
						vodka_a		= {mode = "detach", done = true},
						kolbasa_a	= {mode = "detach", done = true},
						guitar_a	= {mode = "detach", done = true},
						harmonica_a	= {mode = "detach", done = true},
						binocular_a	= {mode = "detach", done = true}}
	}
	
	self.clb_settings = {
		cnt = 0,
		a = nil,
		d = nil,
		s = nil
	}
end
--' установка нового состояния
function animation:set_state(id, reset)
	printf("set new animation [%s], current_state [%s]", tostring(id), tostring(self.states.target_state))
	local nn = 0
	local wpn_slot = self:weapon_slot()
	--' выход из старого состояния
	self.npc:clear_animations()	
	if self.animations[self.states.target_state] ~= nil then
		if self.mgr.emerg.animation_nout == true or
		   self.mgr.emerg.animation == true
		then
			-- обнулить озвучку (только если он задан в анимации)
			if self.npc:active_sound_count() > 0 then
				if self.mgr.subanim > 0 then
					for key = self.mgr.subanim, 0 do
						local a = self.animations[self.states.target_state].subanim[key]
						if a and a.into_music then
							stop_play_sound(self.npc)
							break
						end
					end
				end
			end
						
			-- экстренный выход, необходимо дропнуть приатаченные предметы
			if self.animations[self.states.target_state].out ~= nil then
				anima = self:anim_for_slot(wpn_slot,self.animations[self.states.target_state].out)
				if anima then
					if type(anima) == "table" then
						for k,v in anima do
							if type(v) == "table" and v.d ~= nil then
								local obj = self.npc:object(v.d)
								if obj then
									printf("extra detached [%s] for [%s]", obj:name(), self.npc:name())
									obj:enable_attachable_item(false)
									printf("droped [%s] for [%s]", obj:name(), self.npc:name())
									self.npc:drop_item(obj)--, self.npc:position()) !!!FIXED !!!
								end
								self.states.attach_items[v.d].mode = "detach"
								self.states.attach_items[v.d].done = true
							end
						end
					end
				end	
			end		
		else
			-- выход из поданимаций	
			if self.mgr.subanim > 0 then
				for key = self.mgr.subanim, 0 do
					local a = self.animations[self.states.target_state].subanim[key]
					if a and a.out then
						anima = self:anim_for_slot(wpn_slot,a.out)
						if anima then
							self.npc:add_animation(anima, true)
						end
					end
				end
			end			
			if self.animations[self.states.target_state].out ~= nil then
				anima = self:anim_for_slot(wpn_slot,self.animations[self.states.target_state].out)
				if anima then
					if type(anima) == "table" then
						for k,v in anima do
							if type(v) == "table" then
								printf("set_a_c out old")
								self:set_anim_callback(v)
							else
								self.npc:add_animation(v, true)
							end
						end
					else
						self.npc:add_animation(anima, true)
					end
					nn = nn +1
				end			
			end
		end
	end
	--' вход в новое состояние	
	if self.animations[id] ~= nil then
		if self.animations[id].into ~= nil then
			anima = self:anim_for_slot(wpn_slot,self.animations[id].into)
			if type(anima) == "table" then
				for k,v in anima do
					if type(v) == "table" then
						printf("set_a_c in new")
						self:set_anim_callback(v)
					else
						self.npc:add_animation(v, true)
					end
				end
				nn = nn +1
			else
				self.npc:add_animation(anima, true)
				nn = nn +1
			end
		end
		if reset == true then
			if self.mgr.callback ~= nil then
				self.mgr.callback.begin = nil
			end
			self:play_rnd(id, 100)			
		end
		if self.animations[id].idle ~= nil then
			anima = self:anim_for_slot(wpn_slot,self.animations[id].idle)
			if anima then
				self.npc:add_animation(anima, true)
			end
			nn = nn + 1
		else
			-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
			self.mgr.animstate:add_idle_animation()
		end
	else
		-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
		self.mgr.animstate:add_idle_animation()
	end

	self.states.current_state = "new"
	self.states.target_state = id
	self.states.begin = nil
	self.states.anim_level = 0
	self.mgr.emerg.animation = nil
end
--' апдейт
function animation:update()
--	printf("update")
--	printf("		time %s", time_global())				
--	printf("		current state %s", utils.to_str(self.states.current_state))
--	printf("		target state %s", utils.to_str(self.states.target_state))
--	printf("		anims %s", self.npc:animation_count())
	self.is_called = false
	
	-- !!! проверка что закончился играться наш звук
	if self.sound_played then
		if self.npc:active_sound_count() == 0 then
			self.sound_played = false
		end
	end	

	-- АТТАЧ ДЕТАЧ ОБЪЕКТОВ
	for k,v in self.states.attach_items do
--		printf("Trying to attach [%s]", tostring(k))
		if v.done == false then
--			printf("proceed [%s]", tostring(k))
			local t = self.npc:object(k)
			if t then
--				printf("item [%s] exist", tostring(k))
				if v.mode == "attach" then
					printf("item [%s] attached for [%s]", tostring(k), self.npc:name())
					t:enable_attachable_item(true)
				elseif v.mode == "detach" then
					printf("item [%s] detached for [%s]", tostring(k), self.npc:name())
					t:enable_attachable_item(false)
				end
			end
			v.done = true
		end
	end
	
	if self.states.current_state == nil then
		self:callback_process()
		return
	end

	-- обрубить анимации и экстренно начать сразу
	if self.mgr.emerg ~= nil and  
	   self.mgr.emerg.animation == true then
		
		--если мы уже
--		if self.states.target_state ~= state_lib.states[self.mgr.target_state].animation 
--		then
--			self.npc:clear_animations()
--			self:set_state(nil)
--			self.states.current_state = nil
--		end			
--		self.mgr.emerg.animation = nil

		self.npc:clear_animations()
		self:set_state(nil)
		self.states.current_state = nil
		self.mgr.emerg.animation = nil

		return
	end

	-- проверка закончился ли переход в состояние
	if self.states.current_state == "new" then
		local nnum = 0
		if (self.animations[self.states.target_state] ~= nil and
		   self.animations[self.states.target_state].idle ~= nil) or
		   self.mgr.animstate:idle_animation_present()
		then
			nnum = 1
		end
		if self.npc:animation_count() <= nnum then
			self.states.current_state = self.states.target_state
			self:callback_init()
		end
		return
	end
	
	--' ожидаем окончания перехода.
	if self.states.current_state == "wait" then		
		local nnum = 0
		if (self.animations[self.states.target_state] ~= nil and
		   self.animations[self.states.target_state].idle ~= nil) or
		   self.mgr.animstate:idle_animation_present()
		then
			nnum = 1
		end
		if self.npc:animation_count() <= nnum then
			self.states.current_state = self.states.target_state
		end
		
		-- инициализация коллбека при повторном вызове этого же стейта
		if self.states.target_state == state_lib.states[self.mgr.target_state].animation and
		   self.mgr.callback and self.mgr.callback.func and self.mgr.callback.timeout and
		   self.mgr.callback.begin == nil
		then
			self:callback_init()
		end
		self:callback_process()
		return
	end
	
	-- Отыгрыш рандомных анимашек, если они есть
	if 	self.states.current_state == self.states.target_state then
		--' проверка на экстренный ресет схемы	
		if self:callback_process() == true then
			return
		end
		local wpn_slot = self:weapon_slot()
		-- Проверка на уровень рекурсивности.
		-- если нужный уровень рекурсии достигнут - играть рандомные и зацикленные айдлы из него.
		-- если нет - отыграть весь набор входных анимаций до него.
		if self.states.anim_level < self.mgr.subanim then
			self.npc:clear_animations()
			for key = self.states.anim_level+1, self.mgr.subanim do
				local a = self.animations[self.states.current_state].subanim[key]
				if a and a.into then
					anima = self:anim_for_slot(wpn_slot,a.into)
					if anima then
						self.npc:add_animation(anima, true)
					end
				end
				--' устанавливаем музыку
				if a.into_music then
					xr_sound.set_sound_play(self.npc, a.into_music)
				end				
			end
			self.states.anim_level = self.mgr.subanim
			-- добавляем айдл текущего уровня
			anima = self:anim_for_slot(wpn_slot,self.animations[self.states.current_state].subanim[self.states.anim_level].idle)
			if anima then
				self.npc:add_animation(anima, true)
			end		
			self.states.current_state = "wait"			
			return
		end
		-- если текущий уровень рекурсии выше, чем необходимый - отыграть набор выходных анимаций из него.
		if self.states.anim_level > self.mgr.subanim then
			self.npc:clear_animations()
			for key = self.states.anim_level, self.mgr.subanim+1 do
				local a = self.animations[self.states.current_state].subanim[key]
				if a and a.out then
					anima = self:anim_for_slot(wpn_slot,a.out)
					if anima then
						self.npc:add_animation(anima, true)
					end
				end
			end
			self.states.anim_level = self.mgr.subanim
			-- добавляем айдл текущего уровня
			local anima
			if self.states.anim_level == 0 then
				anima = self:anim_for_slot(wpn_slot,self.animations[self.states.current_state].idle)
			else
				anima = self:anim_for_slot(wpn_slot,self.animations[self.states.current_state].subanim[self.states.anim_level].idle)
			end
			if anima then
				self.npc:add_animation(anima, true)
			end		
			self.states.current_state = "wait"
			return
		end
		--' Определяем нужно ли добавлять анимацию или ждать
		if	self.animations[self.states.current_state] ~= nil then
			local state			
			if self.states.anim_level == 0 then
				state = self.animations[self.states.current_state]
			else
				state = self.animations[self.states.current_state].subanim[self.states.anim_level]
			end
			if state.rnd ~= nil then
				if self.states.begin == nil then				
					self:play_rnd(state, true)
				elseif time_global() - self.states.begin > self.states.idle then
					self:play_rnd(state)
				end
			end
		end		
	
	end
end
-- Отыгрыш рандомной анимации
function animation:play_rnd(state, must_play)
	--printf("try to add rnd animation [%s] for [%s]", utils.to_str(state), utils.to_str(rnd))
	-- нельзя добавлять рандом во время лока схемы.
	if not (self.mgr.planner:evaluator(self.mgr.properties["animation"]):evaluate() and
	        self.mgr.planner:evaluator(self.mgr.properties["weapon"]):evaluate())
	then
		return
	end
	
	-- !!! проверка что закончился играться наш звук
	if self.sound_played then
		if self.npc:active_sound_count() == 0 then
			self.sound_played = false
		end
		return
	end
	
	--' Определение промежутков времени между анимациями	
	self.states.begin = time_global()
	self.states.idle = (math.random(state.prop.maxidle) + 
									state.prop.sumidle) * 1000
	if math.random(100) < state.prop.rnd or must_play then	
		local wpn_slot = self:weapon_slot()
		local anima = self:anim_for_slot(wpn_slot,state.rnd)
		if anima == nil then			
			return
		end
		
		local r
		if table.getn(anima) > 1 then			
			if self.states.last_id == nil then
				r = math.random(table.getn(anima))
			else
				r = math.random(table.getn(anima)-1)
				if r >= self.states.last_id then
					r = r + 1
				end
			end
			self.states.last_id = r
		else
			r = 1
		end		
		self.npc:clear_animations()
		if anima[r] ~= nil then
			self.npc:add_animation(anima[r], true)
			-- добавить рандомный звук
			if self.mgr.synsound and self.npc:active_sound_count() == 0 then
				xr_sound.set_sound_play(self.npc, self.mgr.synsound)
				self.sound_played = true		   
			end
		end
		if state.idle ~= nil then
			anima = self:anim_for_slot(wpn_slot,state.idle)
			if anima then
				self.npc:add_animation(anima, true)
			end
		else
			-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
			self.mgr.animstate:add_idle_animation()
		end				
		self.states.current_state = "wait"				
	end
end
-- Инициализация коллбека
function animation:callback_init()
--		printf("callback init")
		
		if self.mgr.callback ~= nil and
		   self.mgr.callback.func ~= nil and
		   state_lib.states[self.mgr.target_state].animation == self.states.current_state and
		   self.mgr.callback.begin == nil
		then
				self.mgr.callback.begin = time_global()
--				printf("		Callback initialized %s", time_global())				
		end
end
--' обработка колбека на время
function animation:callback_process()
		local ret = false
		
		if self.mgr.callback ~= nil and
		   self.mgr.callback.func ~= nil and
		   self.mgr.callback.begin ~= nil
		then
--			printf("callback process")
--			printf("	%s - %s ? %s", time_global(), utils.to_str(self.mgr.callback.begin), utils.to_str(self.mgr.callback.timeout))
			if time_global() - self.mgr.callback.begin >= self.mgr.callback.timeout then
--				printf("		Callback called %s", time_global())
				
				local a = self.mgr.callback.func
				local b = self.mgr.callback.obj
				self.mgr.callback.begin = nil
				self.mgr.callback.func = nil
				a(b)
				ret = true
			end
		end
		return ret
end
--' настройка колбека на особые действия
function animation:set_anim_callback(a)
	print_table(a)
	self.clb_settings.cnt = self.npc:animation_count()
	printf("a_count [%s]", self.clb_settings.cnt)
	self.clb_settings.a = a.a
	self.clb_settings.d = a.d
	self.clb_settings.s = a.s
	self.clb_settings.sh = a.sh
	return true 
end
--' коллбек на особые действия
function animation:anim_callback()
	printf("anim callback [%s] of [%s]", self.clb_settings.cnt, self.npc:animation_count())
	self.clb_settings.cnt = self.clb_settings.cnt - 1
	if self.clb_settings.cnt == 0 then
		if self.clb_settings.a ~= nil and
		   self.states.attach_items[self.clb_settings.a] ~= nil 
		then
			printf("item [%s] attach", utils.to_str(self.clb_settings.a))	
			self.states.attach_items[self.clb_settings.a].mode = "attach"
			self.states.attach_items[self.clb_settings.a].done = false
		end
		self.clb_settings.a = nil
		if self.clb_settings.d ~= nil and
		   self.states.attach_items[self.clb_settings.d] ~= nil 
		then
			printf("item [%s] detach", utils.to_str(self.clb_settings.d))	
			self.states.attach_items[self.clb_settings.d].mode = "detach"
			self.states.attach_items[self.clb_settings.d].done = false
		end
		self.clb_settings.d = nil
		if self.clb_settings.s ~= nil then
			xr_sound.set_sound_play(self.npc, self.clb_settings.s)
		end
		self.clb_settings.s = nil
		if self.clb_settings.sh ~= nil then
			-- наносим хит себе.
			local h = hit()
			h.power = self.clb_settings.sh
			h.direction = vector_rotate_y(self.npc:direction(), 90)
			h.bone = "bip01_head"
			h.draftsman = self.npc
			h.impulse = 200
			h.type = hit.wound
			self.npc:hit(h)
		end
		self.clb_settings.sh = nil
	end
	return true 
end
--' в каком состоянии мы находимся
function animation:state()
	return self.states.current_state
end
--' в каком состоянии мы находимся
function animation:target_state()
	return self.states.target_state
end
--' оружейный слот
function animation:weapon_slot()
	local weapon = self.npc:active_item()
	if weapon == nil or self.npc:weapon_strapped() == true then
		return 0
	end
	
--	printf("SLOT [%s]", utils.to_str(weapon:animation_slot()))
		
	return weapon:animation_slot()
end
--' оружейный слот
function animation:anim_for_slot(slot, t)
--	printf("ANIM for SLOT [%s]", slot)
	if t[slot] ~= nil then
		return t[slot]
	else
		return t[0]
	end			
end