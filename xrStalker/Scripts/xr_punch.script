
-- Punch. Разработчик: Andrey Fidrya (Zmey) af@svitonline.com

punch = {}

----------------------------------------------------------------------------------------------------------------------
class "evaluator_need_punch" (property_evaluator)

function evaluator_need_punch:__init(storage) super ()
	self.a = storage
end

function evaluator_need_punch:evaluate ()
	--printf("evaluator_need_punch:evaluate()")
	local whom = this.punch[self.object:id()]
	if whom then
		return true
	end

	return false
end

----------------------------------------------------------------------------------------------------------------------
class "action_punch_activity" (action_base)

function action_punch_activity:__init(npc_name, action_name, storage) super (nil, action_name)
	self.a = storage

	self.state_none = 0
	self.state_approaching = 1
	self.state_punch = 2
end

function action_punch_activity:initialize()
	--printf("_bp: action_punch_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self.object:set_detail_path_type(move.line)
	self.object:set_body_state(move.standing)
        self.object:set_movement_type(move.stand)
	self.object:set_sight(look.danger, nil, 0)
	self.object:set_mental_state(anim.danger)

	local whom = this.punch[self.object:id()]
	if whom then
		whom:stop_talk()
		self.object:set_path_type(game_object.level_path)
		self.object:set_desired_direction(whom:direction())
		self.object:set_dest_level_vertex_id(whom:level_vertex_id())
		self.object:set_movement_type(move.run)
	end
	self.state = self.state_approaching

	xr_reactions.add_rule(self.object, "ignore")

	self.object:clear_animations()
end

function action_punch_activity:execute()
	--printf("exec!")
	local whom = this.punch[self.object:id()]
	if not whom then
		return
	end

	if not whom:alive() then
		this.punch[self.object:id()] = nil
		return
	end

	self.object:set_item(object.deactivate, self.object:best_weapon())

	if self.state == self.state_approaching then
		--printf("approaching")
		if self.object:position():distance_to(whom:position()) < 1.5 then
			self.object:set_movement_type(move.stand)
			self.object:add_animation("udar_0", true)
			self.expiration_time = device():time_global() + 700
			self.state = self.state_punch
		else
			self.object:set_desired_direction(whom:direction())
			self.object:set_dest_level_vertex_id(whom:level_vertex_id())
		end
		return
	end

	if self.state == self.state_punch then
		--printf("punch")
		if device():time_global() >= self.expiration_time then
			local anim_count = self.object:animation_count()
			if anim_count > 0 and self.object:position():distance_to(whom:position()) < 2 then
				local h = hit()
				h.power = 1000
				h.direction:set(1, 0, 0)
				h:bone("bip01_head")
				h.draftsman = self.object
				h.impulse = 10
				h.type = hit.wound
				whom:hit(h)

				self.state = self.state_none
			elseif anim_count == 0 then
				self.object:set_path_type(game_object.level_path)
				self.object:set_desired_direction(whom:direction())
				self.object:set_dest_level_vertex_id(whom:level_vertex_id())
				self.object:set_movement_type(move.run)
				self.state = self.state_approaching
			end
		end
		return
	end
end

function action_punch_activity:finalize()
	--printf("_bp: FINALIZE")
	self.object:clear_animations()

	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc)
	--printf("_bp: add_to_binder (punch)")
	local operators    = {}
	local properties  = {}

	local manager = npc:motivation_action_manager()

	properties["need_punch"]   = xr_evaluators_id.zmey_punch_base + 1
	operators["action_punch"]   = xr_actions_id.zmey_punch_base + 1

	-- // evaluators
	manager:add_evaluator (properties["need_punch"],   this.evaluator_need_punch  (xr_motivator.storage[npc:id()].punch))

	local new_action = this.action_punch_activity(npc, "action_punch_activity", xr_motivator.storage[npc:id()].punch)
	new_action:add_precondition    (world_property(stalker_ids.property_alive,   true))
	new_action:add_precondition    (world_property(stalker_ids.property_enemy,   false))
	new_action:add_precondition    (world_property(properties["need_punch"],   true))
	new_action:add_effect(world_property(properties["need_punch"], false))
	manager:add_action(operators["action_punch"], new_action)

	new_action = manager:action(stalker_ids.action_puzzle_solver)
	new_action:add_precondition(world_property(properties["need_punch"], false))
end

-- функции
function vector_copy_by_val(vec)
	local newvec = vector()
	newvec.x = vec.x
	newvec.y = vec.y
	newvec.z = vec.z
	return newvec
end

