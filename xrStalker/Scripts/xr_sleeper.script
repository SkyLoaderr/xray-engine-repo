----------------------------------------------------------------------------------------------------
-- Sleeper
----------------------------------------------------------------------------------------------------
-- Разработчик: Руслан Диденко (Stohe)
----------------------------------------------------------------------------------------------------
-- 27.12.2004 - [Zmey] Перевел схему на использование move manager.

local sounds = {}

local state_walking = 0
local state_sleeping = 1

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Константа
class "evaluator_need_sleeper" (property_evaluator)
function evaluator_need_sleeper:__init(storage) super ()
	self.st = storage
end

function evaluator_need_sleeper:evaluate ()
	return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обычное поведение
class "action_sleeper_activity" (action_base)
function action_sleeper_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
	--
	--self.timer = {  begin = nil,
	--		idle = nil,
	--		maxidle = 10,
	--		sumidle = 20,
	--		random = 50 }
	--self.ptr = nil
	--self.ptrname = nil
	--self.points = {}	
	--self.state = 0 --' счетчик FSM

	--self.sound_w = { rnd = 60,
	--			   maxidle = 10, 
	--			   sumidle = 10,
	--			   themes = { "weather", "state" } }	
	--self.sound_s = { rnd = 100,
	--			   maxidle = 1, 
	--			   sumidle = 0,
	--			   themes = { "sleep" } }

	self.move_mgr = move_mgr.move_mgr(storage.npc)
end

function action_sleeper_activity:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()        
	--self.state = 0

	self.move_mgr:initialize()

	self:reset_scheme()
end

function action_sleeper_activity:reset_scheme()
	--printf("reset_scheme, initialized=%s", utils.to_str(self.initialized))

	self.timer = { begin = nil,
	               idle = nil,
                       maxidle = 10,
                       sumidle = 20,
                       random = 50 }

	self.sound_w = { rnd = 60,
	                 maxidle = 10, 
	                 sumidle = 10,
	                 themes = { "weather", "state" } }	
	self.sound_s = { rnd = 100,
	                 maxidle = 1, 
	                 sumidle = 0,
	                 themes = { "sleep" } }

	self.st.signals = {}

	self.state = state_walking
	
	if self.st.path_walk_info == nil then
		self.st.path_walk_info = utils.path_parse_waypoints_from_arglist(self.st.path_main,
			2, { 1, "wp00" }, { 0, "wp01" } )
	end
	if self.st.path_look_info == nil then
		self.st.path_look_info = utils.path_parse_waypoints_from_arglist(self.st.path_main,
			2, { 0, "wp00" }, { 1, "wp01|ret=1" } )
	end

	self.move_mgr:reset(self.st.path_main, self.st.path_walk_info, self.st.path_main, self.st.path_look_info,
		nil, nil, { obj = self, func = self.callback } )
end	

function action_sleeper_activity:callback(mode, number)
	--self.object:set_movement_type(move.stand)
	self.state = state_sleeping
	return true
end
	
function action_sleeper_activity:execute()
	action_base.execute(self)

	if xr_state.finish_state(self.object) ~= true then	
		return
	end
	
	if self.state == state_walking then
		self.move_mgr:update()
		if self.move_mgr:arrived_to_first_waypoint() then
			xr_logic.try_switch_to_another_section(self.object, self.st)
		end
		return
	end

	if self.state == state_sleeping then
		self.object:set_item(object.deactivate, self.object:best_weapon())	
		if self.st.wakeable then
			xr_state.change_state(self.object, xr_state.sit)
			xr_sound.sound_update(self.object, self.sound_w)
		else		
			xr_state.change_state(self.object, xr_state.sleep)
			if self.timer.begin == nil then
				self.timer.begin = device():time_global()/1000
				self.timer.idle = math.random(self.timer.maxidle) + self.timer.sumidle
			end		
			if device():time_global()/1000 - self.timer.begin > self.timer.idle then
				self.timer.begin = device():time_global()/1000
				self.timer.idle = math.random(self.timer.maxidle) + self.timer.sumidle
				if math.random(100) < self.timer.random then
					-- добавление рандомных анимаций
					self.object:clear_animations()
        			self.object:add_animation("spit_1",true)	
					self.object:add_animation("spit_2",true)
				end
			end
			xr_sound.sound_update(self.object, self.sound_s)
		end
		xr_logic.try_switch_to_another_section(self.object, self.st)
	end
end

function action_sleeper_activity:finalize()
	xr_state.change_state(self.object, xr_state.stand)
	self.move_mgr:finalize()
   	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--Sleeper binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
  	local operators    = {}
  	local properties  = {}

	sounds["sleep"] 	= xr_sounds_id.stohe_kamp_base + 1

	npc:add_sound("script_replics\\soldier_1\\idle\\soldier_sleep_", 20, snd_type.talk, 2, 1, sounds["sleep"])

  	local manager = npc:motivation_action_manager()

  	properties["need_sleeper"]   	= xr_evaluators_id.zmey_sleeper_base + 1

  	operators["action_sleeper"]   	= xr_actions_id.zmey_sleeper_base + 1

  	-- // evaluators
  	manager:add_evaluator (properties["need_sleeper"],   this.evaluator_need_sleeper  (xr_motivator.storage[npc:id()].sleeper))

  	local action = this.action_sleeper_activity(npc, "action_sleeper_activity", xr_motivator.storage[npc:id()].sleeper)
  	action:add_precondition		(world_property(stalker_ids.property_alive,   	true))
  	action:add_precondition    	(world_property(stalker_ids.property_enemy,   	false))
  	action:add_precondition    	(world_property(properties["need_sleeper"],   	true))
  	xr_motivator.addCommonPrecondition(action)
 	action:add_effect(world_property(properties["need_sleeper"], false))
  	manager:add_action(operators["action_sleeper"], action)
	
	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, storage, action)

  	action = manager:action(xr_actions_id.alife)
  	action:add_precondition(world_property(properties["need_sleeper"], false))
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)		
	st.path_main = utils.cfg_get_string(ini, section, "path_main", npc, true,  gulag_name)
	st.wakeable	 = utils.cfg_get_bool(ini, section, "wakeable", npc, false)

	st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_look_info = nil -- не загружены.
end


