----------------------------------------------------------------------------------------------------
-- Mob remarks
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
-- Исходный скрипт (trader): Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
----------------------------------------------------------------------------------------------------

class "mob_walker"

function mob_walker:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function mob_walker:reset_scheme()
	printf("_bp: mob_walker:reset_scheme: %s", self.object:name())

	xr_logic.mob_capture(self.object, not self.st.no_reset)

	if self.st.path_walk_info == nil then
		self.st.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	end
	if self.st.path_look_info == nil then
		self.st.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	end

	action(self.object, move(move.walk_fwd, patrol(self.st.path_walk, patrol.start, patrol.continue)),
		cond(cond.move_end))
end

function mob_walker:update(delta)
	--printf("__bp: mob_walker update: %d", device():time_global())
	local actor = level.actor()
	if not actor then
		return
	end

	local enemy = self.object:get_enemy()
	
	if not xr_logic.is_active(self.object, self.st) then
		return
	end

	if enemy then
		if not self.st.friendly and
		   (not self.st.actor_friendly or enemy ~= actor) then
			xr_logic.mob_release(self.object)
			return
		end
	end
	
	local h = self.object:get_monster_hit_info()
	if h.who and h.time ~= 0 then
		if h.who:id() == actor:id() and self.st.actor_friendly then
			self.st.actor_friendly = false
		end
		printf("_bp [%s]: h.who:name() = %s", self.object:name(), h.who:name())
		xr_logic.mob_release(self.object)
		return
	end

	if not xr_logic.mob_captured(self.object) then
		self:reset_scheme()
	end

	xr_logic.try_switch_to_another_section(self.object, self.st)


end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	printf("DEBUG: add_to_binder: npc:name()='%s', scheme='%s', section='%s'", npc:name(), scheme, section)

	local new_action = mob_walker(npc, storage)

	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.no_reset        = utils.cfg_get_bool(ini, section, "no_reset", npc, false)
	st.actor_friendly  = utils.cfg_get_bool(ini, section, "actor_friendly", npc, false)
	st.friendly        = utils.cfg_get_bool(ini, section, "friendly", npc, false)
	st.path_walk       = utils.cfg_get_string(ini, section, "path_walk", npc, true,  gulag_name)
	st.path_look       = utils.cfg_get_string(ini, section, "path_look", npc, false, gulag_name)

	st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_look_info = nil -- не загружены.
end

