----------------------------------------------------------------------------------------------------------------------
--'	Схема кемпер. Чудак с бальшой пушкой ходит и отстреливает живность.
--'	автор: Диденко Руслан (Stohe)
--'	TODO: 
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
	function id(npc)
		return npc:id()
	end

--' Условие завершения скрипта
class "evaluator_end" (property_evaluator)
function evaluator_end:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_end:evaluate()
	return not xr_logic.is_active(self.object, self.a)
end

--' Находимся ли мы недалеко от своей позиции
class "evaluator_place" (property_evaluator)
function evaluator_place:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_place:evaluate()
	
	local path = patrol(self.a.path_walk)
	if path ~= nil then
		for k = 0, path:count() - 1 do
			if utils.stalker_at_waypoint(self.object, patrol(self.a.path_walk), 0) then
				return true
			end
		end
		return false
	end
	
	return true
end

--' Обычный комбат или кемперский
class "evaluator_close_combat" (property_evaluator)
function evaluator_close_combat:__init(name, storage) super (nil, name)
	self.a = storage
	self.close_combat = false
end
function evaluator_close_combat:evaluate()
	if not xr_logic.is_active(self.object, self.a) then
		return true
	end

	local best_enemy = self.object:best_enemy()
	if best_enemy == nil then return true end
--printf("%s %s %s", self.a.radius, self.a.big_radius, distance_between(self.object, self.object:best_enemy()))
--printf("%s", utils.to_str(self.close_combat))

	if self.close_combat == false then
		self.close_combat = distance_between(self.object, self.object:best_enemy()) < self.a.radius
	end

	if self.close_combat == true then
		local a = self.object:memory(self.object:best_enemy())
		if a then
--			printf("%s - %s ? %s", device():time_global(), a.level_time, 20000)
			if device():time_global() - a.level_time > 20000 then
				self.close_combat = false
			end
		else			
			self.close_combat = false
		end
	end

	return self.close_combat
end

----------------------------------------------------------------------------------------------------------------------
-- ACTIONS
----------------------------------------------------------------------------------------------------------------------
--' Патрулировать территорию по патрульному пути

class "action_patrol" (action_base)
function action_patrol:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
	self.move_mgr = move_mgr.move_mgr(self.a.npc)
end
function action_patrol:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    
	
	self:reset_scheme()
end
function action_patrol:reset_scheme()
	state_mgr.set_state(self.object, "patrol")
	self.a.signals = {}
	self.move_mgr:initialize()
	self.move_mgr:reset(self.a.path_walk, 
		utils.path_parse_waypoints(self.a.path_walk),
		self.a.path_look,
		utils.path_parse_waypoints(self.a.path_look),
		nil,nil,{obj=self,func=self.process_point})
end
function action_patrol:execute()
	action_base.execute (self)
	
	self.move_mgr:update()
	if self.move_mgr:arrived_to_first_waypoint() then
		if xr_logic.try_switch_to_another_section (self.object, self.a, db.actor) then
			return
		end
	end
end
function action_patrol:process_point(mode, number)
	return false
end
function action_patrol:finalize()
	self.move_mgr:finalize()
	action_base.finalize (self)
end

--' Убивать врага на большом расстоянии
class "action_kill" (action_base)
function action_kill:__init (npc_name,action_name,storage) super (nil,action_name)
    self.a = storage
end
function action_kill:initialize ()
    action_base.initialize(self)    
    self.enemy_position = nil
end
function action_kill:execute ()
	action_base.execute(self)
	if self.a.enemy ~= nil then		
		if self.object:memory(self.a.enemy) == nil then
			self.a.enemy = nil
		else
			self.a.mem_enemy = self.object:memory(self.a.enemy)
		end
	end
	
	if self.a.enemy == nil or
	  self.a.enemy:id() ~= id(self.object:best_enemy()) 
	then
		self.a.enemy = self.object:best_enemy()
	end
		
	if self.a.mem_enemy ~= nil then
		printf("%s - %s > %s", utils.to_str(device():time_global()), utils.to_str(self.a.mem_enemy.level_time), utils.to_str(self.a.idle))
		if device():time_global()- self.a.mem_enemy.level_time > self.a.idle then
			self.object:enable_memory_object(self.a.enemy, false)
			self.a.enemy = nil
		end
	end

	if self.a.enemy ~= nil then 
		if self.object:see(self.a.enemy) == true then
			if self.a.suggested_state.campering_fire then
				state_mgr.set_state(self.object, self.a.suggested_state.campering_fire, nil, nil, {look_object = self.a.enemy})
			else
				state_mgr.set_state(self.object, "hide_fire", nil, nil, {look_object = self.a.enemy})
			end
			self.enemy_position = self.a.enemy:position()
		else
			if self.a.suggested_state.campering then
				state_mgr.set_state(self.object, self.a.suggested_state.campering, nil, nil, {look_object = self.enemy, look_position = self.enemy_position})
			else
				state_mgr.set_state(self.object, "hide", nil, nil, {look_object = self.a.enemy, look_position = self.enemy_position})
			end
		end
	end
end
function action_kill:finalize ()
    action_base.finalize(self)
end

--' Отступление на позиции
class "action_retreat" (action_base)
function action_retreat:__init(npc_name,action_name,storage) super(nil,action_name)
    self.a = storage
end
function action_retreat:initialize()
    action_base.initialize(self)
       
    local path_walk = patrol(self.a.path_walk)
    if path_walk then
		local point = utils.get_nearest_waypoint(self.object, self.a.path_walk, path_walk, path_walk:count())

		if self.object:accessible(point) and self.object:best_enemy()
		then
			printf("RETREAT")
			self.object:set_dest_level_vertex_id(path_walk:level_vertex_id(point))
			state_mgr.set_state(self.object, "sneak")
		else
			printf("ERROR: RETREAT NODE NOT ACCESIBLE")
		end						
    end
end
function action_retreat:execute()
	action_base.execute(self)

	if self.a.enemy ~= nil then		
		if self.object:memory(self.a.enemy) == nil then
			self.a.enemy = nil
		else
			self.a.mem_enemy = self.object:memory(self.a.enemy)
		end
	end
	
	if self.a.enemy == nil or
	  self.a.enemy:id() ~= id(self.object:best_enemy()) 
	then
		self.a.enemy = self.object:best_enemy()
	end
		
	if self.a.mem_enemy ~= nil then
		printf("%s - %s > %s", utils.to_str(device():time_global()), utils.to_str(self.a.mem_enemy.level_time), utils.to_str(self.a.idle))
		if device():time_global()- self.a.mem_enemy.level_time > self.a.idle then
			self.object:enable_memory_object(self.a.enemy, false)
			self.a.enemy = nil
		end
	end

	if self.a.enemy then
		if self.object:see(self.a.enemy) == true then
			if self.a.suggested_state.moving_fire then
				state_mgr.set_state(self.object, self.a.suggested_state.moving_fire, nil, nil, {look_object = self.a.enemy})
			else
				state_mgr.set_state(self.object, "sneak_fire", nil, nil, {look_object = self.a.enemy})
			end
		else
			if self.a.suggested_state.moving then
				state_mgr.set_state(self.object, self.a.suggested_state.moving, nil, nil, {look_object = self.a.enemy})
			else
				state_mgr.set_state(self.object, "sneak", nil, nil, {look_object = self.a.enemy})
			end			
		end
	end
end
function action_retreat:finalize()
    action_base.finalize(self)
end
----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)
  		local operators	= {}
	  	local properties  = {}
		
	   	local manager = object:motivation_action_manager()

		operators["patrol"]			= xr_actions_id.stohe_camper_base + 1
		operators["kill"]			= xr_actions_id.stohe_camper_base + 2
		operators["retreat"]		= xr_actions_id.stohe_camper_base + 3
	
		properties["end"]			= xr_evaluators_id.stohe_camper_base + 1
		properties["close_combat"]	= xr_evaluators_id.stohe_camper_base + 2
		properties["place"]			= xr_evaluators_id.stohe_camper_base + 3
		
		manager:add_evaluator (properties["end"], this.evaluator_end("camper_end", db.storage[object:id()].camper))
		manager:add_evaluator (properties["place"], this.evaluator_place("camper_place", db.storage[object:id()].camper))
		manager:add_evaluator (properties["close_combat"], this.evaluator_close_combat("camper_close_combat", db.storage[object:id()].camper))

		local action = this.action_patrol (object:name(),"action_patrol", db.storage[object:id()].camper)
		action:add_precondition	(world_property(stalker_ids.property_alive, true))
		action:add_precondition	(world_property(stalker_ids.property_enemy,	false))
		xr_motivator.addCommonPrecondition(action)
		action:add_effect (world_property(properties["end"],				true))
		manager:add_action (operators["patrol"], action)
		xr_logic.subscribe_action_for_events(object, storage, action)

		action = this.action_kill (object:name(),"action_kill", db.storage[object:id()].camper)
		action:add_precondition	(world_property(stalker_ids.property_alive, true))
		action:add_precondition (world_property(properties["close_combat"],	false))
		action:add_precondition (world_property(properties["place"],		true))
		xr_motivator.addCommonPrecondition(action)
		action:add_effect (world_property(stalker_ids.property_enemy,		false))		
		manager:add_action (operators["kill"], action)

		action = this.action_retreat (object:name(),"action_retreat", db.storage[object:id()].camper)
		action:add_precondition	(world_property(stalker_ids.property_alive, true))
		action:add_precondition (world_property(properties["close_combat"],	false))
		action:add_precondition (world_property(properties["place"],		false))
		xr_motivator.addCommonPrecondition(action)
		action:add_effect (world_property(stalker_ids.property_enemy,		false))		
		manager:add_action (operators["retreat"], action)

		action = manager:action (xr_actions_id.alife)	
		action:add_precondition	(world_property(properties["end"],			true))

		action = manager:action (stalker_ids.action_combat_planner)
		action:add_precondition (world_property(properties["close_combat"],	true))
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)		

	st.path_walk = utils.cfg_get_string(ini, section, "path_walk", npc, true, gulag_name)
	st.path_look = utils.cfg_get_string(ini, section, "path_look", npc, true, gulag_name)
	st.radius = utils.cfg_get_number(ini, section, "radius", npc, false)
	st.suggested_state = {}
	st.suggested_state.moving = utils.cfg_get_string(ini, section, "def_state_moving", npc, false, "")
	st.suggested_state.moving_fire = utils.cfg_get_string(ini, section, "def_state_moving_fire", npc, false, "")
	st.suggested_state.campering = utils.cfg_get_string(ini, section, "def_state_campering", npc, false, "")
	st.suggested_state.campering_fire = utils.cfg_get_string(ini, section, "def_state_campering_fire", npc, false, "")
	st.idle = 2*60*1000

	
	if st.radius == nil then
		st.radius = 20
	end
end