--[[----------------------------------------------------------------------------------------------------------
Чугай Саша (chugai)
------------------------------------------------------------------------------------------------------------]]

--------------------------------------------------------------------------------------------------------------
--------- Класс удар (падающие/осыпающиеся предметы) -------------
--------------------------------------------------------------------------------------------------------------

class "StrikeObjects"

function StrikeObjects:__init( zone, hits, prtcls, agent )
    self.zone      = zone
    self.particles = tablecopyi( prtcls )
    self.agent     = agent

    if hits then
        ---- скопировать таблицу хитов
        
        self.hits = {}
        
        for i = 1, table.getn( hits ) do
            table.insert( self.hits, tablecopy( hits[i] ) )
            
            ---- значения по умолчанию
        
            local rec = self.hits[i]
            
            if not rec.bone then
                rec.bone = "bip01_head"
            end
            
            if not rec.dir then
                rec.dir = vector():set( 0, -1, 0 )
            end
            
            if not rec.impulse then
                rec.impulse = 10
            end
            
            if not rec.power then
                rec.power = 0
            end
        end
    end

    if prtcls then
        ---- скопировать таблицу частиц
        
        self.particles = {}
        
        for i = 1, table.getn( prtcls ) do
            table.insert( self.particles, tablecopyi( prtcls[i] ) )
        end
    end

    self.zone:set_callback( self, "on_enter", true )
end

function StrikeObjects:on_enter( zone, obj )
    ---- если нужный объект вошёл в нужную зону
    
    if self.zone:id() == zone:id() and self.agent:id() == obj:id() then
        ---- раздать пинки нужным объектам
        
        if self.hits then
            local _hit = hit()
            _hit.type = hit.strike

            for i = 1, table.getn( self.hits ) do
                local rec = self.hits[i]
                
                _hit.power     = rec.power
                _hit.direction = rec.dir
                _hit.impulse   = rec.impulse
                _hit.draftsman = rec.obj
                _hit:bone(       rec.bone )
                
                rec.obj:hit( _hit )
            end
        end
        
        ---- запустить системы частиц

        if self.particles then
            for i = 1, table.getn( self.particles ) do
                local ps = particles( self.particles[i][1], false )
                ps:play_at_pos( self.particles[i][2], 0 )
            end
        end
    end
    
    ---- после однократного срабатывания выключить callback

    zone:clear_callback( true )
end

--------------------------------------------------------------------------------------------------------------
--------- Класс взрыв -------------
--------------------------------------------------------------------------------------------------------------

class "ExplodingObjects"

function ExplodingObjects:__init( zone, objects, delays, agent )
    self.zone    = zone
    self.objects = tablecopyi( objects )
    self.agent   = agent
    self.timers  = {}

---- Задержки детонации 

    if delays then
        self.delays = tablecopyi( delays )
    else
        self.delays = {}
    end
        
    local ndel = table.getn( self.delays )

    if ndel == 0 then
        table.insert( self.delays, 0 )
        ndel = 1
    end
    
    local t = self.delays[ndel]

    for i = ndel + 1, table.getn( self.objects ) do
        table.insert( self.delays, t )
    end

    zone:set_callback( self, "on_enter", true )
end

function ExplodingObjects:on_enter( zone, obj )
    ---- если нужный объект вошёл в нужную зону
    
    if self.zone:id() == zone:id() and self.agent:id() == obj:id() then
        self.entered = true
        
        ---- посчитать для каждого объекта время его детонации

        local t = device():time_global()

        for i = 1, table.getn( self.objects ) do
            table.insert( self.timers, t + self.delays[i] )
        end
        
        ---- единожды сработав, снять callback
        
        self.zone:clear_callback( true )
    end
end

function ExplodingObjects:Update()
    if self.entered then
        ---- пройтись по всем объектам и сравнить текущее время со временем взрывания
        
        local t = device():time_global()
        local i = 1
        local n = table.getn( self.objects )

        while i <= n do
            ---- если час пробил, то взорвать объект и исключить из дальнейшей обработки
            
            if self.timers[i] <= t then
                self.objects[i]:explode( 0 )

                table.remove( self.objects, i )
                table.remove( self.timers,  i )
                n = n - 1
            else
                i = i + 1
            end
        end
        
        ---- если не осталось ни одного объекта, то выключиться
        
        if n == 0 then
            self.entered = false
        end
    end
end

--------------------------------------------------------------------------------------------------------------
--------- Класс звук -------------
--------------------------------------------------------------------------------------------------------------

class "SoundEvent"

function SoundEvent:__init( zone, sound_name, agent )
    self.zone       = zone
    self.agent      = agent
    self.sound_name = sound_name
    self.v0         = vector()

    self.zone:set_callback( self, "on_enter", true )
end

function SoundEvent:on_enter( zone, obj )
    ---- если нужный объект вошёл в нужную зону
    if self.agent:id() == obj:id() then
        printf( "11111" )
        sound_object( self.sound_name ):play_at_pos( obj, obj:position() )
        printf( "22222" )
    end
end
