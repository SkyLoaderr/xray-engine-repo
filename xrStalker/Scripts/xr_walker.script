---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_walker" (property_evaluator)

function evaluator_need_walker:__init(storage) super()
  	self.st = storage
end

function evaluator_need_walker:evaluate()
	--printf("walker [%s] best_enemy = ", self.object:name()--[[,
	--	if_then_else(self.object:best_enemy(), self.object:best_enemy():name(), "none")]])
  	return self.st.enabled == true
end

---------------------------------------------------------------------------------------------------------------------
class "evaluator_override_fight" (property_evaluator)

function evaluator_override_fight:__init(storage) super()
  	self.st = storage
end

function evaluator_override_fight:evaluate()
	--local best_enemy = self.object:best_enemy()
	--if best_enemy then
		--printf("walker [%s] best_enemy = %s", self.object:name(), best_enemy:name())
	--end
  	return false
end

----------------------------------------------------------------------------------------------------------------------
class "action_walker_activity" (action_base)

function action_walker_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = move_mgr.move_mgr()
end

function action_walker_activity:initialize()
	--printf("_bp: action_walker_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self.move_mgr:initialize(self.object)

	if self.path_walk_info == nil then
		self.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	end
	if self.path_look_info == nil then
		self.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	end
	self:reset_scheme()
end


function action_walker_activity:reset_scheme()
	self.move_mgr:reset(self.st.path_walk, self.path_walk_info, self.st.path_look, self.path_look_info, self.st.team,
		true, nil)
end	

function action_walker_activity:execute()
	self.move_mgr:update()
end

function action_walker_activity:finalize()
	self.move_mgr:finalize()

	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--walker binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini)
	if char_ini == nil  or char_ini:section_exist ("walker") == true then
  		local operators	= {}
	  	local properties  = {}

	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
		properties["state_end"] = xr_evaluators_id.state_change
	 	properties["need_walker"] = xr_evaluators_id.zmey_walker_base + 1
		properties["override_fight"] = xr_evaluators_id.zmey_walker_base + 2

	 	operators["action_walker"] = xr_actions_id.zmey_walker_base + 1
	 	operators["action_walker_2"] = xr_actions_id.zmey_walker_base + 2

	   	-- // evaluators
		manager:add_evaluator(properties["need_walker"], this.evaluator_need_walker(xr_motivator.storage[npc:id()].walker))
		manager:add_evaluator(properties["override_fight"], this.evaluator_override_fight(xr_motivator.storage[npc:id()].walker))

		local new_action = this.action_walker_activity(npc, "action_walker_activity", xr_motivator.storage[npc:id()].walker)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(properties["need_walker"], true))
		new_action:add_precondition(world_property(properties["event"], false))
		new_action:add_precondition(world_property(properties["state_end"], true))
	   	new_action:add_effect(world_property(properties["need_walker"], false))
		manager:add_action(operators["action_walker"], new_action)

		local new_action = this.action_walker_activity(npc, "action_walker_activity", xr_motivator.storage[npc:id()].walker)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
	  	--new_action:add_precondition(world_property(properties["need_walker"], true))
		new_action:add_precondition(world_property(properties["override_fight"], true))
	   	new_action:add_effect(world_property(stalker_ids.property_enemy, false))
		manager:add_action(operators["action_walker_2"], new_action)

	  	new_action = manager:action(stalker_ids.action_puzzle_solver)
	  	new_action:add_precondition(world_property(properties["need_walker"], false))

		new_action = manager:action(stalker_ids.action_combat_planner)
		new_action:add_precondition(world_property(properties["override_fight"], false))

		if char_ini ~= nil then
			xr_walker.set_walker(npc)
		end
	end
end

-- ¬ключение схемы
-- 
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда дл€ синхронизации
--
function set_walker(object, enabled, path_walk, path_look, team)
	local char_ini = object:spawn_ini()
	local st = xr_motivator.storage[object:id()].walker

	st.enabled = utils.conf_get_bool(char_ini, "walker", "enabled", enabled, object, true)
	st.path_walk = utils.conf_get_string(char_ini, "walker", "path_walk", path_walk, object, true)
	st.path_look = utils.conf_get_string(char_ini, "walker", "path_look", path_look, object, false)
	st.team = utils.conf_get_string(char_ini, "walker", "team", team, object, false)

	if st.action ~= nil then
		st.action.reset_scheme(st.action)
	end
	xr_motivator.checkStorage(object)
end

