-------------------------------------------------------------------------------------
class "evaluator_wait" (property_evaluator)
---------------------
function evaluator_wait:__init (storage) super ()
  	self.a = storage
end
---------------------
function evaluator_wait:evaluate()
  	return self.a.freezed
end


-------------------------------------------------------------------------------------
class "evaluator_enabled" (property_evaluator)
---------------------
function evaluator_enabled:__init (storage) super ()
  	self.a = storage
end
---------------------
function evaluator_enabled:evaluate()
  	return self.a.enabled
end


-------------------------------------------------------------------------------------
class "killer_wait" (action_base)
function killer_wait:__init (name, storage) super (nil, name)
    self.a = storage
end
---------------------
function killer_wait:initialize ()
    action_base.initialize (self)
	self.object:set_node_evaluator ()
	self.object:set_path_evaluator ()
	self.object:set_desired_position ()
	self.object:set_desired_direction ()
	self.object:clear_animations ()
	
    self.object:set_item                  (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
end
---------------------
function killer_wait:execute ()
    action_base.execute (self)
end
---------------------
function killer_wait:finalize ()
    action_base.finalize (self)
end    
---------------------

-------------------------------------------------------------------------------------
class "killer_kill" (action_base)
function killer_kill:__init (name, storage) super (nil, name)
    self.a = storage
end
---------------------
function killer_kill:initialize ()
    action_base.initialize (self)
	self.object:set_node_evaluator ()
	self.object:set_path_evaluator ()
	self.object:set_desired_position ()
	self.object:set_desired_direction ()
	self.object:clear_animations ()
    self.object:set_item (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type (move.line)
    self.object:set_body_state (move.standing)
end
---------------------
function killer_kill:execute ()
    action_base.execute (self)
    local sac = level.object (self.a.sacrifice)
    if sac == nil then return end
    if sac:alive () == false then
       self.a.enabled = false
       self.object:set_item  (object.idle, self.object:best_weapon ())
       return
    end    
    
    self.object:set_relation (game_object.enemy, sac)
    self.object:set_sight (look.fire_point, sac:position (), 0)
    self.object:set_item  (object.fire1, self.object:best_weapon ())
    
end
---------------------
function killer_kill:finalize ()
    local act = level.actor ()
    if act ~= nil then
       self.object:set_relation (game_object.enemy, act)
    end   
    action_base.finalize (self)
end    
---------------------


function add_to_binder (npc, char_ini)
    
    local operators	= {}
    local properties  = {}
		
    local manager = npc:motivation_action_manager()


	properties["enabled"]     = xr_evaluators_id.sidor_secret_lab
	properties["wait"]        = xr_evaluators_id.sidor_secret_lab + 1
	
 	operators["action_wait"] = xr_actions_id.sidor_act_secret_lab
 	operators["action_kill"] = xr_actions_id.sidor_act_secret_lab + 1
 	
    manager:add_evaluator (properties["enabled"], this.evaluator_enabled (xr_motivator.storage[npc:id()].secret_lab_killer))
    manager:add_evaluator (properties["wait"], this.evaluator_wait (xr_motivator.storage[npc:id()].secret_lab_killer))

	local action = this.killer_wait ("killer_wait", xr_motivator.storage[npc:id()].secret_lab_killer)
	action:add_precondition(world_property(stalker_ids.property_alive, true))
	action:add_precondition(world_property(properties["enabled"], true))
	action:add_precondition(world_property(properties["wait"], true))
	action:add_effect(world_property(properties["wait"], false))
	manager:add_action(operators["action_wait"], action)

    action = this.killer_kill ("killer_work", xr_motivator.storage[npc:id()].secret_lab_killer)
	action:add_precondition(world_property(stalker_ids.property_alive, true))
	action:add_precondition(world_property(properties["enabled"], true))
	action:add_precondition(world_property(properties["wait"], false))
	action:add_effect(world_property(properties["enabled"], false))
	manager:add_action(operators["action_kill"], action)
	
	action = manager:action (xr_actions_id.alife)
	action:add_precondition (world_property(properties["enabled"], false))
	
    if char_ini ~= nil and char_ini:section_exist ("lab_killer") == true then
	   this.load_data (npc, npc:spawn_ini ())
	end
end
-------------------------------------------------------------------------------------
function load_data (npc, char_ini)

	local st = xr_motivator.storage[npc:id()].secret_lab_killer
	st.enabled = char_ini:r_bool ("lab_killer", "enabled")
	st.sacrifice = char_ini:r_string ("lab_killer", "sacrifice")
	st.freezed = true
	xr_motivator.checkStorage (npc)
end

