--'--------------------------------------------------------------------------	
--' AGROPROM
--'--------------------------------------------------------------------------	

local t = {}

function load_job(sj, gname, type, squad, groups)
	--' Agroprom NII
	if type == "agr_nii" then
		t = { section = "logic@agr_nii_walker1",
			idle = 0,
			prior = 9, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker2",
			idle = 0,
			prior = 9, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker3",
			idle = 0,
			prior = 9, state = {1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker4",
			idle = 0,
			prior = 9, state = {1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_camper1",
			idle = 0,
			prior = 8, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker5",
			idle = 0,
			prior = 7, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_camper2",
			idle = 0,
			prior = 6, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker6",
			idle = 0,
			prior = 5, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_walker7",
			idle = 0,
			prior = 5, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_patrol1",
			idle = 4 * 1000 * 60 * 60,
			prior = 4, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_follower1",
			idle = 4 * 1000 * 60 * 60,
			prior = 3, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = "",
			dependent = "logic@agr_nii_patrol1"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_follower2",
			idle = 4 * 1000 * 60 * 60,
			prior = 3, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = "",
			dependent = "logic@agr_nii_patrol1"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_nii_sleeper1",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_sleeper2",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_sleeper3",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
	end

	--' Agroprom factory
	if type == "agr_factory" then
		t = { section = "logic@agr_factory_walker1",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_factory_walker2",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_factory_walker3",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_factory_walker4",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_factory_walker5",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@agr_factory_walker6",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			in_rest = "", out_rest = "agr_factory_restrictor"
		}
		table.insert(sj, t)
	end

	--' Agroprom rush
	if type == "agr_rush" then
		local dogs_num = 12

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_nest_inside_nil",
				idle = 0,
				prior = 0, state = {0},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_nest_inner"
			}
			table.insert(sj, t)
		end

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_nest_outside_nil",
				idle = 0,
				prior = 0, state = {1},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_nest_outer"
			}
			table.insert(sj, t)
		end

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_attack_nil",
				idle = 0,
				prior = 0, state = {2},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_attack_trigger"
			}
			table.insert(sj, t)
		end
	end
end

function load_states(gname, type)
	if type == "agr_nii" then
		return function(gulag)
			if level.get_time_hours() >= 7 and level.get_time_hours() <= 22 then
				return 0  -- день
			else
				return 1  -- ночь
			end
		end
	end

	if type == "agr_factory" then
		return function( gulag )
			if gulag:getCasualities() >= 3 then
				local actor = db.actor
				if actor and actor:dont_has_info( "agr_factory_need_help" ) then
					actor:give_info_portion( "agr_factory_need_help" )
				end
			end
			return 0
		end
	end

	if type == "agr_rush" then
		return function( gulag )
			local actor = db.actor

			if gulag.state ~= 2 then
				if actor and actor:has_info( "agr_rush_start" ) then
					return 2
				else
					local z = db.zone_by_name["agr_rush_nest_outer"]
					if utils.npc_in_zone( actor, z ) then
						return 1
					else
						return 0
					end
				end
			else
				if actor and ( gulag:get_population() < 4 or game.get_game_time():diffSec( gulag.stateBegin ) > 600 ) then
					actor:disable_info_portion( "agr_rush_start" )
					return 0
				else
					return 2
				end
			end
		end
	end

	return nil
end

function checkStalker(npc_community, gulag_type)
	if gulag_type == "agr_nii" or gulag_type == "agr_factory" then
		return npc_community == "military"
	end

	return false
end

function checkMonster(npc_community, gulag_type)
	if gulag_type == "agr_rush" then
		return npc_community == "dog"
	end

	return false
end
