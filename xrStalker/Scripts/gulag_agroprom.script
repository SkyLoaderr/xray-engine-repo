--'--------------------------------------------------------------------------
--' AGROPROM
--'--------------------------------------------------------------------------

local t = {}

function load_job( sj, gname, type, squad, groups )
	--' Agroprom NII
	if type == "agr_nii" then
		t = { section = "logic@agr_nii_walker1",
			idle = 0,
			prior = 9, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker2",
			idle = 0,
			prior = 9, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker3",
			idle = 0,
			prior = 9, state = {1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker4",
			idle = 0,
			prior = 9, state = {1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_camper1",
			idle = 0,
			prior = 8, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker5",
			idle = 0,
			prior = 7, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_camper2",
			idle = 0,
			prior = 6, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker6",
			idle = 0,
			prior = 5, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_walker7",
			idle = 0,
			prior = 5, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_patrol1",
			idle = 4 * 1000 * 60 * 60,
			prior = 4, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_follower1",
			idle = 4 * 1000 * 60 * 60,
			prior = 3, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = "",
			dependent = "logic@agr_nii_patrol1"
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_follower2",
			idle = 4 * 1000 * 60 * 60,
			prior = 3, state = {0},
			in_rest = "agroprom_underground_space_restrictor", out_rest = "",
			dependent = "logic@agr_nii_patrol1"
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_sleeper1",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_sleeper2",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_nii_sleeper3",
			idle = 0,
			prior = 0, state = {0,1},
			in_rest = "agroprom_underground_space_restrictor", out_rest = ""
		}
		table.insert(sj, t)
	end

	--' Agroprom factory assaulting soldiers
	if type == "agr_factory_assault" then
		-- идут к обороняющимся
		t = { section = "logic@agr_factory_assault_walker1",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier1"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker2",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier2"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker3",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier3"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker4",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier4"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker5",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier5"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker6",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier6"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker7",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier7"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		t = { section = "logic@agr_factory_assault_walker8",
			idle = 0,
			prior = 0, state = {0},
			squad = squad, group = groups[1],
			predicate = function(obj)
			            	return obj:name() == "agr_factory_assault_soldier8"
			            end,
			in_rest = "", out_rest = ""
		}
		table.insert(sj, t)
		-- сражаются на улице
		for i = 1, 8 do
			t = { section = "logic@agr_factory_assault_skirmish_walker"..i,
				idle = 0,
				prior = 0, state = {1},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_factory_skirmish"
			}
			table.insert(sj, t)
		end
		-- идут добивать в здание
		for i = 1, 8 do
			t = { section = "logic@agr_factory_assault_bld_walker"..i,
				idle = 0,
				prior = 0, state = {2},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_factory_assault_bld"
			}
			table.insert(sj, t)
		end
	end

	--' Agroprom factory Krot's stalkers
	if type == "agr_factory_defence" then
		-- ждут военных
		for i = 1, 6 do
			t = { section = "logic@agr_factory_defence_walker"..i,
				idle = 0,
				prior = 0, state = {0},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_factory_skirmish_defence"
			}
			table.insert(sj, t)
		end
		-- отстреливаются от военных
		for i = 1, 6 do
			t = { section = "logic@agr_factory_defence_skirmish_walker"..i,
				idle = 0,
				prior = 0, state = {1},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_factory_skirmish_defence"
			}
			table.insert(sj, t)
		end
		-- бегут помогать Кроту
		for i = 1, 6 do
			t = { section = "logic@agr_factory_defence_krot_walker"..i,
				idle = 0,
				prior = 0, state = {2},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = ""
			}
			table.insert(sj, t)
		end
	end

	--' Agroprom rush
	if type == "agr_rush" then
		local dogs_num = 12

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_nest_inside_nil",
				idle = 0,
				prior = 0, state = {0},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_nest_inner"
			}
			table.insert(sj, t)
		end

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_nest_outside_nil",
				idle = 0,
				prior = 0, state = {1},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_nest_outer"
			}
			table.insert(sj, t)
		end

		for i = 1, dogs_num do
			t = { section = "logic@agr_rush_attack_nil",
				idle = 0,
				prior = 0, state = {2},
				squad = squad, group = groups[1],
				in_rest = "", out_rest = "agr_rush_attack_trigger"
			}
			table.insert(sj, t)
		end
	end
end

function load_states( gname, type )
	if type == "agr_nii" then
		return function(gulag)
			if level.get_time_hours() >= 7 and level.get_time_hours() <= 22 then
				return 0  -- день
			else
				return 1  -- ночь
			end
		end
	end

	if type == "agr_factory_assault" then
		return function( gulag )
			if gulag.state == 0 then
--				for k, v in gulag.Object do
--					if v:best_enemy() then
--						return 1
--					end
--				end
--				return 0

				if db.actor:has_info( "agr_factory_assault_skirmish" ) then
					return 1
				else
					return 0
				end
			elseif gulag.state == 1 then
				if xr_gulag.getGulagPopulation( "agr_factory_defence" ) > 0 then
					return 1
				else
					db.actor:give_info_portion( "agr_help_stalkers_defence_dead" )
					db.actor:give_info_portion( "agr_help_stalkers_done" )
					return 2
				end
			else
				return 2
			end
		end
	end

	if type == "agr_factory_defence" then
		return function( gulag )
			if gulag.state == 0 then
--				for k, v in gulag.Object do
--					if v:best_enemy() then
--						return 1
--					end
--				end
--				return 0

				if db.actor:has_info( "agr_factory_assault_skirmish" ) then
					return 1
				else
					return 0
				end

			elseif gulag.state == 1 then
				if xr_gulag.getGulagPopulation( "agr_factory_assault" ) > 0 then
					return 1
				else
					db.actor:give_info_portion( "agr_help_stalkers_assault_dead" )
					db.actor:give_info_portion( "agr_help_stalkers_done" )
					return 2
				end
			else
				return 2
			end
		end
	end

	if type == "agr_rush" then
		return function( gulag )
			local actor = db.actor

			if gulag.state ~= 2 then
				if actor and actor:has_info( "agr_rush_start" ) then
					return 2
				else
					local z = db.zone_by_name["agr_rush_nest_outer"]
					if utils.npc_in_zone( actor, z ) then
						return 1
					else
						return 0
					end
				end
			else
				if actor and ( gulag:get_population() < 4 or game.get_game_time():diffSec( gulag.stateBegin ) > 600 ) then
					actor:disable_info_portion( "agr_rush_start" )
					return 0
				else
					return 2
				end
			end
		end
	end

	return nil
end

function checkStalker( npc_community, gulag_type )
	if gulag_type == "agr_nii" or gulag_type == "agr_factory_assault" then
		return npc_community == "military"
	end

	if gulag_type == "agr_factory_defence" then
		return npc_community == "stalker"
	end

	return false
end

function checkMonster( npc_community, gulag_type )
	if gulag_type == "agr_rush" then
		return npc_community == "dog"
	end

	return false
end
