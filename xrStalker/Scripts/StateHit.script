local s_hit			= 2
local time_update	= 5000

class "CStateHit"
function CStateHit:__init(_data, _mem)
	self.data		= _data
	self.memory		= _mem
	self.hit_time	= 0
	self.hit_id		= -1
end

function CStateHit:initialize()
	reset_action(self.data.npc, self.data.scr_name)
	self.hit_time	= self.memory.hit.time
	self.hit_id		= self.memory.hit.who:id()
end

function CStateHit:execute()
	if(self:hit_changed()) then
		reset_action(self.data.npc, self.data.scr_name)
	end
	
	if(self.data.npc:action() == nil) then
		action(self.data.npc, act(act.panic, self.memory.hit.who), cond(cond.time_end, 60000))
	end
end

function CStateHit:hit_changed()
	if(self.memory.hit.time > self.hit_time + time_update) then
		self.hit_time	= self.memory.hit.time
		self.hit_id		= self.memory.hit.who:id()
		
		return true
	end
	
	return false
end

function CStateHit:id()
	return s_hit
end

function CStateHit:finalize()
end

//----------------------------------------------------------------------------------------------------------
// State Hit Look
//----------------------------------------------------------------------------------------------------------

class "CStateHitLook" (CStateHit)
function CStateHitLook:__init(_data, _mem) super(_data, _mem)
	self.angry		= false
	self.position	= nil
end

function CStateHitLook:initialize()
	this.CStateHit.initialize(self)
	self.angry		= false
	self.position	= self.memory.hit.who:position()
end

function CStateHitLook:execute()
	if(self:hit_changed()) then
		reset_action(self.data.npc, self.data.scr_name)
	end
	
	if(self.data.npc:action() == nil) then
		if(self.angry) then
			
			//Если далеко от позиции, то подходим, в противном случаее осматривеамся и кружимся рядом
			if(self.data.npc:position():distance_to(self.position) > 3) then		
				action(self.data.npc, move(move.run_fwd, self.memory.hit.who:position(), 1, move.force),
									  sound(sound.threaten), cond(cond.move_end))
			else
				action(self.data.npc, move(move.walk_fwd, self.data.npc:position():sub(self.data.npc:direction())),
									  sound(sound.threaten), cond(cond.move_end))
			end
			action(self.data.npc, anim(anim.look_around, 0), sound(sound.threaten), cond(cond.time_end, 15000))	
		else
			action(self.data.npc, anim(anim.look_around, 0), sound(sound.threaten), cond(cond.time_end, 15000))
			action(self.data.npc, move(move.walk_fwd, self.data.npc:position():sub(self.data.npc:direction())),
								  sound(sound.threaten), cond(cond.move_end))
		end
	end
end

function CStateHitLook:hit_changed()
	if(self.memory.hit.time > self.hit_time + 2*time_update) then
		if(	self.hit_id	== self.memory.hit.who:id()) then
			self.angry	= true
		end
		self.hit_id		= self.memory.hit.who:id()
		self.hit_time	= self.memory.hit.time
		self.position	= self.memory.hit.who:position()
		return true
	end
	
	return false
end


//-----------------------------------------------------------------------------------------
// Реакция зомби на хит
//-----------------------------------------------------------------------------------------

class "CStateZombieHit" (CStateHit)
function CStateZombieHit:__init(_data, _mem) super(_data, _mem)
end

function CStateZombieHit:set_data(_data, _mem)
	self.data	= _data
	self.memory = _mem
end

function CStateZombieHit:initialize()
	this.CStateHit.initialize(self)
	
	self.turned = false
end

function CStateZombieHit:execute()
	if(self:hit_changed()) then
		reset_action(self.data.npc, self.data.scr_name)
		self.turned	= false
	end
	
	if(self.data.npc:action() == nil) then
		if(self.turned) then
			
			// Уже повернулись, теперь делаем что-то
			if(self:select_point()) then
				
				action(self.data.npc, move(move.run_fwd, level.vertex_position(self.point)),
												sound(sound.attack), cond(cond.move_end))
			
			else
			
				action(self.data.npc, anim(anim.look_around, 0), cond(cond.time_end, 4000))
			
			end

		else
			// Поворачиваемя к гаду
			action(self.data.npc, look(look.point, self.memory.hit.who:position()),
										anim(anim.turn, 0), cond(cond.look_end))
			self.turned	= true
		end
		
	end
end

function CStateZombieHit:select_point()
	self.direction = self.data.npc:direction()
	
	// Выбираем точку, куда будем идти
	for i = 1, 5 do 
		self.point = level.vertex_in_direction( self.data.npc:level_vertex_id(),
												vector_rotate_y(self.direction, math.random(-90, 90)),
												20
												)

		if(self.data.npc:position():distance_to(level.vertex_position(self.point)) > 3) then
			return true
		end
	end

	for i = 1, 5 do 
		self.point = level.vertex_in_direction( self.data.npc:level_vertex_id(),
												vector_rotate_y(self.direction, math.random(-180, 180)),
												20
												)

		if(self.data.npc:position():distance_to(level.vertex_position(self.point)) > 3) then
			return true
		end
	end

	// Не нашли точку, куда сможем пойти
	return false
end
