local sounds = {}

function action2(obj,...)
	local act = entity_action()
	local i = 1
	while true do
		if (arg[i] ~= nil) then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if (obj ~= nil) then
		obj:command(act,false)
	end
	return  entity_action(act)
end

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_guard" (property_evaluator)

function evaluator_need_guard:__init(storage) super ()
  	self.st = storage
end

function evaluator_need_guard:evaluate ()
  	return self.st.enabled == true
end

----------------------------------------------------------------------------------------------------------------------
class "action_guard_activity" (action_base)

function action_guard_activity:__init (npc_name,action_name,storage) super (nil, action_name)
	self.st = storage

	self.state_none = 0
	self.state_standing_before_anim = 1
	self.state_anim_playing = 3
	self.state_moving = 4
end

function action_guard_activity:initialize()
	--printf("_bp: action_guard_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	-- ѕрожектор будет найден и инициализирован позже (в момент его использовани€)
	self.projector = nil
	self.speedh = 0.52
	self.speedv = 0.22

	self.object:set_callback(self, "waypoint_callback", game_object.movement)
	self:reset_scheme()
end

function action_guard_activity:simulate_callback_if_neccessary()
	local pos = self.object:position()
	local ptr = patrol(self.path_active)
	local num_points = ptr:count()
	for i = 0, num_points - 1 do
		--if ptr:flag(i, 0) then
			local distance = pos:distance_to(ptr:point(i))
			if distance <= 1 then
				printf("simulating callback")
				self:waypoint_callback(self.object, self.last_action_type, self.last_index)
				break
			end
		--end
	end
end

function action_guard_activity:reset_scheme()
	utils.trace(script_name(), "xr_guard:reset_scheme called: self.object:name()='%s'", self.object:name())
	self.last_seen_actor = nil

	-- TODO: выбирать активный путь в зависимости от погоды (сделать выбор функцией)
	self.path_main = self.st.path_main
	if self.st.path_hideout then
		self.path_hideout = self.st.path_hideout
	else
		self.path_hideout = self.path_main
	end
	self.path_camp = self.st.path_camp
	self.projector_name = self.st.projector_name
	self.path_active = self:pick_path()
	
	-- ‘лажок, включить если прибыли в путь, состо€щий из одной точки
	self.arrived_to_single_point_path = false

	self.loudspeaker_enabled = false

	-- “очка, в которую смотрели в прошлый раз. ≈е запоминаем дл€ того, чтобы не делать паузу между анимаци€ми,
	-- если собираемс€ смотреть в ту же самую точку, не поворачива€сь никуда...
	self.last_look_index = nil

	self.object:set_item(object.idle, self.object:best_weapon())
	self.object:set_detail_path_type(move.line)
	self.object:set_body_state(move.standing)
	--self.object:set_mental_state(anim.free) -- was
	self.object:set_mental_state(anim.danger)
	self.object:set_movement_type(move.run)
	self.object:set_path_type(game_object.patrol_path)
	utils.trace(script_name(), "xr_guard:reset_scheme: self.path_active='%s'", utils.to_str(self.path_active))
	self.object:set_patrol_path(self.path_active, patrol.start, patrol.continue, true)
	--self.object:set_mental_state(anim.free)
	--self.object:set_sight(look.search, nil, 0)
	self.object:set_sight(look.danger, nil, 0)

	self.state = self.state_moving

	self.last_index = -1

	self:simulate_callback_if_neccessary()
end	

function action_guard_activity:waypoint_callback(obj, action_type, index)
	-- Ѕудет использоватьс€ позже дл€ вызова этой функции с целью иммитации коллбека
	-- (дл€ путей, состо€щих из одной точки):
	self.last_action_type = action_type
	self.last_index = index

	if index == -1 then
		return
	end

	if self.path_active == self.path_camp then
		local actor = level.actor()
		if actor and self.object:relation(actor) ~= game_object.enemy then
			self.object:set_relation(game_object.enemy, actor)
			self.object:play_sound (sounds["mad_snd_attack"], 1, 0, 1, 0, 3)
		end
	end
	
	local ptr = patrol(self.path_active)

	if ptr:flag(index, 30) then
		self.st.running = false
	elseif ptr:flag(index, 31) then
		self.st.running = true
	end

	if ptr:flag(index, 27) then
		self.loudspeaker_enabled = true
	else
		self.loudspeaker_enabled = false
	end	

	if ptr:flag(index, 29) then
		local phrase = math.random(1, 3)
		while phrase == self.prev_phrase do
			phrase = math.random(1, 3)
		end
		if phrase == 1 then
			self.object:play_sound (sounds["mad_snd_talk"], 1, 0, 1, 0, 4)
		elseif phrase == 2 then
			self.object:play_sound (sounds["mad_snd_talk"], 1, 0, 1, 0, 6)
		else
			self.object:play_sound (sounds["mad_snd_talk"], 1, 0, 1, 0, 7)
		end
		self.prev_phrase = phrase
	end
	
	if ptr:flag(index, 1) then
		self.arrived_to_single_point_path = true
		self.object:set_movement_type(move.stand)
	else
		self.object:set_mental_state(if_then_else(self.st.running, anim.danger, anim.free))
		self.object:set_movement_type(if_then_else(self.st.running, move.run, move.walk))
		self.arrived_to_single_point_path = false
	end

	local flagnum = nil
	for f = 2, 20 do -- точка 0 зарезервирована дл€ начала пути, 1 - дл€ задани€ пути, состо€щего из одной точки
	-- 30 и 31 зарезервированы дл€ состо€ний ходьбы и бега
	-- 29 зарезервирована дл€ звука
		if ptr:flag(index, f) then
			flagnum = f
		end
	end

	-- ¬ыбрать случайно одну из точек, помеченных тем же самым флагом, чтобы посмотреть в нее:
	if flagnum then
		local pt_chosen = nil
		local pt_found = 0

		local num_points = ptr:count()
		for i = 0, num_points - 1 do
			if i ~= index and ptr:flag(i, flagnum) then
			  pt_found = pt_found + 1
			  local r = math.random(1, pt_found)
			  if r == 1 then
				  pt_chosen = i
			  end
			end
		end

		if pt_chosen then
			if pt_chosen ~= self.last_look_index then
			  self.object:clear_animations () -- не играть анимацию во врем€ поворота!
			  self.expiration_time = device():time_global() + 1500; -- дать 100 мс на поворот
			  self:look_at_waypoint(pt_chosen) -- поворачиваемс€
		   else
			  self.expiration_time = 0 -- сразу же стартовать анимацию, уже смотрим в нужную сторону
			end
			self.state = self.state_standing_before_anim
			self.object:set_movement_type(move.stand)
		end
	end
end

-- ѕосмотреть в направлении указанной точки текущего маршрута
function action_guard_activity:look_at_waypoint(pt)
	local way = patrol (self.object:patrol ())
	local look_pt = xr_guard.vector_copy_by_val(way:point(pt)):sub (self.object:position ())
	self.object:set_sight(look.direction, look_pt, 0)
	self.last_look_index = pt

	if self.projector_name then
		if not self.projector then
			self.projector = level.object(self.projector_name)
			if not self.projector then
				--printf("xr_guard: WARNING: unable to initialize projector")
			end
		end
		if self.projector then
			reset_action(self.projector, "xr_guard")
			this.action2(self.projector, look(way:point(pt), self.speedh, self.speedv),
					cond(cond.time_end, time_infinite))
		end
	end
end

function action_guard_activity:pick_path()
	utils.trace(script_name(), "action_guard_activity: pick_path(): self.path_main='%s', " ..
		"self.path_hideout='%s', path_camp='%s'",
		utils.to_str(self.path_main), utils.to_str(self.path_hideout), utils.to_str(self.path_camp))
	if self.last_seen_actor and self.path_camp then
		return self.path_camp
	elseif level.rain_factor() < 0.0006 then
		return self.path_hideout
	else
		return self.path_main
	end
end

function action_guard_activity:execute()
	local actor = level.actor()
	if actor then
		if self.st.switch_to_guide_distance and
		   distance_between(self.object, actor) <= self.st.switch_to_guide_distance then
			self.st.enabled = false
			xr_motivator.storage[self.object:id()].guide.enabled = true
		end
		if self.st.switch_to_robber_guard_distance and
		   distance_between(self.object, actor) <= self.st.switch_to_robber_guard_distance then
			self.st.enabled = false
			xr_motivator.storage[self.object:id()].robber_guard.enabled = true
		end
		if self.object:see(actor) then
			self.last_seen_actor = device():time_global()
		end
	end
	
	self.object:set_item(object.idle, self.object:best_weapon())

	if self.state == self.state_standing_before_anim and self.expiration_time and
			device():time_global() >= self.expiration_time then
		--printf("_debug_guard [%s]: adding animations", self.object:name())
		while self.object:animation_count() <= 1 do
			local animate = math.random(1, 10)
			if animate == 1 then
				self.object:add_animation("stoya_ruje_ 0", true)
			elseif animate == 2 then
				self.object:add_animation("vishka_3", false)
			elseif animate == 3 then
				self.object:add_animation("norm_torso_2_idle_1", false)
			elseif animate == 4 then
				self.object:add_animation("norm_torso_2_idle_2", true)
			elseif animate == 5 then
				self.object:add_animation("norm_torso_2_idle_3", false)
			elseif animate == 6 then
				self.object:add_animation("chasovoy_0", true)
			elseif animate == 7 then
				self.object:add_animation("chasovoy_1", true)
			elseif animate == 8 then
				self.object:add_animation("chasovoy_2", true)
			elseif animate == 9 then
				self.object:add_animation("chasovoy_3", true)
			elseif animate == 10 then
				self.object:add_animation("chasovoy_4", true)
			end

			if self.loudspeaker_enabled then
				if not self.st.loudspeaker_name then
					abort("%s", "object '" .. self.object:name() ..
						"': waypoint flag 27 set, but loudspeaker is not specified in customdata")
				end
				local lsp = level.object(self.st.loudspeaker_name)
				if lsp then
					local phrase = math.random(1, 3)
					while phrase == self.prev_lsp_phrase do
						phrase = math.random(1, 3)
					end
					if phrase == 1 then
						snd = sound_object("\script_replics\\megafon\\music\\megafon_music_5")
					elseif phrase == 2 then
						snd = sound_object("\script_replics\\bandit_1\\alarm\\bandit_alarm_1")
					else
						snd = sound_object("\script_replics\\megafon\\music\\megafon_music_6")
					end
					self.prev_lsp_phrase = phrase
					snd:play_at_pos(lsp, lsp:position())
					self.loudspeaker_enabled = false
				end
			end
		end
		self.state = self.state_anim_playing
	end

	local suggested_path = self:pick_path()
	if (self.state == self.state_anim_playing and self.object:animation_count() <= 1) or
	    suggested_path ~= self.path_active then
		-- ќчищать анимации, только если собираемс€ идти дальше по пути...
		-- Ќе очищать, если дальше будем сто€ть, т.к. иначе будут рывки
		if not self.arrived_to_single_point_path then
			self.object:clear_animations ()
		end

		local need_callback = false
		if self.path_active ~= suggested_path then
			if suggested_path == self.path_camp then
				-- ¬ укрытие!!!
				self.object:play_sound (sounds["mad_snd_hide"], 1, 0, 1, 0, 0)
				self.st.running = true
			end
			self.last_look_index = nil -- был выбран новый путь и точка уже не актуальна
			self.path_active = suggested_path
			self.object:set_patrol_path(self.path_active, patrol.start, patrol.continue, true)
			need_callback = true
		end

		self.state = self.state_moving

		if self.arrived_to_single_point_path then
			self:waypoint_callback(self.object, self.last_action_type, self.last_index)
		else
			self.last_look_index = nil
			self.object:set_mental_state(if_then_else(self.st.running, anim.danger, anim.free))
			self.object:set_movement_type(if_then_else(self.st.running, move.run, move.walk))
			--self.object:set_sight(look.search, nil, 0)
			self.object:set_sight(look.danger, nil, 0)
			if need_callback then
				self:simulate_callback_if_neccessary()
			end
		end
	end
end

function action_guard_activity:finalize()
	--printf("_bp: FINALIZE")
	self.last_look_index = nil -- воможно уходим с точки, последнее неправление взгл€да уже не актуально

	self.object:clear_callback(game_object.movement)
	self.object:clear_animations()

	local enemy = self.object:best_enemy()
	if enemy then
		if enemy:alive() and self.object:see(enemy) then
			if not self.st.alarm_activated then
			  self.object:play_sound (sounds["soldier_alarm"], 1, 0, 1, 0, 3) -- was 1
			  self.st.alarm_activated = true
			end
		end
	end

	 if self.projector then
		if self.projector:get_script() then
			self.projector:script(false, "xr_guard")
		end
	end

	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--Guard binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini)
	if char_ini == nil  or char_ini:section_exist ("guard") == true then
  		local operators	= {}
	  	local properties  = {}

	  	sounds["commander_snd"]	 	= xr_sounds_id.zmey_guard_base + 1
	  	sounds["soldiers_idle_snd"]	 = xr_sounds_id.zmey_guard_base + 2
	  	sounds["soldiers_idle2_snd"]	= xr_sounds_id.zmey_guard_base + 3
	  	sounds["soldiers_replics_snd"]  = xr_sounds_id.zmey_guard_base + 4
	  	sounds["soldiers_hear_snd"]	 = xr_sounds_id.zmey_guard_base + 5
	  	sounds["soldier_alarm"]	 	= xr_sounds_id.zmey_guard_base + 6
		sounds["mad_snd_talk"] = xr_sounds_id.zmey_guard_base + 7
		sounds["mad_snd_hide"] = xr_sounds_id.zmey_guard_base + 8
		sounds["mad_snd_attack"] = xr_sounds_id.zmey_guard_base + 9

	  	npc:add_sound ("Scripts\\Patrol\\Commander1_", 20, snd_type.talk, 2, 1, sounds["commander_snd"])
	 	npc:add_sound ("Scripts\\Patrol\\soldier_idle_", 20, snd_type.talk, 2, 1, sounds["soldiers_idle_snd"])
	 	npc:add_sound ("script_replics\\soldier_1\\idle\\soldier_idle_", 20, snd_type.talk, 2, 1, sounds["soldiers_idle2_snd"])
	 	npc:add_sound ("script_replics\\soldier_1\\replics\\soldier_replic_", 20, snd_type.talk, 2, 1, sounds["soldiers_replics_snd"])
	 	npc:add_sound ("script_replics\\soldier_1\\hear_something\\soldier_hear_", 20, snd_type.talk, 2, 1, sounds["soldiers_hear_snd"])
		npc:add_sound ("script_replics\\soldier_1\\alarm\\soldier_alarm_", 20, snd_type.talk, 2, 2, sounds["soldier_alarm"])

		-- FIXME: hack
		if char_ini ~= nil and char_ini:section_exist ("guard") == true and char_ini:line_exist("guard", "path_camp") == true then
			npc:add_sound("script_replics\\bandit_1\\combat\\bandit_combat_", 20, snd_type.talk, 2, 1, sounds["mad_snd_talk"])
			npc:add_sound("script_replics\\soldier_1\\combat\\soldier_combat_", 20, snd_type.talk, 2, 1, sounds["mad_snd_hide"])
			npc:add_sound("script_replics\\bandit_1\\combat\\bandit_combat_", 20, snd_type.talk, 2, 1, sounds["mad_snd_attack"])
		end

	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
		properties["state_end"] = xr_evaluators_id.state_change
	 	properties["need_guard"] = xr_evaluators_id.zmey_guard_base + 1

	 	operators["action_guard"] = xr_actions_id.zmey_guard_base + 1

	   	-- // evaluators
			manager:add_evaluator (properties["need_guard"],   this.evaluator_need_guard  (xr_motivator.storage[npc:id()].guard))

		local new_action = this.action_guard_activity(npc, "action_guard_activity", xr_motivator.storage[npc:id()].guard)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
	  	new_action:add_precondition(world_property(properties["need_guard"], true))
		new_action:add_precondition(world_property(properties["event"], false))
		new_action:add_precondition(world_property(properties["state_end"], true))
	   	new_action:add_effect(world_property(properties["need_guard"], false))
		manager:add_action(operators["action_guard"], new_action)

	  	new_action = manager:action(stalker_ids.action_puzzle_solver)
	  	new_action:add_precondition(world_property(properties["need_guard"], false))

		if char_ini ~= nil then
			xr_guard.set_guard(npc)
		end
	end
end

-- функции
function vector_copy_by_val(vec)
	local newvec = vector()
	newvec.x = vec.x
	newvec.y = vec.y
	newvec.z = vec.z
	return newvec
end


-- ¬ключение охранника
-- 
-- enabled - включен ли охранник
-- path_main - основной путь, по которому ходит охранник
-- path_hideout [опционально] - путь, по которому ходить во врем€ дожд€ (если не задан, то используетс€ path_main)
-- running [опционально] - true, если дефолтное состо€ние охранника - бег
-- search_light [опционально]  - им€ прожектора, который крутит охранник
-- path_camp [опионально] - путь, куда охранник убегает, увидев игрока, после чего делает игрока врагом
-- loudspeaker [опционально] - им€ объекта мегафона
-- anim_set [опционально] - им€ набора анимаций
-- sound_set [опционально] - им€ набора звуков
--
-- ѕути принимают следующие флаги:
-- 0 - зарезервирован
-- 1 - пусть состоит из одной точки (по нему нельз€ ходить), ставитс€ в единственную точку, куда прийдет охранник
--
-- 2-19 - флажки дл€ пометки общих точек
--
--
--
-- 20 - включить набор анимаций 1
-- 21 - включить набор анимаций 2
-- 22 - включить набор анимаций 3
--
-- 23 - включить набор звуков 1
-- 24 - включить набор звуков 2
-- 25 - включить набор звуков 3
--
-- 26 - управл€ет прожектором
-- 27 - говорит в промкоговоритель
--
-- 29 - [fixme] разговор сумашедшего сталкера
--
-- 30 - начина€ с этой точки и дальше охранник идет спокойно
-- 31 - начина€ с этой точки и дальше охранник побежит
function set_guard(object, enable, path_main, path_hideout, running, search_light, path_camp, loudspeaker_name,
	anim_set_1, anim_set_2, anim_set_3, sound_set_1, sound_set_2, sound_set_3, switch_to_guide_distance,
	switch_to_robber_guard_distance)

	utils.trace(script_name(), "set_guard called: object:name()='%s', path_main='%s', path_hideout='%s', " ..
		"running='%s', search_light='%s', path_camp='%s', loudspeaker='%s'",
		utils.to_str(object:name()),
		utils.to_str(path_main),
		utils.to_str(path_hideout),
		utils.to_str(running),
		utils.to_str(search_light),
		utils.to_str(path_camp),
		utils.to_str(loudspeaker_name) )

	local char_ini = object:spawn_ini()
	local st = xr_motivator.storage[object:id()].guard

	st.enabled = utils.conf_get_bool(char_ini, "guard", "enabled", enable, object, true)
	st.path_main = utils.conf_get_string(char_ini, "guard", "path_main", path_main, object, true)
	st.path_hideout = utils.conf_get_string(char_ini, "guard", "path_hideout", path_hideout, object, false)
	st.running = utils.conf_get_bool(char_ini, "guard", "running", running, object, false)
	st.projector_name = utils.conf_get_string(char_ini, "guard", "search_light", search_light, object, false)
	st.path_camp = utils.conf_get_string(char_ini, "guard", "path_camp", path_camp, object, false)
	st.loudspeaker_name = utils.conf_get_string(char_ini, "guard", "loudspeaker", loudspeaker_name, object, false)
	st.anim_set_1 = utils.conf_get_string(char_ini, "guard", "anim_set_1", anim_set_1, object, false)
	st.anim_set_2 = utils.conf_get_string(char_ini, "guard", "anim_set_2", anim_set_2, object, false)
	st.anim_set_3 = utils.conf_get_string(char_ini, "guard", "anim_set_3", anim_set_3, object, false)
	st.sound_set_1 = utils.conf_get_string(char_ini, "guard", "sound_set_1", sound_set_1, object, false)
	st.sound_set_2 = utils.conf_get_string(char_ini, "guard", "sound_set_2", sound_set_2, object, false)
	st.sound_set_3 = utils.conf_get_string(char_ini, "guard", "sound_set_3", sound_set_3, object, false)
	st.switch_to_guide_distance = utils.conf_get_number(char_ini, "guard", "switch_to_guide_distance",
	st.switch_to_robber_guard_distance = utils.conf_get_number(char_ini, "guard", "switch_to_robber_guard_distance",
		switch_to_robber_guard_distance, object, false)

	if st.action ~= nil then
		st.action.reset_scheme(st.action)
	end
	xr_motivator.checkStorage(object)
end

