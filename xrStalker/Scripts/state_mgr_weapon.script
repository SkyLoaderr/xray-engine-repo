
--' ОРУЖИЕ
--' Соответствует ли состояние оружия требуемому
class "eva_state_mgr_weapon" (property_evaluator)
function eva_state_mgr_weapon:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon:evaluate()
--[[
	if self.object:best_weapon() == nil or
	   get_clsid(self.object:best_weapon()) == clsid.obj_bolt 
	then
		printf("WEAPON NOT PRESENT")
		return true
	end
]]

	if (state_lib.states[self.st.target_state].weapon == nil) or
	   (state_lib.states[self.st.target_state].weapon == "strapped" and
		self.object:weapon_strapped()) or
	   ((state_lib.states[self.st.target_state].weapon == "unstrapped" or
	     state_lib.states[self.st.target_state].weapon == "fire") and
		self.object:weapon_unstrapped() and	
		self.object:active_item() ~= nil and		
		self.object:best_weapon() ~= nil and
		self.object:active_item():id() == self.object:best_weapon():id()) or
	   (state_lib.states[self.st.target_state].weapon == "none" and
	    self.object:active_item() == nil)
	then
		--printf("eva_state_mgr_weapon:evaluate() TRUE")
		return true
	end
	--printf("eva_state_mgr_weapon:evaluate() FALSE")
	return false
end
--' Лочим ли мы все это для оружия или нет?
class "eva_state_mgr_weapon_locked" (property_evaluator)
function eva_state_mgr_weapon_locked:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_locked:evaluate()
	return not (self.object:weapon_unstrapped() or self.object:weapon_strapped())
end

--' Необходимо ли повесить оружие на спину
class "eva_state_mgr_weapon_strapped" (property_evaluator)
function eva_state_mgr_weapon_strapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_strapped:evaluate()
	return state_lib.states[self.st.target_state].weapon == "strapped"
end
--' Висит ли уже оружие на спине
class "eva_state_mgr_weapon_strapped_now" (property_evaluator)
function eva_state_mgr_weapon_strapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_strapped_now:evaluate()
	return self.object:weapon_strapped()
end

--' Необходимо ли держать оружие в руках
class "eva_state_mgr_weapon_unstrapped" (property_evaluator)
function eva_state_mgr_weapon_unstrapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_unstrapped:evaluate()
	return state_lib.states[self.st.target_state].weapon == "unstrapped" or
		   state_lib.states[self.st.target_state].weapon == "fire"
end
--' Держит ли уже он оружие в руках
class "eva_state_mgr_weapon_unstrapped_now" (property_evaluator)
function eva_state_mgr_weapon_unstrapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_unstrapped_now:evaluate()
	return 	self.object:weapon_unstrapped() and		
			self.object:active_item() ~= nil and		
			self.object:best_weapon() ~= nil and
			self.object:active_item():id() == self.object:best_weapon():id()
end


--' Необходимо ли спрятать оружие вообще
class "eva_state_mgr_weapon_none" (property_evaluator)
function eva_state_mgr_weapon_none:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_none:evaluate()
	return state_lib.states[self.st.target_state].weapon == "none"
end
--' Спрятано ли оружие вообще.
class "eva_state_mgr_weapon_none_now" (property_evaluator)
function eva_state_mgr_weapon_none_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_none_now:evaluate()
	return 	self.object:active_item() == nil	
end


--' Достать оружие
class "act_state_mgr_weapon_unstrapp" (action_base)
function act_state_mgr_weapon_unstrapp:__init(name) super (nil, name)
end
function act_state_mgr_weapon_unstrapp:initialize()
	action_base.initialize(self)
	self.object:set_item(object.idle, self.object:best_weapon())
end
function act_state_mgr_weapon_unstrapp:execute()
--	printf("*STATE MGR* Weapon Unstrap action")
	action_base.execute(self)
end
function act_state_mgr_weapon_unstrapp:finalize()
	action_base.finalize(self)
end

--' Спрятать оружие
class "act_state_mgr_weapon_strapp" (action_base)
function act_state_mgr_weapon_strapp:__init(name) super (nil, name)
end
function act_state_mgr_weapon_strapp:initialize()
	action_base.initialize(self)
	self.object:set_item(object.strap, self.object:best_weapon())
end
function act_state_mgr_weapon_strapp:execute()
--	printf("*STATE MGR* Weapon Strap action")
	action_base.execute(self)
end
function act_state_mgr_weapon_strapp:finalize()
	action_base.finalize(self)
end

--' убрать оружие
class "act_state_mgr_weapon_none" (action_base)
function act_state_mgr_weapon_none:__init(name) super (nil, name)
end
function act_state_mgr_weapon_none:initialize()
	action_base.initialize(self)
	self.object:set_item(object.idle, nil)
end
function act_state_mgr_weapon_none:execute()
--	printf("*STATE MGR* Weapon Strap action")
	action_base.execute(self)
end
function act_state_mgr_weapon_none:finalize()
	action_base.finalize(self)
end