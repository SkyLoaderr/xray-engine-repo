----------------------------------------------------------------------------------------------------
-- Physic door control
----------------------------------------------------------------------------------------------------
-- Исходный скрипт: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Перевод на xr_logic: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

class "action_door"

function action_door:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function action_door:reset_scheme()
	printf("_bp: action_door:reset_scheme: self.object:name()='%s'", self.object:name())
	self.initialized = false
end

function action_door:initialize()
	local ph_shell = self.object:get_physics_shell()
	if not ph_shell then
		return
	end
	self.joint = ph_shell:get_joint_by_bone_name("door")

	self.low_limits, self.hi_limits = 0, 0
	self.low_limits, self.hi_limits	= self.joint:get_limits(self.low_limits, self.hi_limits, 0)

	self.run = 0
	self.block = false
	self.soundless_block = false

	if self.st.tip_open then
		self.tip_open = string_table():get_by_id(self.st.tip_open)
	else
		self.tip_open = nil
	end
	if self.st.tip_close then
		self.tip_close = string_table():get_by_id(self.st.tip_close)
	else
		self.tip_close = nil
	end

	self:close_door(true)

	self.object:set_nonscript_usable(false)
	self.object:set_use_callback(self, "door_callback")

	if self.st.snd_init then
		self:door_play_snd_from_set(self.st.snd_init)
	end
	
	self.initialized = true
end

function action_door:door_play_snd_from_set(sndset)
	local snd = mob_sound.pick_sound_from_set(self.object, sndset, {})
	if not snd then
		utils.abort("physic object '%s': section '%s': sound set '%s' does not exist",
			self.object:name(), self.st.section, sndset)
	end
	
	local snd_obj = sound_object(snd)
	if not snd_obj then
		utils.abort("object '%s': unable to create a sound object for sound '%s' (soundset '%s')",
			self.object:name(), snd, sndset)
	end
	snd_obj:play_at_pos(self.object, self.object:position(), 0, sound_object.s3d) -- FIXME: don't use position()
end

function action_door:update(delta)
	--printf("_bp: action_door:update()", delta)

	if not xr_logic.is_active(self.object, self.st) then
		return
	end

	if not self.initialized then
		self:initialize()
		if not self.initialized then
			return
		end
	end

	xr_logic.try_switch_to_another_section(self.object, self.st)

	if self.block then
		local angle = self.joint:get_axis_angle(90)
		printf("_bp: action_door:update(): angle %f limits %f, %f", angle, self.low_limits, self.hi_limits)
		if angle >= self.hi_limits then
			printf("_bp: action_door:update(): door blocked")
			-- Закрыли до предела, будем блокировать
			self.joint:set_max_force_and_velocity(10000, 1, 1)
			self.block = false
			-- Отыграть звук когда дверь захлопнулась:
			if not self.soundless_block and self.st.snd_close_stop then
				self:door_play_snd_from_set(self.st.snd_close_stop)
			end
		end
	end
end

function action_door:open_door()
	printf("_bp: action_door:open_door()")
	if self.st.snd_open_start then
		self:door_play_snd_from_set(self.st.snd_open_start)
	end
	
	self.joint:set_max_force_and_velocity(300, -3, 0)
	self.block = false

	if self.tip_open then
		self.object:set_tip_text(self.tip_close)
	end
end

function action_door:close_door(disable_snd)
	if not disable_snd then
		if self.st.snd_close_start then
			self:door_play_snd_from_set(self.st.snd_close_start)
		end
	end

	printf("_bp: action_door:close_door()")
	self.joint:set_max_force_and_velocity(300, 3, 1)
	self.block = true -- Закрываем и блокируем	
	self.soundless_block = disable_snd

	if self.tip_open then
		self.object:set_tip_text(self.tip_open)
	end
end

function action_door:door_callback(door, actor)
	if self.st.locked then
		if self.st.snd_open_start then
			self:door_play_snd_from_set(self.st.snd_open_start)
		end
		return
	end

	local angle = self.joint:get_axis_angle(90)

	if angle - self.low_limits > self.hi_limits - angle then
		self:open_door()
	else
		self:close_door(false)
	end
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)

	local new_action = action_door(npc, storage)

	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.locked    = utils.cfg_get_bool(ini, section, "locked", npc, false)
	if not st.locked then
		st.tip_open  = utils.cfg_get_string(ini, section, "tip_open", npc, false, "", "tip_door_open")
		st.tip_close = utils.cfg_get_string(ini, section, "tip_close", npc, false, "", "tip_door_close")
	else
		st.tip_open  = utils.cfg_get_string(ini, section, "tip_open", npc, false, "", "tip_door_locked")
	end
	st.snd_init        = utils.cfg_get_string(ini, section, "snd_init", npc, false, "")
	st.snd_open_start  = utils.cfg_get_string(ini, section, "snd_open_start", npc, false, "")
	st.snd_close_start = utils.cfg_get_string(ini, section, "snd_close_start", npc, false, "")
	st.snd_close_stop  = utils.cfg_get_string(ini, section, "snd_close_stop", npc, false, "")
end

