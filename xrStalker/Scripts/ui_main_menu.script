-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.7

function main()
	local dlg = ui_main_menu.main_menu()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
end


class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
   self:InitControls()
   self:InitCallBacks()
end

function main_menu:__finalize()

end

function main_menu:InitControls()
	self:Init(0,0,1024,768)			  
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
     
	local st = xml:InitStatic("back_video", self)
	math.randomseed(time_global())
	local vid_file ="ui\\ui_vid_back_0" .. math.random(1,4)
	st:InitTexture(vid_file)
    xml:InitStatic("background", self)		
    xml:InitStatic("fire_movie", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);
	
--	local cmb = CUIComboBox()	
--	cmb:Init(50, 50, 100, 0)
--	self:AttachChild(cmb)
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
--	CUIScriptWnd.Show(self, f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options																											
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	-- load																												
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save																												
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	-- multiplayer																										
	self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,				self.OnButton_multiplayer_clicked,	self)
	-- quit																												
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	-- message box																										
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty novice")
	console:execute("start server(12lvl/single/alife/new) client(localhost)")
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty stalker")
	console:execute("start server(12lvl/single/alife/new) client(localhost)")
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty veteran")
	console:execute("start server(12lvl/single/alife/new) client(localhost)")
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty master")
	console:execute("start server(12lvl/single/alife/new) client(localhost)")
end

function main_menu:OnButton_disconnect_clicked()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg == nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_multiplayer_clicked()
	if self.mp_dlg == nil then
		self.mp_dlg = ui_mp_main.mp_main()
		self.mp_dlg.owner = self
	end
	self.mp_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.mp_dlg, true)		
	self:Show(false)
end

function main_menu:OnButton_quit_clicked()	
	local console = get_console()
	console:execute("main_menu off")
	console:execute("quit")
end

function main_menu:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end


function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			if level.present() then
				console:execute("main_menu off")
			end
		end
		
		if dik == DIK_keys.DIK_S then
			self:OnButton_load_spawn()
			
		elseif dik == DIK_keys.DIK_Q then
			self:OnButton_quit_clicked()

		end
	
	end
   
	return true
end
