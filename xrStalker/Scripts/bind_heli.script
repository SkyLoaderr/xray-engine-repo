--[[------------------------------------------------------------------------------------------------
Helicoter binding
Чугай Саша
--------------------------------------------------------------------------------------------------]]

local heli_ltx = ini_file( "creatures\\helicopter.ltx" )

function bind( obj )
    printf( "BIND HELICOPTER id=%d", obj:id() )

   	local ini = obj:spawn_ini()
   	if ini then
		obj:bind_object( heli_binder( obj, ini ) )
	end
end

---------------------------------------------------------------------------------------------
-- Биндер вертолётов
---------------------------------------------------------------------------------------------
class "heli_binder" ( object_binder )

function heli_binder:__init( obj, ini ) super( obj )
	self.ini         = ini
	self.initialized = false
	self.loaded      = false
end

function heli_binder:reload( section )
	object_binder.reload( self, section )
end

function heli_binder:reinit()
	object_binder.reinit( self )

	printf( "heli_binder:reinit()" )

	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]

	self.heliObject = self.object:get_helicopter()

	self.object:set_callback( callback.helicopter_on_point, self.on_point, self )
	self.object:set_callback( callback.helicopter_on_hit,   self.on_hit,   self )

	self.st.heli_ltx = heli_ltx
end

function heli_binder:update( delta )
	object_binder.update( self, delta )

--	printf( "heli_binder update" )

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj( self.object, self.st, self.loaded, db.actor, modules.stype_heli )
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "update", delta )
	end

--	self:check_health()
end

function heli_binder:check_health()
	local health = self.heliObject:GetfHealth()

	
-------------------------------------------------------------------------------------
	local health = self.heliObject:GetfHealth()

	if self.b_prepared_to_die == false and state ~= CHelicopter.eDead and health < 30.0 then
		self.b_prepared_to_die = true
		self.heliObject:PrepareDie()
		printf( "[heli] prepare to die" )
	end

	if state ~= CHelicopter.eDead and health <= 0.5 and not self.not_die then
		printf( "[heli] DIE" )
		self.heliObject:Die()

		self.last_alt       = self.heliObject:GetRealAltitude()
		self.alt_check_time = device():time_global() + 1000
	end

	if state == CHelicopter.eDead then
		-- вертолёт должен взорваться, если высота меньше 3 м или он замедлил падение (меньше 1 м за 0.5 с)
		altitude = self.heliObject:GetRealAltitude()

		if altitude < 3.0 then
			self.b_exploded = true
			printf("[heli] EXPLODE")
			self.heliObject:Explode()
		end

		if self.alt_check_time < device():time_global() then
			self.alt_check_time = device():time_global() + 500

			if self.last_alt - altitude < 1 then
				self.b_exploded = true
				printf("[heli] EXPLODE (hanged)")
				self.heliObject:Explode()
			end

			self.last_alt = altitude
		end
	end
end

function heli_binder:net_spawn( data )
	if not object_binder.net_spawn( self, data ) then
		return false
	end

	db.add_obj( self.object )

	return true
end

function heli_binder:net_destroy()
	db.del_obj( self.object )

	object_binder.net_destroy( self )
end

function heli_binder:net_save_relevant()
	return true
end

function heli_binder:save( packet )
	object_binder.save( self, packet )

	xr_logic.save_obj( self.object, packet )
end

function heli_binder:load( packet )
	self.loaded = true

	--printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load( self, packet )

	xr_logic.load_obj( self.object, packet )
end

function heli_binder:on_hit( power, impulse, hit_type, enemy_id )
end

function heli_binder:on_point( distance, position, path_idx )
	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx )
	end
end

function get_heli_ltx()
	return heli_ltx
end
