--------------------------------------------------------------------------------
class "stateEat"
function stateEat:__init( script_name, mem )
    self.scr_name   = script_name
    self.memory     = mem
    self.corpse     = nil
end

--------------------------------------------------------------------------------

function stateEat:initialize()
	self.memory.npc:script( true, self.scr_name )
    self.corpse = self.memory.npc:get_corpse()
end

--------------------------------------------------------------------------------

function stateEat:finalize()
    self.memory.npc:script( false, self.scr_name )
end

--------------------------------------------------------------------------------

function stateEat:execute()
--    printf( "stateEat executed" )

	if( self.memory.npc:action() == nil ) then
    	action( self.memory.npc, act( act.eat, self.corpse ), cond( cond.time_end, 100000 ) )
    end

	self:testing()
end

--------------------------------------------------------------------------------
local m_corpse = nil

function stateEat:testing()

    --Если сменился трупп, то меняем в памяти его
    m_corpse = self.memory.npc:get_corpse()

    if( m_corpse ) then

    	if( m_corpse:id() ~= self.corpse:id() ) then
        	self.corpse = m_corpse
            self:update()
        end

    else

    	self.corpse     = m_corpse

    end

end

--------------------------------------------------------------------------------

function stateEat:check_completed()
    return ( self.memory.npc.satiety > 0.9 or self.corpse == nil )
end

--------------------------------------------------------------------------------

function stateEat:can_start()
    return ( ( self.memory.npc.satiety < 0.3 ) and ( self.memory.npc:get_corpse() ~= nil ) )
end

--------------------------------------------------------------------------------

function stateEat:update()
	reset_action( self.memory.npc, self.scr_name )
end

--------------------------------------------------------------------------------

function stateEat:id()
	return 4
end