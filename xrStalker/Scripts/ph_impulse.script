----------------------------------------------------------------------------------------------------
-- Apply directional force to the object
----------------------------------------------------------------------------------------------------
-- Исходный скрипт: Oleg Hryptul (Haron) haronk@ukr.net
----------------------------------------------------------------------------------------------------

class "action_impulse"

----------------------------------------------------------------------------------------------------
-- Constructor
----------------------------------------------------------------------------------------------------
function action_impulse:__init(obj, storage)
	self.object     = obj
	self.st         = storage
	self.joint      = nil
end

function action_impulse:perform_impulse(pt)
	printf("self:perform_impulse: %d", device():time_global())
	if self.st.velocity_x == 0 then
		self.joint:set_max_force_and_velocity(0, 0, 0)
	else
		self.joint:set_max_force_and_velocity(
			math.random(self.st.force_min, self.st.force_max),
			pt.x * self.st.velocity_x, 0)
	end
	
	if self.st.velocity_y == 0 then
		self.joint:set_max_force_and_velocity(0, 0, 1)
	else
		self.joint:set_max_force_and_velocity(
			math.random(self.st.force_min, self.st.force_max),
			pt.y * self.st.velocity_y, 1)
	end
	
	if self.st.velocity_z == 0 then
		self.joint:set_max_force_and_velocity(0, 0, 2)
	else
		self.joint:set_max_force_and_velocity(
			math.random(self.st.force_min, self.st.force_max),
			pt.z * self.st.velocity_z, 2)
	end
end

function action_impulse:reset_scheme()
	printf("_hr: action_impulse:reset_scheme: self.object:name()='%s'", self.object:name())
	
	if not self.joint then
		self.joint	= self.object:get_physics_shell():get_joint_by_bone_name(self.st.bone)
	end

	if self.st.path_dir then
		local p1 = patrol(self.st.path_dir):point(0)
		local p2 = self.object:position()
		local pt = utils.vector_copy_by_val(p1):sub(p2)
		pt:normalize()
	
		self:perform_impulse(pt)
	
		self.start_time = device():time_global()
	end
	
	self.axis = 1	
	self.next_impulse_tm = device():time_global()
end

function action_impulse:update(delta)
	--printf("_hr: action_impulse:update()")

	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
	
	if self.st.duration and device():time_global() > self.start_time + self.st.duration then
		self.joint:set_max_force_and_velocity(0, 0, 0)
		self.joint:set_max_force_and_velocity(0, 0, 1)
		self.joint:set_max_force_and_velocity(0, 0, 2)
		self.st.duration = nil
	else
		if not self.st.path_dir then
			if device():time_global() >= self.next_impulse_tm then
				local pt = {}
				pt.x = self.axis
				pt.y = self.axis
				pt.z = self.axis
				self:perform_impulse(pt)
				self.axis = -self.axis
				self.next_impulse_tm = device():time_global() + self.st.interval	
			end
		end
	end
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)

	local new_action = action_impulse(npc, storage)

	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	
	--st.force     = utils.cfg_get_number(ini, section, "force", npc, false, 5)
	st.force_min   = utils.cfg_get_number(ini, section, "force_min", npc, false)
	st.force_max   = utils.cfg_get_number(ini, section, "force_max", npc, false)
	if not st.force_min and not st.force_max then
		st.force_min = 0.5
		st.force_max = 1.5
	else
		utils.abort("object '%s': please specify both force_min and force_max fields in customdata",
			npc:object())
	end
	st.velocity  = utils.cfg_get_number(ini, section, "velocity", npc, false)
	if st.velocity then
		st.velocity_x = velocity
		st.velocity_y = velocity
		st.velocity_z = velocity
	else
		st.velocity_x  = utils.cfg_get_number(ini, section, "velocity_x", npc, false)
		st.velocity_y  = utils.cfg_get_number(ini, section, "velocity_y", npc, false)
		st.velocity_z  = utils.cfg_get_number(ini, section, "velocity_z", npc, false)
		if not st.velocity_x and not st.velocity_y and not st.velocity_z then
			st.velocity_x = 0.1
			st.velocity_y = 0
			st.velocity_z = 0.1
		else
			utils.abort("object '%s': please specify all three velocity_x, " ..
				"velocity_y and velocity_z fields in customdata", npc:object())
		end
	end
	st.duration  = utils.cfg_get_number(ini, section, "duration", npc, false)
	st.bone      = utils.cfg_get_string(ini, section, "bone", npc, false, "", "provod")
	st.path_dir  = utils.cfg_get_string(ini, section, "path_dir", npc, false, "")
	st.interval  = utils.cfg_get_number(ini, section, "interval", npc, false, 300)
end

