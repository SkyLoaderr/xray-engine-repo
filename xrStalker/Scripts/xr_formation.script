--[[---------------------------------------------------------------------------------------------------------------
схема "Построение"
Чугай Саша

Сделать:
	- позиция center
	- игнорировать реакции
-----------------------------------------------------------------------------------------------------------------]]

local prop_base				= xr_evaluators_id.chugai_formation_base
local prop_formation		= prop_base
local prop_i_am_commander	= prop_base + 1
local prop_position      	= prop_base + 2

local act_base				= xr_actions_id.chugai_formation_base
local act_stand				= act_base
local act_command			= act_base + 1
local act_go_to_position	= act_base + 2

local soldier_step = 1.4 -- расстояние между соседними солдатами в строю

local snd_replic = xr_sounds_id.chugai_sounds + 500

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "Схема построения активна"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_formation" ( property_evaluator )

function evaluator_formation:__init( name, a ) super()
	self.a = a
end

function evaluator_formation:evaluate()
	return self.a.enabled == true
end

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "На позиции"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_position" ( property_evaluator )

function evaluator_position:__init( name, a ) super()
	self.a = a
end

function evaluator_position:evaluate()
--	return self.a.pos == nil or self.object:position():distance_to_sqr( self.a.pos ) < 0.5
	return self.object:level_vertex_id() == self.a.pos_id
end

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "Я - командир!"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_i_am_commander" ( property_evaluator )

function evaluator_i_am_commander:__init( name, a ) super()
	self.a = a
end

function evaluator_i_am_commander:evaluate()
	return self.a.commander == nil
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "идти на позицию"
-------------------------------------------------------------------------------------------------------------------
class "action_go_to_pos" ( action_base )

function action_go_to_pos:__init( name, a ) super( nil, name )
	self.a = a
end

function action_go_to_pos:initialize()
	action_base.initialize( self )

    self.object:set_node_evaluator      ()
    self.object:set_path_evaluator      ()
    self.object:set_desired_direction   ()
	self.object:set_item                ( object.idle, nil )
	self.object:set_sight               ( look.path_dir, nil, 0 )
	self.object:set_path_type           ( game_object.level_path )
	self.object:set_dest_level_vertex_id( self.a.pos_id )
	self.object:set_movement_type       ( self.a.move_type )

	if self.a.pos then
		self.object:set_desired_position( self.a.pos )
	else
		self.object:set_desired_position()
	end

	if self.a.move_type == move.run then
		self.object:set_mental_state( anim.danger )
	else
		self.object:set_mental_state    ( anim.free )
		self.object:set_detail_path_type( move.line )
	end
end

function action_go_to_pos:execute()
	action_base.execute( self )
end

function action_go_to_pos:finalize()
	action_base.finalize( self )
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "солдат стоит в строю"
-------------------------------------------------------------------------------------------------------------------
class "action_stand" ( action_base )

function action_stand:__init( name, a ) super( nil, name )
	self.a = a
end

function action_stand:initialize()
	action_base.initialize( self )

	self.object:set_item            ( object.idle, nil )
	self.object:set_movement_type   ( move.stand )
	self.object:set_mental_state    ( anim.free )

	self.state = 0
end

function action_stand:execute()
	action_base.execute( self )

	self.object:set_sight( look.direction, self.a.dir, 1 )

	local s = xr_motivator.storage[self.a.commander:id()].formation.state

	if s ~= self.state then
		if s > 1 and s < 9 then -- в это время нужно просто стоять смирно
			self.state = s
		else
			if not self.time_end then
				self.time_end = device():time_global() + math.random( 700, 1000 )
			elseif self.time_end < device():time_global() then
				self.state = s
				self.time_end = nil

				if self.state == 1 then
					self.object:add_animation( "chest_0", true )
				elseif self.state == 9 then
					self.object:add_animation( "chest_3", true )
				elseif self.state == 11 then
					--self.a.enabled = false
					this.disable( self.object )
				end
			end
		end
	else
		if self.state >= 1 and self.state < 9 and self.object:animation_count() <= 1 then
			self.object:add_animation( "chest_1", true )
		end
	end
end

function action_stand:finalize()
	action_base.finalize( self )
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "командир проводит построение"
-------------------------------------------------------------------------------------------------------------------
class "action_command" ( action_base )

function action_command:__init( name, a ) super( nil, name )
	self.a = a
end

function action_command:initialize()
    action_base.initialize( self )

	self.object:set_item            ( object.idle, nil )
	self.object:set_movement_type   ( move.stand )
	self.object:set_mental_state    ( anim.free )

	self.time_end      = nil
	self.turn_time_end = nil
end

function action_command:execute()
	action_base.execute( self )

	if self.a.state == 0 then
		if self:turn_to_soldiers() then
			self:new_state( 1 )
		end
	elseif self.a.state == 1 then
		if not self.time_end then
			printf( "смирно!" )
			xr_sounds.play_sound( self.object, 0, "escape_blockpost_commander", 1, 3, 4 )
			self.time_end = device():time_global() + 5000
		else
			if self.time_end < device():time_global() then
				self:new_state( 2 )
			end
		end
	elseif self.a.state == 2 then
		if self:go_to( self.a.right_pos_id ) then
			self:new_state( 3 )
			self.cur_stop = 1
		end
	elseif self.a.state == 3 then
		if self:go_to( self.a.stops[self.cur_stop].pos_id ) then
			if self:turn_to_soldiers() then
				self:new_state( 4 )
			end
		end
	elseif self.a.state == 4 then
		if not self.time_end then
			self.object:set_sight( look.point, self.a.stops[self.cur_stop].sldr:position():add( vector():set( 0, 1.8, 0 ) ) )

			xr_sounds.play_sound( self.object, 0, "escape_blockpost_commander", 1, 3, random_choice( 2, 4, 5, 6 ) )
			printf( "обращаюсь к солдату %s", self.a.stops[self.cur_stop].sldr:name() )

			self.time_end = device():time_global() + 3000
		else
			if self.time_end < device():time_global() then
				self.cur_stop = self.cur_stop + 1
				printf( "stops = %d", table.getn( self.a.stops ) )
				if self.cur_stop <= table.getn( self.a.stops ) then
					self:new_state( 3 )
				else
					self:new_state( 5 )
				end
			end
		end
	elseif self.a.state == 5 then
		if self:turn_to_left_flank() then
			self:new_state( 6 )
		end
	elseif self.a.state == 6 then
		if self:go_to( self.a.left_pos_id ) then
			self:new_state( 7 )
		end
	elseif self.a.state == 7 then
		if self:go_to( self.a.center_pos_id ) then
			self:new_state( 8 )
		end
	elseif self.a.state == 8 then
		if self:turn_to_soldiers() then
			self:new_state( 9 )
		end
	elseif self.a.state == 9 then
		if not self.time_end then
			xr_sounds.play_sound( self.object, 1000, "agroprom_military_commander", 1, 6, 4 )
			self.time_end = device():time_global() + 5000
		else
			if self.time_end < device():time_global() then
				self:new_state( 10 )
			end
		end
	elseif self.a.state == 10 then
		if not self.time_end then
			self.object:play_sound( snd_replic, 1, 0 )
			self.time_end = 1
		else
			if self.object:active_sound_count() == 0 then
				self:new_state( 11 )
			end
		end
	elseif self.a.state == 11 then
		--self.a.enabled = false
		this.disable( self.object )
	end
end

function action_command:finalize()
	action_base.finalize( self )
end

function action_command:new_state( n )
	self.a.state       = n
	self.time_end      = nil
	self.turn_time_end = nil

	printf( "[formation commander] new_state=%d", n )
end

-- true = уже повернулся
function action_command:turn_to_soldiers()
	if not self.turn_time_end then
		self.turn_time_end = device():time_global() + 1000
		self.object:set_sight( look.direction, self.a.dir, 0 )
		return false
	end

	return self.turn_time_end < device():time_global() and not self.object:is_body_turning()
end

-- true = уже повернулся
function action_command:turn_to_left_flank()
	if not self.turn_time_end then
		self.turn_time_end = device():time_global() + 1000
		self.object:set_sight( look.direction, level.vertex_position( self.a.left_pos_id ):sub( self.object:position() ), 0 )
		return false
	end

	return self.turn_time_end < device():time_global() and not self.object:is_body_turning()
end

-- true = уже там
function action_command:go_to( pos_id )
	if self.object:level_vertex_id() == pos_id then
		return true
	else
		self.a.pos_id = pos_id
		return false
	end
end

-------------------------------------------------------------------------------------------------------------------
-- Обычнейший рядовой binder. Типичный представитель binder-ского сословия.
-------------------------------------------------------------------------------------------------------------------
function add_to_binder( npc )
	local a = xr_motivator.storage[npc:id()].formation

	local manager = npc:motivation_action_manager()

	manager:add_evaluator( prop_formation,      this.evaluator_formation( "property_formation", a ) )
	manager:add_evaluator( prop_i_am_commander, this.evaluator_i_am_commander( "property_i_am_commander", a ) )
	manager:add_evaluator( prop_position,       this.evaluator_position( "property_position", a ) )

	local action = this.action_go_to_pos( "action_go_to_position", a )
	action:add_effect( world_property( prop_position, true ) )
	manager:add_action( act_go_to_position, action )

	action = this.action_stand( "action_stand", a )
	action:add_precondition( world_property( prop_position,            	    true  ) )
	action:add_precondition( world_property( stalker_ids.property_enemy,    false ) )
	action:add_precondition( world_property( prop_i_am_commander,           false ) )
	action:add_effect( world_property( prop_formation, false ) )
	manager:add_action( act_stand, action )

	action = this.action_command( "action_command", a )
	action:add_precondition( world_property( prop_position,                 true  ) )
	action:add_precondition( world_property( stalker_ids.property_enemy,    false ) )
	action:add_precondition( world_property( prop_i_am_commander,           true  ) )
	action:add_effect( world_property( prop_formation, false ) )
	manager:add_action( act_command, action )

	action = manager:action( stalker_ids.action_puzzle_solver )
	action:add_precondition( world_property( prop_formation, false ) )
end

-------------------------------------------------------------------------------------------------------------------
function enable( npc )
	xr_motivator.storage[npc:id()].formation.enabled = true
	xr_reactions.add_rule( npc, "ignore" )
end

function disable( npc )
	xr_motivator.storage[npc:id()].formation.enabled = false
	xr_reactions.remove_rule( npc, "ignore" )
end

-------------------------------------------------------------------------------------------------------------------
-- Функция установки командира и солдат под схему построения. Расчёт позиций для солдат.
-------------------------------------------------------------------------------------------------------------------
function go( commander, soldiers, path_name )
	if not level.patrol_path_exists( path_name ) then
		printf( "ERROR: xr_formation: There is no patrol path %s", path_name )
		return
	end

	local path = patrol( path_name )

	-- коммандир

	local a = xr_motivator.storage[commander:id()].formation
	--a.enabled       = true
	this.enable( commander )
	a.commander     = nil
	a.pos           = path:point( 0 )
	a.center_pos    = a.pos
	a.dir           = path:point( 1 ):sub( a.pos )
	a.dir           = vector():set( a.dir.x, 0, a.dir.z ):normalize()
	a.pos_id        = path:level_vertex_id( 0 )
	a.center_pos_id = a.pos_id
	a.move_type     = move.walk
	a.state         = 0

	commander:add_sound( "script_replics\\megafon\\music\\megafon_music_9",  1, snd_type.talk, 2, 1, snd_replic )

	-- расставить солдат

	local n = table.getn( soldiers )

	if n <= 10 then
		-- одна шеренга
		a.rank_length = n
	else
		-- две шеренги
		a.rank_length = math.ceil( n * 0.5 )
	end

	local cmd_dist      = path:point( 0 ):sub( path:point( 1 ) ):magnitude()
	local init_step_pos = vector():set( a.pos ):add( vector():set( a.dir ):mul( cmd_dist ) )
	local step_dir      = vector():set( -a.dir.z * soldier_step, 0, a.dir.x * soldier_step )
	local sldr_dir      = vector():set( a.dir ):invert()
	init_step_pos:sub( vector():set( step_dir ):mul( a.rank_length * 0.5 ) )
	local t                = vector():set( init_step_pos ):sub( a.pos )
	local init_step_pos_id = level.vertex_in_direction( a.pos_id, t, t:magnitude() )

	a.right_pos_id = level.vertex_in_direction( init_step_pos_id, sldr_dir, 1.5 )

	local step_pos    = init_step_pos
	local step_pos_id = init_step_pos_id

	for i, npc in ipairs( soldiers ) do
		if i == a.rank_length then
			a.left_pos_id = level.vertex_in_direction( step_pos_id, sldr_dir, 1.5 )
		end

		if i == a.rank_length + 1 then
			step_pos:set( init_step_pos ):add( vector():set( a.dir ):mul( soldier_step ) )
			step_pos_id = level.vertex_in_direction( init_step_pos_id, a.dir, soldier_step )
		end

		local aa = xr_motivator.storage[npc:id()].formation
		--aa.enabled   = true
		this.enable( npc )
		aa.commander = commander
		aa.pos       = step_pos
		aa.pos_id    = step_pos_id
		aa.dir       = sldr_dir
		aa.move_type = move.run

		step_pos:add( step_dir )
		step_pos_id = level.vertex_in_direction( step_pos_id, step_dir, soldier_step )
	end

	-- солдаты, возле которых будет останавливаться командир

	a.stops = {}

	for i = 1, a.rank_length do
		if math.random( 1, 100 ) < 50 then
			local v_id = xr_motivator.storage[soldiers[i]:id()].formation.pos_id
			table.insert( a.stops, { sldr = soldiers[i], pos_id = level.vertex_in_direction( v_id, sldr_dir, 1.5 ) } )
		end
	end

	a.pos = nil
end

