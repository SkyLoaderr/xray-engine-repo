---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Константа
class "evaluator_check_combat" (property_evaluator)
function evaluator_check_combat:__init(name, storage) super (nil, name)
	self.st = storage
end
function evaluator_check_combat:evaluate ()
	if self.st.enabled and self.object:best_enemy() then
		if db.storage[self.object:id()].active_scheme then
			local actor = level.actor()
			if actor then
				if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
					return true
				end
			end
		end
	end

	return true
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
  	local operators    = {}
  	local properties  = {}
  	
  	local manager = npc:motivation_action_manager()

  	properties["combat"]   	= xr_evaluators_id.combat + 1

  	manager:add_evaluator (properties["combat"],   this.evaluator_check_combat("combat_check",storage))

  	action = manager:action(stalker_ids.action_combat_planner)
  	action:add_precondition(world_property(properties["combat"], true))
end

function set_combat_checker(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)		
	st.enabled = true
end
