--[[------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------]]

----------------------------------------------------------------------------------------------------------------------
-- Ёвалуатор переключени€ между скриптовым и движковым боем
-- true - engine combat, false - script combat
----------------------------------------------------------------------------------------------------------------------
class "evaluator_check_combat" (property_evaluator)

function evaluator_check_combat:__init(name, storage) super (nil, name)
	self.st = storage
end

function evaluator_check_combat:evaluate ()
--	printf( "1" )
	if self.st.enabled and self.object:best_enemy() then
--		printf( "2" )
		if db.storage[self.object:id()].active_scheme then
--			printf( "3" )
			local actor = db.actor
			if actor then
				if not xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
--					printf( "4" )

					local overrides = xr_logic.generic_scheme_overrides( self.object )

					if overrides and overrides.combat_type then
--						printf( "5.1" )

						local script_combat_type = xr_logic.pick_section_from_condlist( actor, self.object, overrides.combat_type.condlist )
						db.storage[self.object:id()].script_combat_type = script_combat_type

--						printf( "script_combat_type=%s", script_combat_type or "<<<nil>>>" )

						return script_combat_type ~= nil
					else
--						db.storage[self.object:id()].script_combat_type = nil
--						printf( "5.2" )
						return false
					end
				end
			end
		end
	end

	return false
end

----------------------------------------------------------------------------------------------------------------------
-- ƒублирующий эвалуатор врагов дл€ планировщика скриптового бо€
----------------------------------------------------------------------------------------------------------------------
class "evaluator_enemy" (property_evaluator)

function evaluator_enemy:__init(name) super (nil, name)
end

function evaluator_enemy:evaluate()
	return self.object:best_enemy() ~= nil
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	local manager = npc:motivation_action_manager()

	manager:add_evaluator( xr_evaluators_id.script_combat, this.evaluator_check_combat("combat_check",storage) )

	local action = manager:action(stalker_ids.action_combat_planner)
	action:add_precondition(world_property(xr_evaluators_id.script_combat, false))

	----------

--[[	local planner = planner_action( nil, "script_combat_planner" )
	planner:setup( npc )

	planner:add_evaluator( stalker_ids.property_enemy,     evaluator_enemy( "is_there_enemy" ) )
	planner:add_evaluator( xr_evaluators_id.script_combat, evaluator_check_combat("combat_check",storage) )

	planner:add_precondition( world_property( xr_evaluators_id.script_combat, true ) )
	planner:add_precondition( world_property( stalker_ids.property_enemy,     true ) )
	planner:add_effect      ( world_property( stalker_ids.property_enemy,     false ) )

    manager:add_action( xr_actions_id.script_combat_planner, planner )

	xr_combat_zombied.add_to_binder( npc, ini, storage, planner )]]

	xr_combat_zombied.add_to_binder( npc, ini, storage, manager )
	xr_combat_monolith.add_to_binder( npc, ini, storage, manager )
end

function set_combat_checker(npc, ini, scheme, section)
	local st   = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic   = xr_logic.cfg_get_switch_conditions(ini, section, npc)		
	st.enabled = true
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
