--[[---------------------------------------------------------------------------------------------------------------
схема "Сталкер в засаде"
Чугай Саша

Сделать:
	- когда враг - монстр
	- под новую систему озвучки
	- переделать капитально, чтоб мочили нейтралов
	- СИТУАЦИЯ КОГДА ОДИН БАНДИТ ВИДИТ ДРУГОГО, А ТОТ НЕ ВИДИТ ИГРОКА
	- оптимизировать action_sit:execute()
	- смотреть на несколько точек
	- если мы пасём одного, а нас атакует другой ! ! ! who_hit_name()
-----------------------------------------------------------------------------------------------------------------]]

local prop_base   = xr_evaluators_id.chugai_ambush_base
local prop_ambush = prop_base
local prop_attack = prop_base + 1 -- нужно ли атаковать
local prop_victim = prop_base + 2 -- видит ли жертву

local act_base    = xr_actions_id.chugai_ambush_base
local act_sit     = act_base
local act_await   = act_base + 1

local ambushes    = {}	-- информация о том, начал ли кто-то в squad-е мочить какого-то несчастного

local snd_idle	  = 1

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "Схема засады активна"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_ambush" ( property_evaluator )

function evaluator_ambush:__init( name, a ) super()
	self.a = a
end

function evaluator_ambush:evaluate()
	return self.a.enabled == true
end

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "можно ли в данный момент атаковать?"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_attack" ( property_evaluator )

function evaluator_attack:__init( name, a ) super()
    self.a = a
end

function evaluator_attack:hit_callback( obj, amount, local_direction, who, bone_index )
	if who:id() ~= obj:id() and amount > 0 then
		self.a.hit_release_time = game.time() + 150000
	end
end

function evaluator_attack:evaluate()
	if not self.a.enabled then
		return true
	end
-----------
	local h  = self.a.squad_hash
	local be = self.object:best_enemy()

	if be then
		-- если враг - монстр, то атаковать сходу
		if ambushes[h] or object_type( self.object ) == "monstr" then
			return true
		end
	else
		ambushes[h] = false
	end

--	if ambushes[h] then
--		if be then -- если у отряда есть враг
--			return true
--		else
--			ambushes[h] = false
--		end
--	end

	local obj_nearest
	local min_dist = 1000000
	local pos = self.object:position()
	local thr = self.object:visibility_threshold()

	for vis_obj in self.object:not_yet_visible_objects() do
		local obj		= vis_obj:object()
		local dist_sqr	= pos:distance_to_sqr( obj:position() )
		local rel		= self.object:relation( obj )
		
		-- выбираем только чётко видимые объекты (нейтралы или враги)
		if vis_obj.value >= thr and
		   dist_sqr < min_dist and
		   object_type( obj ) == "stalker" and
		   ( rel == game_object.neutral or rel == game_object.enemy )
		then
			min_dist	= dist
			obj_nearest	= obj
		end
	end

	self.a.victim = obj_nearest
-----------
	function need_attack_victim()
		if not self.a.victim then
			return false
		end

		--local victims_enemy = self.a.victim:best_enemy()

		local b = self.object:position():distance_to_sqr( self.a.victim:position() ) <= self.a.dist_sqr --or
		          --( victims_enemy and victims_enemy:id() == self.object:id() )
		       
       -- сделать жертву врагом, если нужно её атаковать
		if b then
			self.object:set_relation( game_object.enemy, self.a.victim )
		end

		return b
	end

	printf( "---" )

	if be then
		printf( "best enemy = %s", be:name() )
	else
		printf( "best enemy =" )
	end

	if ambushes[h] then
		printf( "ambushes[h] = true" )
	else
		printf( "ambushes[h] = false" )
	end

	if game.time() < self.a.hit_release_time then
		printf( "ещё не hit_release_time" )
	else
		printf( "уже hit_release_time" )
	end
	
	if self.a.victim then
		printf( "жертва есть" )
	else
		printf( "жертвы нету" )
	end

	if need_attack_victim() or	-- атаковать жертву
	   ambushes[h] or           -- атакует весь отряд
	   game.time() < self.a.hit_release_time -- недавно кто-то нанёс хит
	then
		printf( "attack=true" )
		ambushes[h] = true
		return true
	end

	printf( "attack=false" )
	return false
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "сидеть в засаде"
-------------------------------------------------------------------------------------------------------------------
class "action_sit" ( action_base )

function action_sit:__init( name, a ) super( nil, name )
	self.a = a
end

function action_sit:initialize()
	action_base.initialize( self )

	self.object:set_item            ( object.idle, self.object:best_weapon() )
	self.object:set_movement_type   ( move.stand )
	--self.object:set_sight           ( look.direction, self.a.path:point( 1 ):sub( self.object:position() ), 0 )
	self.object:set_body_state      ( move.crouch )
	self.object:set_mental_state    ( anim.danger )

	self.object:set_hit_callback( self.object:motivation_action_manager():evaluator( prop_attack ), "hit_callback" )

	self.point_time_end = 0
end

function action_sit:execute()
	action_base.execute( self )

	if self.a.victim then
		self.object:clear_animations()

		self.object:set_sight( look.direction, vector():set( self.a.victim:position() ):sub( self.object:position() ), 0 )
	else
		if self.point_time_end < game.time() then
			local p = math.random( 1, self.a.path:count() - 1 )
			self.object:set_sight( look.direction, self.a.path:point( p ):sub( self.object:position() ), 0 )

			self.point_time_end = game.time() + math.random( 30000, 40000 )
		end

		xr_state.anim_update( "hide", self.object )

		xr_sounds.set_sound( self.object, self.a.sounds_idle )
	end
end

function action_sit:finalize()
	action_base.finalize( self )
end

-------------------------------------------------------------------------------------------------------------------

function add_to_binder( npc, char_ini )
	if char_ini and not char_ini:section_exist( "ambush" ) then
		return
	end

	local a = xr_motivator.storage[npc:id()].ambush

	a.squad_hash = npc:team() * 10000 + npc:group() * 100 + npc:squad()

	a.sounds_idle = xr_sounds.create_sound_constructor( "ambush", snds_idle )

	local manager = npc:motivation_action_manager()

	--npc:set_hit_callback( eva_attack, "hit_callback" )
	a.hit_release_time = 0

	manager:add_evaluator( prop_ambush, this.evaluator_ambush( "property_ambush", a ) )
	manager:add_evaluator( prop_attack, this.evaluator_attack( "property_attack", a ) )

	local action = this.action_sit( "action_sit", a )
	action:add_precondition( world_property( xr_evaluators_id.position,		true ) )
	action:add_precondition( world_property( xr_evaluators_id.reaction,		false ) )
	action:add_effect( world_property( prop_ambush, false ) )
	action:add_effect( world_property( prop_attack, true ) )
	manager:add_action( act_sit, action )

	action = manager:action( stalker_ids.action_puzzle_solver )
	action:add_precondition( world_property( prop_ambush, false ) )

	action = manager:action( stalker_ids.action_combat_planner )
	action:add_precondition( world_property( prop_attack, true ) )

	if char_ini then
		this.set_ambush( npc )

		if a.path then
			xr_position.setPosition( npc, a.path:level_vertex_id( 0 ) )
		end
	end
end

function set_ambush( npc, enable, path, dist )
	printf( "SET AMBUSH" )

	local char_ini = npc:spawn_ini()
	local st = xr_motivator.storage[npc:id()].ambush

	if enable == nil then
		if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "enabled" ) == true then
			st.enabled = char_ini:r_bool( "ambush", "enabled" )
		else
			st.enabled = false
		end
	else
		st.enabled = enable     
	end

	if st.enabled == true then
		if path == nil then
			if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "path" ) == true then
				st.path = patrol( char_ini:r_string( "ambush", "path" ) )
			else
				st.enabled = false
			end
		else
			st.path = patrol( path )
		end
	end

	if st.enabled == true then
		if dist == nil then
			if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "dist" ) == true then
				local dist = char_ini:r_float( "ambush", "dist" )
				st.dist_sqr = dist * dist
			else
				st.dist_sqr = 20 * 20
			end
		else
			st.dist_sqr = 20 * 20
		end
	end

	xr_motivator.checkStorage( npc )
end
