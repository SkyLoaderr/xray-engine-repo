--[[---------------------------------------------------------------------------------------------------------------
схема "Сталкер в засаде"
Чугай Саша

Сделать:
-----------------------------------------------------------------------------------------------------------------]]

local prop_base   = xr_evaluators_id.chugai_ambush_base
local prop_ambush = prop_base
local prop_attack = prop_base + 1

local act_base    = xr_actions_id.chugai_ambush_base
local act_sit     = act_base
local act_await   = act_base + 1

local ambushes    = {}

local snd_idle	  = 1

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "Схема засады активна"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_ambush" ( property_evaluator )

function evaluator_ambush:__init( name, a ) super()
    self.a = a
end

function evaluator_ambush:evaluate()
    return self.a.enabled == true
end

-------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "можно ли в данный момент атаковать?"
-------------------------------------------------------------------------------------------------------------------
class "evaluator_attack" ( property_evaluator )

function evaluator_attack:__init( name, npc, a ) super()
    self.npc = npc
    self.a   = a
end

function evaluator_attack:evaluate()
--    printf( "1" )
    local enemy = self.npc:best_enemy()
--    printf( "1.1" )
--    local ppp = self.npc:who_hit_name()
--    if not ppp then
--        printf( "ppp=nil" )
--    end
--    local who_hit = level.object( self.npc:who_hit_name() )
--    printf( "1.2" )
--    local enemys_enemy = who_hit and who_hit:best_enemy()
    local h = this.squad_hash( self.npc )
    
    if ambushes[h] or
       ( enemy and self.npc:position():distance_to_sqr( enemy:position() ) <= self.a.dist_sqr ) --or
--       ( enemys_enemy and enemys_enemy:id() == self.npc:id() )
    then
--        printf( "2" )
        ambushes[h] = true
        return true
    end

--    printf( "3" )
    ambushes[h] = false
    return false
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "сидеть в засаде"
-------------------------------------------------------------------------------------------------------------------
class "action_sit" ( action_base )

function action_sit:__init( name, a ) super( nil, name )
    self.a = a
end

function action_sit:initialize()
    action_base.initialize( self )

    self.object:set_item            ( object.idle, self.object:best_weapon() )
    self.object:set_movement_type   ( move.stand )
    self.object:set_sight           ( look.direction, self.a.path:point( 1 ):sub( self.object:position() ), 0 )
    self.object:set_body_state      ( move.crouch )
    self.object:set_mental_state    ( anim.danger )

    xr_position.setPosition( self.object, self.a.path:level_vertex_id( 0 ) )
end

function action_sit:execute()
    action_base.execute( self )

    xr_sounds.set_sound( self.object, self.a.sounds_idle )
end

function action_sit:finalize()
    action_base.finalize( self )
end

-------------------------------------------------------------------------------------------------------------------
-- Действие "поджидать замеченного врага"
-------------------------------------------------------------------------------------------------------------------
class "action_await" ( action_base )

function action_await:__init( name, a ) super( nil, name )
    self.a = a
end

function action_await:initialize()
    action_base.initialize( self )

    self.object:set_item            ( object.idle, self.object:best_weapon() )
    self.object:set_movement_type   ( move.stand )
    self.object:set_body_state      ( move.crouch )
    self.object:set_mental_state    ( anim.danger )
end

function action_await:execute()
    action_base.execute( self )

    self.object:set_sight( look.direction, self.object:best_enemy():position():sub( self.object:position() ), 0 )
end

function action_await:finalize()
    action_base.finalize( self )
end

-------------------------------------------------------------------------------------------------------------------
function squad_hash( npc )
    return npc:team() * 10000 + npc:group() * 100 + npc:squad()
end

function add_to_binder( npc, char_ini )
    if char_ini and not char_ini:section_exist( "ambush" ) then
        return
    end

    local a = xr_motivator.storage[npc:id()].ambush

    a.sounds_idle = xr_sounds.create_sound_constructor( "ambush", snds_idle )

    local manager = npc:motivation_action_manager()

    manager:add_evaluator( prop_ambush, this.evaluator_ambush( "property_ambush", a ) )
    manager:add_evaluator( prop_attack, this.evaluator_attack( "property_attack", npc, a ) )

    local action = this.action_sit( "action_sit", a )
    action:add_precondition( world_property( stalker_ids.property_enemy,    false ) )
    action:add_precondition( world_property( xr_evaluators_id.position,     true ) )
    action:add_precondition( world_property( xr_evaluators_id.reaction,     false ) )
    action:add_effect( world_property( prop_ambush, false ) )
    manager:add_action( act_sit, action )

    action = manager:action( stalker_ids.action_puzzle_solver )
    action:add_precondition( world_property( prop_ambush, false ) )

    action = this.action_await( "action_await", a )
    action:add_precondition( world_property( stalker_ids.property_enemy,    true ) )
    action:add_precondition( world_property( xr_evaluators_id.position,     true ) )
    action:add_effect( world_property( prop_attack, true ) )
    manager:add_action( act_await, action )

    action = manager:action( stalker_ids.action_combat_planner )
    action:add_precondition( world_property( prop_attack, true ) )

    if char_ini then
        this.set_ambush( npc )
    end
end

function set_ambush( npc, enable, path, dist )
	printf( "SET AMBUSH" )

    local char_ini = npc:spawn_ini()
    local st = xr_motivator.storage[npc:id()].ambush

    if enable == nil then
    	if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "enabled" ) == true then
    		st.enabled = char_ini:r_bool( "ambush", "enabled" )
        else
            st.enabled = false
		end
    else
        st.enabled = enable     
    end

    if st.enabled == true then
        if path == nil then
        	if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "path" ) == true then
            	st.path = patrol( char_ini:r_string( "ambush", "path" ) )
			else
            	st.enabled = false
			end
        else
            st.path = patrol( path )
        end
    end

    if st.enabled == true then
        if dist == nil then
			if char_ini:section_exist( "ambush" ) == true and char_ini:line_exist( "ambush", "dist" ) == true then
            	local dist = char_ini:r_float( "ambush", "dist" )
                st.dist_sqr = dist * dist
			else
            	st.dist_sqr = 20 * 20
			end
        else
            st.dist_sqr = 20 * 20
        end
    end

	xr_motivator.checkStorage( npc )
end
