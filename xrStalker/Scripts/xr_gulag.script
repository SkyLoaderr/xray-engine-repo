-- јвтор:     ƒиденко –услан (Stohe), „угай јлександр (Chugai)

fraction = {}

local i

local gulag_tasks_file_name = "misc\\gulag_tasks.ltx"
local gulag_tasks_ltx       = ini_file( gulag_tasks_file_name )

class "fract"

function fract:__init(smrttrn_id, name, type, squad, groups)
	self.smrttrn_id = smrttrn_id
	self.name   = name
	self.type   = type
	self.squad  = squad
	self.groups = groups or {}

	self.state = 0
	self.stateBegin = nil

	self.casualities = 0  	

	self.Object = {}
	self.Job = {}
	self.restrictors = {}

	self.ObjectJob = {}

	gulag_tasks.loadJob(self.Job, name, type, squad, self.groups)
	table.sort(self.Job, function(a,b) return a.prior > b.prior end)
	self.calculateStates = gulag_tasks.loadStates(name, type)
end

function fract:addObject(npc)
	self.Object[npc:id()] = npc
end

function fract:loadObject( obj_id, jobN )
	-- пометить, что объект ожидаетс€
	self.Object[obj_id] = true

	-- запомнить работу, которую он должен зан€ть
	self.ObjectJob[obj_id] = jobN

	-- подписатьс€ на объект
	level.client_spawn_manager():add( obj_id, self.smrttrn_id, fract.spawn_callback, self )
end

function fract:spawn_callback( id, obj )
	if obj then
		self.Object[id] = obj

		-- восстановить на работе, если она у него была
		if self.ObjectJob[id] then
			local job = self.Job[self.ObjectJob[id]]

			job.object = obj

			self.restrictors[id] = { r_in = job.in_rest, r_out = job.out_rest }
		end
	end
end

function fract:removeObject( npc_id, npc )
	self:clearAllJob( npc_id )
	self:set_restrictions( npc, "", "" )
	self.Object[npc_id]      = nil
	self.restrictors[npc_id] = nil
end

function fract:all_spawned()
	for k,v in self.Object do
		-- если есть ещЄ хоть один не породившийс€
		if v == true then
			return false
		end
	end

	return true
end

function fract:calculate() 
	if not self:all_spawned() then
		return
	end

	--' »зменение потерь в лагере
	for k,v in self.Object do
		if v:alive() ~= true then
			self:changeCasualities(1)
			self.Object[k] = nil
		end
	end

	--' ќбнуление работ с несуществующими персонажами
	for k,v in self.Job do
		if v.object ~= nil and self.Object[v.object:id()] == nil then
			v.object = nil				
		end
	end

	if self.calculateStates ~= nil then 
		self:changeState(self.calculateStates(self))
	end		

	self:updateJob()
	self:print()
end

function fract:changeState(state)
	self.state = state
end

function fract:availState(st, state)
	for k,v in st do
		if v == state then return true end
	end
	return false
end

-- доступна ли работа?
-- работа доступна, когда врем€ idle истекло (или не задано)
-- и зан€та работа, от которой зависит данна€ работа
function fract:availJob(job)
	if job.begin == nil or game.time() - job.begin > job.idle then
		local jd = job.dependent

		if jd then
	   		for i, v in self.Job do
	   			if v.section == jd then
	   				return v.object ~= nil
	   			end
	   		end
		end

		return true
	else
		return false
	end
end

function fract:updateJob()
	-- если актЄра нету, то никакие работы не могут быть назначены
	if not db.actor then
		return
	end

	for k,v in self.Job do
		-- проверка на доступность работы при текущем стейте
		if self:availState(v.state, self.state) ~= true then
			v.object = nil
		else
			-- если работа свободна и доступна
			if v.object == nil and self:availJob(v) then
				-- назначить на работу свободного человека
				local f = false
				for kk,vv in self.Object do
					if ((v.predicate == nil or v.predicate(vv) == true) and self:getJob(vv) == nil) then
						self:setJob(vv, v)
						f = true
						break
						--return
					end
				end
				-- если свободных нету, сн€ть кого-то с наименее выжной работы и поставить на эту работу
				if not f then
					for i = table.getn(self.Job), k, -1 do
						if self.Job[i].object ~= nil and self.Job[i].prior < v.prior then 
							if v.predicate == nil or v.predicate(self.Job[i].object) == true then
								self:setJob(self.Job[i].object, v)
								break
								--return
							end
						end
					end			
				end				
			end
       	end
	end
end

function fract:print()
	printf("***  %s -- State: %d -- Capacity: %d -- Population: %d", self.name, self.state, self:get_capacity(), self:get_population())
	printf("Resources:")
	for k,v in self.Object do
		printf("id: %d name: %s", k, v:name())
	end
	printf("Jobs:")
	for k,v in self.Job do
		printf("section: %s, prior %d", v.section, v.prior)
		if v.object ~= nil then
			printf("    ObjID: %d", v.object:id())
			printf("    Actor: %s", self.Object[v.object:id()]:name())
			printf("    current section: %s", db.storage[v.object:id()].active_section or "<<<nil>>>")
			if v.actor_dialogs ~= nil then
				printf("    Actor dialogs: %s", v.actor_dialogs)
			end
		end
	end
end

function fract:get_capacity()
	i = {}
	for k,v in self.Job do
		for kk,vv in v.state do
			if i[vv] == nil then i[vv] = 0 end
			i[vv] = i[vv] + 1
		end
	end
	t = 0
	for k,v in i do
		if t == 0 then 
			t = v 
		else
			if v < t then t = v end
		end
	end
	return t
end

function fract:get_population()
	i = 0
	for k,v in self.Object do
		i = i + 1
	end
	return i
end

function fract:get_stype( obj )
	if IsStalker( obj ) then
		return modules.stype_stalker
	elseif IsMonster( obj ) then
		return modules.stype_mobile
	else
		utils.abort( "[smart terrain %s] object %s: gulag supports stalkers and monsters only!", self.name, obj:name() )
	end
end

function fract:setJob(npc, job)
	self:clearAllJob(npc:id())

	job.object = npc
	job.begin  = game.time()

	--' —пейс рестрикторы
	self:set_restrictions(job.object, job.out_rest, job.in_rest)

	xr_logic.configure_schemes(npc, gulag_tasks_ltx, gulag_tasks_file_name, self:get_stype(npc), job.section, self.name)
	local sect = xr_logic.determine_section_to_activate(npc, gulag_tasks_ltx, job.section, db.actor)
	xr_logic.activate_by_section(npc, gulag_tasks_ltx, sect, false)

	--' —мена тим, сквад, груп
	job.object:change_team(job.object:team(), job.squad or job.object:squad(), job.group or job.object:group())
end

function fract:set_restrictions(npc, r_out, r_in)
	printf( "RESTR NPC        : %s", npc:name() )
	printf( "RESTR HAVE (IN)  : %s", npc:in_restrictions() )
	printf( "RESTR HAVE (OUT) : %s", npc:out_restrictions() )
	printf( "RESTR NEED (IN)  : %s", r_in )
	printf( "RESTR NEED (OUT) : %s", r_out )

	-- узнать, какие рестрикторы уже были назначены гулагом
	local restr = self.restrictors[npc:id()]

	if not restr then
		self.restrictors[npc:id()] = {}
		restr = self.restrictors[npc:id()]
	end

	local r_in_old  = restr.r_in  or ""
	local r_out_old = restr.r_out or ""

	-- удалить те, что были проставлены гулагом
	local change_r_in, change_r_out = "", ""

	if r_in_old ~= "" and r_in_old ~= r_in then
		change_r_in = r_in_old
		restr.r_in  = nil
	end

	if r_out_old ~= "" and r_out_old ~= r_out then
		change_r_out = r_out_old
		restr.r_out  = nil
	end

	if change_r_in ~= "" or change_r_out ~= "" then
		printf( "RESTR REMOVE(IN) : %s", change_r_in )
		printf( "RESTR REMOVE(OUT): %s", change_r_out )

		npc:remove_restrictions( change_r_out, change_r_in )
	end

	-- поставить новые
	change_r_in, change_r_out = "", ""

	if r_in ~= "" and r_in_old ~= r_in then
		change_r_in = r_in
		restr.r_in  = r_in
	end

	if r_out ~= "" and r_out_old ~= r_out then
		change_r_out = r_out
		restr.r_out  = r_out
	end

	if change_r_in ~= "" or change_r_out ~= "" then
		printf( "RESTR ADD(IN)    : %s", change_r_in )
		printf( "RESTR ADD(OUT)   : %s", change_r_out )

		npc:add_restrictions( change_r_out, change_r_in )
	end

	printf( "RESTR AFTER (IN) : %s", npc:in_restrictions()  )
	printf( "RESTR AFTER (OUT): %s", npc:out_restrictions() )
end

function fract:getJob(npc)
	if npc == nil then return nil end
	for k,v in self.Job do
		if v.object ~= nil and v.object:id() == npc:id() then
			return v
		end
	end
	return nil
end

function fract:clearAllJob(npc_id)
	for k,v in self.Job do
		if v.object ~= nil and v.object:id() == npc_id then	
			v.object = nil
		end
	end

	-- если сталкер в онлайне, то сбросить его схему поведени€
	local t = self.Object[npc_id]
	if t ~= nil and t ~= true then
		-- как будто он только что загрузилс€
		xr_logic.initialize_obj( t, nil, false, db.actor, self:get_stype( t ) )
	end
end

function fract:stalkerExist(npc)
	if self.Object[npc:id()] ~= nil then
		return true
	end
	return false
end

function fract:idStalkerOnJob(job_name)
	for k,v in self.Job do
		if v.section == job_name then
			if v.object ~= nil then
				return v.object:id()
			end
		end
	end
	return nil
end

function fract:getCasualities()
	return self.casualities
end

function fract:changeCasualities(delta)
	self.casualities = self.casualities + delta
end

function fract:set_relation (relation, object)
	for k,v in self.Object do
		v:set_relation (relation, object)
	end
end

function fract:set_goodwill (goodwill, object)
	for k,v in self.Object do
		v:set_community_goodwill (goodwill, object)
	end
end

function fract:get_member ()
	for k,v in self.Object do
	    if v:alive () == true then
	       return v
	    end
	end        
    return nil	
end

----------------------------------------------------------------------------------------------------------------------
-- Function
----------------------------------------------------------------------------------------------------------------------
function createGulag(smrttrn_id, name, type, squad, groups)
	if xr_gulag.fraction[name] == nil then
		xr_gulag.fraction[name] = xr_gulag.fract(smrttrn_id, name, type, squad, groups)
	end
	return xr_gulag.fraction[name]
end

function destroyGulag(name)
	xr_gulag.fraction[name] = nil
end

function isUnderFraction(npc)
	for k,v in fraction do
		if v:stalkerExist(npc) == true then
			return k
		end		
	end
	return nil
end

function getGulagPopulation(name)
	if xr_gulag.fraction[name] ~= nil then
		return xr_gulag.fraction[name]:get_population()
	end
	return 0
end

function setGulagRelation(gulag_name, relation, object)
    if xr_gulag.fraction[gulag_name] == nil then return end
    xr_gulag.fraction[gulag_name]:set_relation (relation, object)
end

function setGulagGoodwill(gulag_name, goodwill, object)
    if xr_gulag.fraction[gulag_name] == nil then return end
    xr_gulag.fraction[gulag_name]:set_goodwill (goodwill, object)
end

function resetJob(name, npc)
	local gulag = fraction[name]

	if gulag ~= nil then
		gulag:clearAllJob(npc:id())

--		if gulag:all_spawned() then
--			gulag:updateJob()
--		end
	end
end

function changeCasualities(fraction, delta)
	if xr_gulag.fraction[fraction] ~= nil then
		xr_gulag.fraction[fraction]:changeCasualities(delta)
	end
end

function checkStalker(npc_community, gulag_type)
    --printf ("CHECKSTALKER, COMMUNITY = %s, TYPE = %s", npc_community, gulag_type)
	if gulag_type == "test" or gulag_type == "test1" then
		return true
	end

	if gulag_type == "blockpost"
	then
		return npc_community == "military"
	end
	
	if gulag_type == "val_lager_bandits" then
	   return npc_community == "bandit"
	end    

	if gulag_type == "bar_evil_veterans" then
	   return npc_community == "bandit"
	end    

	if gulag_type == "val_monolith_base" then
	   return npc_community == "monolith"
	end    

	if gulag_type == "esc_lager" then
		return npc_community == "stranger"
	end

	if gulag_type == "esc_fabrika_bandit" then
		return npc_community == "bandit"
	end

	if gulag_type == "mil_fneutral" then
	   return npc_community == "stalker"
	end       
	
	if gulag_type == "mil_freedom" or gulag_type == "mil_fblockpost" then 
	   return npc_community == "freedom"
	end
	
	if gulag_type == "campers" or
	   gulag_type == "walkers" or
	   gulag_type == "rest" or
	   gulag_type == "search"
	then
		return npc_community ~= "military"
	end

	if gulag_garbage.checkStalker(npc_community, gulag_type) then
		return true
	end

	if gulag_bar.checkStalker(npc_community, gulag_type) then
		return true
	end

	if gulag_radar.checkStalker(npc_community, gulag_type) then
		return true
	end

	if gulag_agroprom.checkStalker(npc_community, gulag_type) then
		return true
	end

	return false
end

function checkMonster(npc_community, gulag_type)
	if gulag_type == "test_mob" then
		return true
	end

	if gulag_garbage.checkMonster(npc_community, gulag_type) then
		return true
    end

	if gulag_bar.checkMonster(npc_community, gulag_type) then
		return true
	end

	if gulag_military.checkMonster(npc_community, gulag_type) then
		return true
    end

   	if gulag_agroprom.checkMonster(npc_community, gulag_type) then
		return true
    end

	return false
end

function checkNpc(npc_community, is_stalker, gulag_type)
	printf("COMM %s !! %s", npc_community, gulag_type)

	if is_stalker then
		return checkStalker(npc_community, gulag_type)
	else
		return checkMonster(npc_community, gulag_type)
	end
end
