-- Автор:     Диденко Руслан (Stohe)
-- Доделка:   Чугай Александр (Chugai)

fraction = {}

local i

local gulag_tasks_ltx = ini_file("misc\\gulag_tasks.ltx")

class "fract"
function fract:__init(smrttrn_id, name, type, squad, groups)
	self.smrttrn_id = smrttrn_id
	self.name   = name
	self.type   = type
	self.squad  = squad
	self.groups = groups or {}

	self.state = 0
	self.stateBegin = nil

	self.casualities = 0  	

	self.Object = {}
	self.Job = {}
--	self.States = {}
	--' Функция для просчета состояний
--	self.calculateStates = nil

	self.music = gulag_tasks.get_megafone(type, name) --' матюгальник
	
	gulag_tasks.loadJob(self.Job, name, type, squad, self.groups)
	table.sort(self.Job, function(a,b) return a.prior > b.prior end)
	self.calculateStates = gulag_tasks.loadStates(name, type)
end
function fract:addObject(npc)
	self.Object[npc:id()] = npc
end
function fract:addObjectID( obj_id )
	-- пометить, что объект ожидается
	self.Object[obj_id] = true
	-- подписаться на объект
	level.client_spawn_manager():add( obj_id, self.smrttrn_id, self, "spawn_callback" )
end
function fract:spawn_callback( id, obj )
	if obj then
		self.Object[id] = obj
		self:calculate()
	end
end
function fract:removeObject( npc_id )
	self:clearAllJob( npc_id )
	self.Object[npc_id] = nil
end
function fract:all_spawned()
	for k,v in self.Object do
		-- если есть ещё хоть один не породившийся
		if v == true then
			return false
		end
	end

	return true
end
function fract:calculate() 
--	printf( "calculate called" )
	if not self:all_spawned() then
		return
	end
--	printf( "all spawned" )

	--' Изменение потерь в лагере
	for k,v in self.Object do
		if v:alive() ~= true then
			self:changeCasualities(1)
			self.Object[k] = nil
		end
	end

	--' Обнуление работ с несуществующими персонажами
	for k,v in self.Job do
		if v.object ~= nil and self.Object[v.object:id()] == nil then
			v.object = nil				
		end
	end

	if self.calculateStates ~= nil then 
		self:changeState(self.calculateStates(self))
	end		

	--' Апдейт матюгальника
	if self.music ~= nil then
		self.music:update()
	end

	self:updateJob()
	self:print()
end
function fract:changeState(state)
	if self.music ~= nil then
		self.music:event(state)
	end
	self.state = state
end
function fract:updateJob()
	function availState(st, state)
		for k,v in st do
			if v == state then return true end
		end
		return false
	end

	for k,v in self.Job do
		-- проверка на доступность работы при текущем стейте
		if availState(v.state, self.state) ~= true then
			v.object = nil
		else
			if v.object == nil and
        	   (v.begin == nil or
			   game.time() - v.begin > v.idle)	
			then
				-- назначить на работу свободного человека
				local f = false
				for kk,vv in self.Object do
					if ((v.predicate == nil or v.predicate(vv) == true) and self:getJob(vv) == nil) then
						self:setJob(vv, v)
						f = true
						break
						--return
					end
				end
				-- если свободных нету, снять кого-то с наименее выжной работы и поставить на эту работу
				if not f then
					for i = table.getn(self.Job), k, -1 do
						if self.Job[i].object ~= nil and self.Job[i].prior < v.prior then 
							if v.predicate == nil or v.predicate(self.Job[i].object) == true then
								self:setJob(self.Job[i].object, v)
								break
								--return
							end
						end
					end			
				end				
			end
       	end
	end
end
function fract:print()
	printf("***  %s -- State: %d -- Capacity: %d -- Population: %d", self.name, self.state, self:get_capacity(), self:get_population())
	printf("Resources:")
	for k,v in self.Object do
		printf("id: %d name: %s", k, v:name())
	end
	printf("Jobs:")
	for k,v in self.Job do
		printf("section: %s, prior %d", v.section, v.prior)
		if v.object ~= nil then
			printf("    ObjID: %d", v.object:id())
			printf("    Actor: %s", self.Object[v.object:id()]:name())
		end
	end
end
function fract:get_capacity()
	i = {}
	for k,v in self.Job do
		for kk,vv in v.state do
			if i[vv] == nil then i[vv] = 0 end
			i[vv] = i[vv] + 1
		end
	end
	t = 0
	for k,v in i do
		if t == 0 then 
			t = v 
		else
			if v < t then t = v end
		end
	end
	return t
end
function fract:get_population()
	i = 0
	for k,v in self.Object do
		i = i + 1
	end
	return i
end
function fract:setJob(npc, job)
	self:clearAllJob(npc:id())

	job.object = npc
	job.begin  = game.time()

	xr_logic.gulag_activate(npc, gulag_tasks_ltx, job.section, self.name)

	--' Смена тим, сквад, груп
	job.object:change_team(job.object:team(), job.squad or job.object:squad(), job.group or job.object:group())
	--' Спейс рестрикторы
	--job.object:remove_all_restrictions()
	--job.object:add_restrictions(job.out_rest, job.in_rest)
end
function fract:getJob(npc)
	if npc == nil then return nil end
	for k,v in self.Job do
		if v.object ~= nil and v.object:id() == npc:id() then
			return v
		end
	end
	return nil
end

function fract:clearAllJob(npc_id)
	for k,v in self.Job do
		if v.object ~= nil and v.object:id() == npc_id then	
			v.object = nil
		end
	end

	-- если сталкер в онлайне, то сбросить его схему поведения
	local t = self.Object[npc_id]
	if t ~= nil and t ~= true then
		xr_logic.gulag_activate(t, gulag_tasks_ltx, "nil")
	end
end
function fract:stalkerExist(npc)
	if self.Object[npc:id()] ~= nil then
		return true
	end
	return false
end
function fract:nameStalkerOnJob(job_name)
	for k,v in self.Job do
		if v.name == job_name then
			if v.object ~= nil then
				return self.Object[v.object:id()]:name()
			end
		end
	end
	return nil
end

function fract:getCasualities()
	return self.casualities
end
function fract:changeCasualities(delta)
	self.casualities = self.casualities + delta
end
----------------------------------------------------------------------------------------------------------------------
-- Function
----------------------------------------------------------------------------------------------------------------------
function createGulag(smrttrn_id, name, type, squad, groups)
	if xr_gulag.fraction[name] == nil then
		xr_gulag.fraction[name] = xr_gulag.fract(smrttrn_id, name, type, squad, groups)
	end
	return xr_gulag.fraction[name]
end
function destroyGulag(name)
	xr_gulag.fraction[name] = nil
end

function isUnderFraction(npc)
	for k,v in fraction do
		if v:stalkerExist(npc) == true then
			return k
		end		
	end
	return nil
end
function resetJob(name, npc)
	if xr_gulag.fraction[name] ~= nil then
		xr_gulag.fraction[name]:clearAllJob(npc:id())

		if xr_gulag.fraction[name]:all_spawned() then
			xr_gulag.fraction[name]:updateJob()
		end
	end
end

function needRaid(fraction)
	if xr_gulag.fraction[fraction] ~= nil then
		local cc = xr_gulag.fraction[fraction]:getCasualities()
		printf("seekraid %d of 3", cc)
		if cc >= 3 then return true end
	end
	return false			
end
function startRaid(fraction)
	if xr_gulag.fraction[fraction] ~= nil then
		local cc = xr_gulag.fraction[fraction]:getCasualities()
		xr_gulag.fraction[fraction]:changeCasualities(-cc)
	end
end

function changeCasualities(fraction, delta)
	if xr_gulag.fraction[fraction] ~= nil then
		xr_gulag.fraction[fraction]:changeCasualities(delta)
	end
end

function checkNpc(npc_community, gulag_type)
	printf("COMM %s !! %s", npc_community, gulag_type)

	if gulag_type == "blockpost"
	then
		return npc_community == "military"
	end
	
	if gulag_type == "gar_bandits" then
		return npc_community == "bandit"
	end

	if gulag_type == "gar_stalkers" then
		return npc_community == "stalker"
	end
	
	if gulag_type == "gar_dolg" then
	   return npc_community == "stalker"
	end    

	if gulag_type == "test" or gulag_type == "test1"
	then
		return true
	end

	return false
end
