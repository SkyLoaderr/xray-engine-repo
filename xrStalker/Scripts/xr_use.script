----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обычное поведение

class "action_process_use"

function action_process_use:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function action_process_use:use_callback(victim, who)
	--printf("[%s] used by [%s]", victim:name(), who:name())
	if db.storage[self.object:id()].active_scheme then
		if db.actor then
			if xr_logic.try_switch_to_another_section(victim, self.st, db.actor) then
				return
			end
		end
	end
end


function notify_on_use(victim, who)
	--printf("NOTIFY [%s] used by [%s]", victim:name(), who:name())

	if victim:alive() and victim:is_talk_enabled() == false then
		if victim:active_sound_count() == 0 then
			xr_sound.set_sound_play(victim, "threat_back")		
		end
	end
end
----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage) 	
	local action = this.action_process_use(npc, storage)
	storage.action = action
end

function set_use_checker(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	xr_logic.subscribe_action_for_ev7ents(npc, st, st.action)
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		xr_logic.unsubscribe_action_from_events(npc, st, st.action)
	end
end



----------------------------------------------------------------------------------------------------------------------
-- STALKER NPC INFO
----------------------------------------------------------------------------------------------------------------------
function set_npc_info(npc, ini, scheme, section)
	printf("INFO SECTION [%s]", utils.to_str(section))

	local in_info	= get_infos_from_data(npc, utils.cfg_get_string(ini, section, "in", npc, false, ""))
	local out_info	= get_infos_from_data(npc, utils.cfg_get_string(ini, section, "out", npc, false, ""))

	for k,v in in_info do
		npc:give_info_portion(v)
	end
	for k,v in out_info do
		npc:disable_info_portion(v)
	end
end
function get_infos_from_data(npc, s)
--	printf("get_infos_from_data [%s]", utils.to_str(s))
	local t = {}
    if s then
		for name in string.gfind( s, "(%|*[^%|]+%|*)%p*" ) do
--			printf("[%s]", utils.to_str(name))
			local condlist = xr_logic.parse_condlist(npc, "in", name, name)
			if condlist then
				table.insert(t, xr_logic.pick_section_from_condlist(db.actor, npc, condlist))
			end
		end
	end
    return t
end