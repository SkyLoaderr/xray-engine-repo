----------------------------------------------------------------------------------------------------------------------
--	Схема изменений положения тела
--	автор: Диденко Руслан (Stohe)
--	TODO: 
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Условие завершения скрипта
class "evaluator_state_end" (property_evaluator)
function evaluator_kamp_end:__init(storage) super()
	self.a = storage
end
function evaluator_kamp_end:evaluate()
	return self.a.body_state == self.a.target_state
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Идет в заданную область
class "action_change_state" (action_base)
function action_change_state:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_change_state:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()  
end
function action_change_state:execute ()
	if self.object:animations_count() == 0 then
		self.a.body_state = self.a.target_state
	end

	action_base.execute (self)
end
function action_change_state:finalize ()
	action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------------------------------------
--функция смены положения тела
function change_state(object, new)
	-- ОПИСАНИЕ ИДЕНТИФИКАТОРОВ ПОЗИЦИЙ:
	-- 0 - стоит                             
	-- 1 - сидит в положении для курения
	-- 2 - сидит в положении для водки
	-- 3 - сидит в положении для еды
	object:clear_anomations()
	local st = xr_motivator.storage[object:id()].state
	   	                                
	if st.body_state == 0 then
		if new == 0 then
			--
		elseif new == 1 then
			object:add_animation("stalker_1_down", true)
		elseif new == 2 then
			object:add_animation("stalker_2_down", true)
		elseif new == 3 then
			object:add_animation("stalker_3_down", true)
		end
	elseif st.body_state == 1 then
		if new == 0 then
			object:add_animation("stalker_1_up", true)
		elseif new == 1 then
			--
		elseif new == 2 then
			--!!!!
		elseif new == 3 then
			--!!!!
		end
	elseif st.body_state == 2 then
		if new == 0 then
			object:add_animation("stalker_2_up", true)
		elseif new == 1 then
			--!!!!
		elseif new == 2 then
			--
		elseif new == 3 then
			object:add_animation("stalker_2v3", true)
		end
	elseif st.body_state == 3 then
		if new == 0 then
			object:add_animation("stalker_3_up", true)
		elseif new == 1 then
			--!!!!
		elseif new == 2 then
			object:add_animation("stalker_3v2", true)
		elseif new == 3 then
			--
		end
	end

	st.target_state = new
end

----------------------------------------------------------------------------------------------------------------------
--State binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object)
	local operators		= {}
	local properties	= {}

	local manager = object:motivation_action_manager()

	properties["state_end"]		= xr_evaluators_id.state_change

	operators["state"]		= xr_actions_id.stohe_state_base + 1

	-- Evaluators                                                                            
	manager:add_evaluator (properties["state_end"], 		this.evaluator_state_end		(xr_motivator.storage[object:id()].state))

	-- Actions
	local action = this.action_change_state (object:name(),"action_change_state", xr_motivator.storage[object:id()].state)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["state_end"],	false))
	action:add_effect 		(world_property(properties["state_end"],	true))
	manager:add_action (operators["state"], action)
end