----------------------------------------------------------------------------------------------------------------------
--	—хема изменений положени€ тела
--	автор: ƒиденко –услан (Stohe)
--	TODO: 
----------------------------------------------------------------------------------------------------------------------

stand = 0
sit   = 2
sit_wait = 3
sleep = 4

class "body_state"
function body_state:__init(npc)
	self.npc = npc
	self.target_state = xr_state.stand
	self.current_state = xr_state.stand

	self.tanim = {
		[xr_state.stand]	= {	[xr_state.sit]		= {"stalker_2_down"},
								[xr_state.sit_wait]	= {"stalker_3_down"},
								[xr_state.sleep]	= {"stalker_2_down", "spit_0"} },
		[xr_state.sit]		= { [xr_state.stand]	= {"stalker_2_up"},
								[xr_state.sit_wait]	= {"stalker_2v3"},
								[xr_state.sleep]	= {"spit_0"} },
		[xr_state.sit_wait]	= {	[xr_state.stand]	= {"stalker_3_up"},
								[xr_state.sit]		= {"stalker_3v2"} },
		[xr_state.sleep]	= {	[xr_state.stand]	= {"spit_3", "stalker_2_up"},
								[xr_state.sit]		= {"spit_3"}}}								
	self.ianim = {
		[xr_state.sit] = "stalker_2_1",
		[xr_state.sit_wait] = "stalker_3_2",
		[xr_state.sleep] = "spit_2"
	}
end
--' ѕровер€ет закончили ли мы изменение положени€ тела
function body_state:finish_state()
	if self.target_state == xr_state.stand and 
	   self.npc:animation_count() == 0
	then
		self.current_state = self.target_state
	end

	if self.target_state ~= xr_state.stand and 
	   self.npc:animation_count() <= 1
	then
		self.current_state = self.target_state
	end
	
	return self.target_state == self.current_state
end
function body_state:set_state(id)
	if id ~= self.current_state and
	   id ~= self.target_state
	then
		self.npc:clear_animations()
		self.target_state = id
		self:transanim(self.npc, id)
		return true
	end
	return false
end
function body_state:transanim(object, target_state)
	if self.tanim[self.current_state][target_state] ~= nil then
		for k,v in self.tanim[self.current_state][target_state] do
			object:add_animation(v, true)
		end
	end
	if self.ianim[target_state] ~= nil then
		object:add_animation(self.ianim[target_state], true)
	end
end

----------------------------------------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------------------------------------
-- ѕроверка, изменилось ли уже положение тела или нет
function finish_state(npc)
	return xr_motivator.storage[npc:id()].state:finish_state()
end
function change_state(npc, id)
	return xr_motivator.storage[npc:id()].state:set_state(id)
end




















--'--------------------------------------------------------------------------------------------------------------------
--' General animation scheme
--'--------------------------------------------------------------------------------------------------------------------
class "anims"
function anims:__init(npc)
	self.npc = npc

	self.anim = {	idle = 0,
		     	begin = nil,
		     	maxidle = 4,
		     	sumidle = 4,
   		     	rnd = 30,
			lastanim = nil,
			lastanimslot = nil, 	-- проверка изменилс€ ли анимслот
		     	base_state = nil,  	-- базова€ анимаци€ ( nil - никаких базовых анимаций нет)
			current_state = nil	-- оверрайдинг базового состо€ни€. ≈сли он nil - то играем базовую
			}
	self.idle = {}
	self.idle[0] = { 	{name = "idle_0_idle_0", flag = true },
				{name = "idle_0_idle_2", flag = true },
				{name = "idle_0_idle_3", flag = true },
				{name = "idle_0_idle_4", flag = true }}
	self.idle[1] = { 	{name = "idle_1_idle_0", flag = true },
				{name = "idle_1_idle_2", flag = true },
				{name = "idle_1_idle_3", flag = true },
				{name = "idle_1_idle_4", flag = true }}
	self.idle[2] = { 	{name = "idle_2_idle_0", flag = true },
				{name = "idle_2_idle_2", flag = true },
				{name = "idle_2_idle_3", flag = true },
				{name = "idle_2_idle_4", flag = true },
				{name = "idle_2_idle_5", flag = true },
				{name = "idle_2_idle_6", flag = true },
				{name = "idle_2_idle_7", flag = true },
				{name = "idle_2_idle_8", flag = true },
				{name = "idle_2_idle_9", flag = true }}
	self.idle[3] = { 	{name = "idle_3_idle_0", flag = true },
				{name = "idle_3_idle_2", flag = true },
				{name = "idle_3_idle_3", flag = true },
				{name = "idle_3_idle_4", flag = true }}
	self.idle[4] = { 	{name = "idle_4_idle_0", flag = true },
				{name = "idle_4_idle_2", flag = true },
				{name = "idle_4_idle_3", flag = true },
				{name = "idle_4_idle_4", flag = true }}
	self.hello = {}
	self.hello[0] =  	{name = "hello_0_idle_0", flag = true }
	self.hello[1] =  	{name = "hello_1_idle_0", flag = true }
	self.hello[2] =  	{name = "hello_2_idle_0", flag = true }
	self.hello[3] =  	{name = "hello_3_idle_0", flag = true }
	self.hello[4] =  	{name = "hello_4_idle_0", flag = true }
	self.prisluh = {}
	self.prisluh[0] = { 	{name = "prisluh_0_idle_2", flag = true },
				{name = "prisluh_0_idle_3", flag = true },
				{name = "prisluh_0_idle_4", flag = true }}
	self.prisluh[1] = { 	{name = "prisluh_1_idle_2", flag = true },
				{name = "prisluh_1_idle_3", flag = true },
				{name = "prisluh_1_idle_4", flag = true }}
	self.prisluh[2] = { 	{name = "prisluh_2_idle_2", flag = true },
				{name = "prisluh_2_idle_3", flag = true },
				{name = "prisluh_2_idle_4", flag = true },
				{name = "prisluh_2_idle_5", flag = true }}
	self.prisluh[3] = { 	{name = "prisluh_3_idle_2", flag = true },
				{name = "prisluh_3_idle_3", flag = true },
				{name = "prisluh_3_idle_4", flag = true }}
	self.prisluh[4] = { 	{name = "prisluh_4_idle_2", flag = true },
				{name = "prisluh_4_idle_3", flag = true },
				{name = "prisluh_4_idle_4", flag = true }}
	self.poisk = {}
	self.poisk[0] = { 	{name = "poisk_0_idle_0", flag = true },
				{name = "poisk_0_idle_2", flag = true },
				{name = "poisk_0_idle_3", flag = true },
				{name = "poisk_0_idle_4", flag = true }}
	self.poisk[1] = { 	{name = "poisk_1_idle_0", flag = true },
				{name = "poisk_1_idle_2", flag = true },
				{name = "poisk_1_idle_3", flag = true },
				{name = "poisk_1_idle_4", flag = true }}
	self.poisk[2] = { 	{name = "poisk_2_idle_0", flag = true },
				{name = "poisk_2_idle_2", flag = true },
				{name = "poisk_2_idle_3", flag = true },
				{name = "poisk_2_idle_4", flag = true }}
	self.poisk[3] = { 	{name = "poisk_3_idle_0", flag = true },
				{name = "poisk_3_idle_2", flag = true },
				{name = "poisk_3_idle_3", flag = true },
				{name = "poisk_3_idle_4", flag = true }}
	self.poisk[4] = { 	{name = "poisk_4_idle_0", flag = true },
				{name = "poisk_4_idle_2", flag = true },
				{name = "poisk_4_idle_3", flag = true },
				{name = "poisk_4_idle_4", flag = true }}
	self.hide = {}
	self.hide[0] = { 	{name = "d_0_idle_0", flag = true },
				{name = "d_0_idle_2", flag = true }}
	self.hide[1] = { 	{name = "d_1_idle_0", flag = true },
				{name = "d_1_idle_2", flag = true }}
	self.hide[2] = { 	{name = "d_2_idle_0", flag = true },
				{name = "d_2_idle_2", flag = true }}
	self.hide[3] = { 	{name = "d_3_idle_0", flag = true },
				{name = "d_3_idle_2", flag = true }}
	self.hide[4] = { 	{name = "d_4_idle_0", flag = true },
				{name = "d_4_idle_2", flag = true }}
			
end
-- основна€ функци€	
function anims:update(type)
	if type == nil then
		if type ~= self.anim.base_state then
			-- финалим предидущий
			if self.anim.base_state == "idle" then
				self:remove_idle()
			end
			if self.anim.base_state == "prisluh" then
				self:remove_prisluh()
			end
			if self.anim.base_state == "poisk" then
				self:remove_poisk()
			end
			if self.anim.base_state == "hide" then
				self:remove_hide()
			end
		end
	end

	--ќпредел€ем, относитс€ ли запрашиваемых тип ко временным
	if type == "hello"
	then
		-- мен€ем настройки временной анимации
		if self.anim.current_state ~= nil then
			-- финалайзим предидущий каррент стэйт
			self.npc:clear_animations()
		end
		self.anim.current_state = type
	end

	-- определ€ем, относитс€ ли запрашиваемый тип к базовым
	if type == "idle" or
	   type == "prisluh" or
	   type == "poisk" or
	   type == "hide"
	then
		-- если тип соответствует текущей анимации - играть его, если нет - зафиналить предидущий и засетить новый.
		if type ~= self.anim.base_state then
			-- финалим предидущий
			if self.anim.base_state == "idle" then
				self:remove_idle()
			end
			if self.anim.base_state == "prisluh" then
				self:remove_prisluh()
			end
			if self.anim.base_state == "poisk" then
				self:remove_poisk()
			end
			if self.anim.base_state == "hide" then
				self:remove_hide()
			end

			-- устанавливаем новый
			self.anim.base_state = type
			if self.anim.base_state == "idle" then
				self:set_idle()
			end
			if self.anim.base_state == "prisluh" then
				self:set_prisluh()
			end
			if self.anim.base_state == "poisk" then
				self:set_poisk()
			end
			if self.anim.base_state == "hide" then
				self:set_hide()
			end
		end
	end

	-- ќпредел€ем, закончилс€ ли каррент стейт
	if self.anim.current_state ~= nil and
	   self.npc:animation_count() <= 1 
	then
		self.anim.current_state = nil 
	end

	-- если curent_state не нулевой - играем его.
	-- если он нулевой - играем base_state
	if self.anim.current_state ~= nil then
		if self.anim.current_state == "hello" then			
			self:update_hello()
		end
	else
		self:update_base()
	end


end
-- проигрываетс€ ли щас цикленный айдл или нет
function anims:safe_to_break()
	if self.anim.current_state ~= nil then
		return false
	end
	if self.npc:animation_count() <= 1 then
		return true
	end
end
-- апдейт базового класса
function anims:update_base()
	if self.anim.base_state == "idle" then
		self:update_idle()
	end
	if self.anim.base_state == "prisluh" then
		self:update_prisluh()
	end
	if self.anim.base_state == "poisk" then
		self:update_poisk()
	end
	if self.anim.base_state == "hide" then
		self:update_hide()
	end
end
-- возвращает id оружейного слота
function anims:weapon_slot()
	local weapon = self.npc:active_item()
	if weapon == nil then
		return 0
	end

	local id = get_clsid(weapon)
	if id == nil then 
		return 0
	end

	if id == clsid.wpn_pm or
    	   id == clsid.wpn_walther or
	   id == clsid.wpn_hpsa or
	   id == clsid.wpn_fort or
	   id == clsid.wpn_usp45 then
		return 1
	end

	if id == clsid.wpn_vintorez or
	   id == clsid.wpn_val or
	   id == clsid.wpn_groza or
	   id == clsid.wpn_fn2000 or   
	   id == clsid.wpn_ak74 or	
	   id == clsid.wpn_lr300 or
	   id == clsid.wpn_svd or
   	   id == clsid.wpn_svu then
		return 2
	end

	if id == clsid.wpn_shotgun then
		return 3
	end

    if id == clsid.wpn_rpg7 then
		return 4
	end
	return 0
end
----------------------------------------------------------------------------------------------------------------------
-- —то€чий идл
----------------------------------------------------------------------------------------------------------------------
-- проигрывает идловые анимации
function anims:set_idle()
	-- выбирает нужную анимацию дл€ данного положени€ тела
	-- если дл€ данного положени€ тела нет пачки анимаций - ругаетс€
	local animslot = self:weapon_slot()
	self.anim.lastanimslot = animslot

	-- ƒобавление зацикленного айдла дл€ данного анимслота
	self:cycled_idle(animslot)
end
function anims:cycled_idle(animslot)
	-- ƒобавление зацикленного айдла дл€ данного анимслота
	if animslot == 0 then
		self.npc:add_animation("idle_0_idle_1", true)
	elseif animslot == 1 then
		self.npc:add_animation("idle_1_idle_1", true)
	elseif animslot == 2 then
		self.npc:add_animation("idle_2_idle_1", true)
	elseif animslot == 3 then
		self.npc:add_animation("idle_3_idle_1", true)
	elseif animslot == 4 then
		self.npc:add_animation("idle_4_idle_1", true)
	end
end
function anims:update_idle()
	-- изменилс€ ли анимслот
	local animslot = self:weapon_slot()

	if animslot ~= self.anim.lastanimslot then
		self.anim.begin = nil
		self.anim.lastanimslot = animslot
		self.npc:clear_animations()
		self:cycled_idle(animslot)
	end

	-- ќпредел€ем нужно ли добавл€ть анимацию или ждать
	if (self.anim.begin == nil or
	   device():time_global() - self.anim.begin > self.anim.idle) and
	   self.npc:animation_count() <= 1
	then
		-- ќпределение промежутков времени между анимаци€ми
		self.anim.begin = device():time_global()
		self.anim.idle = (math.random(self.anim.maxidle) + self.anim.sumidle) * 1000
		if math.random(100) < self.anim.rnd then
			local r
			if self.anim.lastanim == nil then
				r = math.random(table.getn(self.idle[animslot]))
			else
				r = math.random(table.getn(self.idle[animslot])-1)
				if r >= self.anim.lastanim then
					r = r + 1
				end
			end
			self.anim.lastanim = r
			self.npc:clear_animations()
			self.npc:add_animation (self.idle[animslot][r].name, self.idle[animslot][r].flag)
			-- ƒобавление зацикленного айдла дл€ данного анимслота
			self:cycled_idle(animslot)
		end
	end	
end                            
function anims:remove_idle()
	self.anim.base_state = nil
	self.anim.lastanim = nil
	self.anim.lastanimslot = nil 
	self.npc:clear_animations()
end
----------------------------------------------------------------------------------------------------------------------
-- ѕриветствие
----------------------------------------------------------------------------------------------------------------------
function anims:update_hello()
	self.anim.begin = nil
	local animslot = self:weapon_slot()

	self.anim.lastanim = nil
	self.npc:clear_animations()
	self.npc:add_animation (self.hello[animslot].name, self.hello[animslot].flag)

	-- ¬ызвать апдейт базового класса
	self:update_base()
end                            
----------------------------------------------------------------------------------------------------------------------
-- ѕрислухи
----------------------------------------------------------------------------------------------------------------------
-- проигрывает идловые анимации
function anims:set_prisluh()
	-- выбирает нужную анимацию дл€ данного положени€ тела
	-- если дл€ данного положени€ тела нет пачки анимаций - ругаетс€
	local animslot = self:weapon_slot()
	self.anim.lastanimslot = animslot

	if animslot == 0 then
		self.npc:add_animation("prisluh_0_idle_0", true)
	elseif animslot == 1 then
		self.npc:add_animation("prisluh_1_idle_0", true)
	elseif animslot == 2 then
		self.npc:add_animation("prisluh_2_idle_0", true)
	elseif animslot == 3 then
		self.npc:add_animation("prisluh_3_idle_0", true)
	elseif animslot == 4 then
		self.npc:add_animation("prisluh_4_idle_0", true)
	end
	-- ƒобавление зацикленного айдла дл€ данного анимслота
	self:cycled_prisluh(animslot)
end
function anims:cycled_prisluh(animslot)
	-- ƒобавление зацикленного айдла дл€ данного анимслота
	if animslot == 0 then
		self.npc:add_animation("prisluh_0_idle_1", true)
	elseif animslot == 1 then
		self.npc:add_animation("prisluh_1_idle_1", true)
	elseif animslot == 2 then
		self.npc:add_animation("prisluh_2_idle_1", true)
	elseif animslot == 3 then
		self.npc:add_animation("prisluh_3_idle_1", true)
	elseif animslot == 4 then
		self.npc:add_animation("prisluh_4_idle_1", true)
	end
end
function anims:update_prisluh()
	-- изменилс€ ли анимслот
	local animslot = self:weapon_slot()

	if animslot ~= self.anim.lastanimslot then
		self.anim.begin = nil
		self.anim.lastanimslot = animslot
		self.npc:clear_animations()
		self:cycled_prisluh(animslot)
	end

	-- ќпредел€ем нужно ли добавл€ть анимацию или ждать
	if (self.anim.begin == nil or
	   device():time_global() - self.anim.begin > self.anim.idle) and
	   self.npc:animation_count() <= 1
	then
		-- ќпределение промежутков времени между анимаци€ми
		self.anim.begin = device():time_global()
		self.anim.idle = (math.random(self.anim.maxidle) + self.anim.sumidle) * 1000
		if math.random(100) < self.anim.rnd then
			local r
			if self.anim.lastanim == nil then
				r = math.random(table.getn(self.prisluh[animslot]))
			else
				r = math.random(table.getn(self.prisluh[animslot])-1)
				if r >= self.anim.lastanim then
					r = r + 1
				end
			end
			self.anim.lastanim = r
			self.npc:clear_animations()
			self.npc:add_animation (self.prisluh[animslot][r].name, self.prisluh[animslot][r].flag)
			-- ƒобавление зацикленного айдла дл€ данного анимслота
			self:cycled_prisluh(animslot)
		end
	end	
end                            
function anims:remove_prisluh()
	local animslot = self:weapon_slot()
	self.anim.base_state = nil
	self.anim.lastanim = nil
	self.anim.lastanimslot = nil
	self.npc:clear_animations()
	if animslot == 0 then
		self.npc:add_animation("prisluh_0_idle_5", true)
	elseif animslot == 1 then
		self.npc:add_animation("prisluh_1_idle_5", true)
	elseif animslot == 2 then
		self.npc:add_animation("prisluh_2_idle_6", true)
	elseif animslot == 3 then
		self.npc:add_animation("prisluh_3_idle_5", true)
	elseif animslot == 4 then
		self.npc:add_animation("prisluh_4_idle_5", true)
	end
end
----------------------------------------------------------------------------------------------------------------------
-- ѕоиск
----------------------------------------------------------------------------------------------------------------------
-- проигрывает идловые анимации
function anims:set_poisk()
	-- выбирает нужную анимацию дл€ данного положени€ тела
	-- если дл€ данного положени€ тела нет пачки анимаций - ругаетс€
	local animslot = self:weapon_slot()
	self.anim.lastanimslot = animslot

	-- ƒобавление зацикленного айдла дл€ данного анимслота
	self:poisk_idle(animslot)
end
function anims:poisk_idle(animslot)
	-- ƒобавление зацикленного айдла дл€ данного анимслота
	if animslot == 0 then
		self.npc:add_animation("poisk_0_idle_1", true)
	elseif animslot == 1 then
		self.npc:add_animation("poisk_1_idle_1", true)
	elseif animslot == 2 then
		self.npc:add_animation("poisk_2_idle_1", true)
	elseif animslot == 3 then
		self.npc:add_animation("poisk_3_idle_1", true)
	elseif animslot == 4 then
		self.npc:add_animation("poisk_4_idle_1", true)
	end
end
function anims:update_poisk()
	-- изменилс€ ли анимслот
	local animslot = self:weapon_slot()

	if animslot ~= self.anim.lastanimslot then
		self.anim.begin = nil
		self.anim.lastanimslot = animslot
		self.npc:clear_animations()
		self:poisk_idle(animslot)
	end

	-- ќпредел€ем нужно ли добавл€ть анимацию или ждать
	if (self.anim.begin == nil or
	   device():time_global() - self.anim.begin > self.anim.idle) and
	   self.npc:animation_count() <= 1
	then
		-- ќпределение промежутков времени между анимаци€ми
		self.anim.begin = device():time_global()
		self.anim.idle = (math.random(self.anim.maxidle) + self.anim.sumidle) * 1000
		if math.random(100) < self.anim.rnd then
			local r
			if self.anim.lastanim == nil then
				r = math.random(table.getn(self.poisk[animslot]))
			else
				r = math.random(table.getn(self.poisk[animslot])-1)
				if r >= self.anim.lastanim then
					r = r + 1
				end
			end
			self.anim.lastanim = r
			self.npc:clear_animations()
			self.npc:add_animation (self.poisk[animslot][r].name, self.poisk[animslot][r].flag)
			-- ƒобавление зацикленного айдла дл€ данного анимслота
			self:poisk_idle(animslot)
		end
	end	
end                            
function anims:remove_poisk()
	self.anim.base_state = nil
	self.anim.lastanim = nil
	self.anim.lastanimslot = nil 
	self.npc:clear_animations()
end
----------------------------------------------------------------------------------------------------------------------
-- ќжидание на стреме
----------------------------------------------------------------------------------------------------------------------
-- проигрывает идловые анимации
function anims:set_hide()
	-- выбирает нужную анимацию дл€ данного положени€ тела
	-- если дл€ данного положени€ тела нет пачки анимаций - ругаетс€
	local animslot = self:weapon_slot()
	self.anim.lastanimslot = animslot

	-- ƒобавление зацикленного айдла дл€ данного анимслота
	self:hide_idle(animslot)
end
function anims:hide_idle(animslot)
	-- ƒобавление зацикленного айдла дл€ данного анимслота
	if animslot == 0 then
		self.npc:add_animation("d_0_idle_1", true)
	elseif animslot == 1 then
		self.npc:add_animation("d_1_idle_1", true)
	elseif animslot == 2 then
		self.npc:add_animation("d_2_idle_1", true)
	elseif animslot == 3 then
		self.npc:add_animation("d_3_idle_1", true)
	elseif animslot == 4 then
		self.npc:add_animation("d_4_idle_1", true)
	end
end
function anims:update_hide()
	-- изменилс€ ли анимслот
	local animslot = self:weapon_slot()

	if animslot ~= self.anim.lastanimslot then
		self.anim.begin = nil
		self.anim.lastanimslot = animslot
		self.npc:clear_animations()
		self:hide_idle(animslot)
	end

	-- ќпредел€ем нужно ли добавл€ть анимацию или ждать
	if (self.anim.begin == nil or
	   device():time_global() - self.anim.begin > self.anim.idle) and
	   self.npc:animation_count() <= 1
	then
		-- ќпределение промежутков времени между анимаци€ми
		self.anim.begin = device():time_global()
		self.anim.idle = (math.random(self.anim.maxidle) + self.anim.sumidle) * 1000
		if math.random(100) < self.anim.rnd then
			local r
			if self.anim.lastanim == nil then
				r = math.random(table.getn(self.hide[animslot]))
			else
				r = math.random(table.getn(self.hide[animslot])-1)
				if r >= self.anim.lastanim then
					r = r + 1
				end
			end
			self.anim.lastanim = r
			self.npc:clear_animations()
			self.npc:add_animation (self.hide[animslot][r].name, self.hide[animslot][r].flag)
			-- ƒобавление зацикленного айдла дл€ данного анимслота
			self:hide_idle(animslot)
		end
	end	
end                            
function anims:remove_hide()
	self.anim.base_state = nil
	self.anim.lastanim = nil
	self.anim.lastanimslot = nil 
	self.npc:clear_animations()
end




function anim_update(type, npc)
	local st = xr_motivator.storage[npc:id()].state.anim

	if st ~= nil then
		st:update(type)
	end
end
function anim_safe_to_break(npc)
	local st = xr_motivator.storage[npc:id()].state.anim

	if st ~= nil then
		return st:safe_to_break()
	end
	return true
end

