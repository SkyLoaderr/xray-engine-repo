----------------------------------------------------------------------------------------------------------------------
--	Схема изменений положения тела
--	автор: Диденко Руслан (Stohe)
--	TODO: 
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Условие завершения скрипта
class "evaluator_state_end" (property_evaluator)
function evaluator_state_end:__init(storage) super()
	self.a = storage
end
function evaluator_state_end:evaluate()
	return self.a.body_state == self.a.target_state
end

-- стоим лимы
class "evaluator_standing" (property_evaluator)
function evaluator_standing:__init(storage) super()
	self.a = storage
end
function evaluator_standing:evaluate()
	return self.a.body_state == 0
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Изменяет положение тела
class "action_change_state" (action_base)
function action_change_state:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_change_state:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()  
end
function action_change_state:execute ()
	if self.a.target_state == 0 then
		if self.object:animation_count() == 0 then
			self.a.body_state = self.a.target_state
		end
	else
		if self.object:animation_count() <= 1 then
			self.a.body_state = self.a.target_state
		end
	end

	action_base.execute (self)
end
function action_change_state:finalize ()
	action_base.finalize (self)
end

-- Вставание
class "action_stand_up" (action_base)
function action_stand_up:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_stand_up:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()  
	xr_state.change_state(self.object, 0, true)
end
function action_stand_up:execute ()
	action_base.execute (self)
end
function action_stand_up:finalize ()
	action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------------------------------------
-- Проверка, изменилось ли уже положение тела или нет
function finish_state(object)
	local st = xr_motivator.storage[object:id()].state
	return st.body_state == st.target_state
end

--функция смены положения тела
function change_state(object, new, emerg)
	-- ОПИСАНИЕ ИДЕНТИФИКАТОРОВ ПОЗИЦИЙ:
	-- 0 - стоит                             
	-- 1 - сидит в положении для курения
	-- 2 - сидит в положении для водки
	-- 3 - сидит в положении для еды
	-- 4 - спит сидя
	local st = xr_motivator.storage[object:id()].state
	   	            
	if st.body_state ~= new then 
		object:clear_animations()
		printf("Body State: %d, target %d", st.body_state, new) 
	            
		if st.body_state == 0 then
			if new == 0 then
				--
			elseif new == 1 then
				object:add_animation("stalker_1_down", true)
			elseif new == 2 then
				object:add_animation("stalker_2_down", true)
			elseif new == 3 then
				object:add_animation("stalker_3_down", true)
			elseif new == 4 then
				object:add_animation("stalker_2_down", true)
				object:add_animation("spit_0", true)			
			end
		elseif st.body_state == 1 then
			if new == 0 then
				object:add_animation("stalker_1_up", true)
			elseif new == 1 then
				--
			elseif new == 2 then
				--!!!!
			elseif new == 3 then
				--!!!!
			elseif new == 4 then
				--!!!!
			end
		elseif st.body_state == 2 then
			if new == 0 then
				object:add_animation("stalker_2_up", true)
			elseif new == 1 then
				--!!!!
			elseif new == 2 then
				--
			elseif new == 3 then
				object:add_animation("stalker_2v3", true)
			elseif new == 4 then
				object:add_animation("spit_0", true)
			end
		elseif st.body_state == 3 then
			if new == 0 then
				object:add_animation("stalker_3_up", true)
			elseif new == 1 then
				--!!!!
			elseif new == 2 then
				object:add_animation("stalker_3v2", true)
			elseif new == 3 then
				--
			elseif new == 4 then
				--!!!!
			end

		elseif st.body_state == 4 then
			if new == 0 then
				object:add_animation("spit_3", true)
				object:add_animation("stalker_2_up", true)
			elseif new == 1 then
				--!!!!
			elseif new == 2 then
				object:add_animation("spit_3", true)
			elseif new == 3 then
				--!!!!
			elseif new == 4 then
				--
			end
		end

		-- установка айдлов
		if new == 0 then
		elseif new == 1 then
			object:add_animation("stalker_1_2", true)
		elseif new == 2 then
			object:add_animation("stalker_2_1", true)
		elseif new == 3 then
			object:add_animation("stalker_3_2", true)
		elseif new == 4 then
			object:add_animation("spit_2", true)
		end

	      	st.target_state = new
		if emerg == true then
			st.body_state = st.target_state
		end

		return true
	else
		return false
	end
end
function getIdle(id)
end

----------------------------------------------------------------------------------------------------------------------
--State binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object)
	local operators		= {}
	local properties	= {}

	properties["state_end"]		= xr_evaluators_id.state_change
	properties["stand"]		= xr_evaluators_id.stohe_state_base + 1

	operators["state"]		= xr_actions_id.stohe_state_base + 1
	operators["stand"]		= xr_actions_id.stohe_state_base + 2

	local manager = object:motivation_action_manager()
--	local action_pl = manager:get_action(xr_actions_id.action_planner) 
--	if action_pl ~= nil then
--		local act_pl = cast_action_to_planner(action_pl)
--		if act_pl ~= nil then

	-- Evaluators                                                                            
	manager:add_evaluator (properties["state_end"], 		this.evaluator_state_end		(xr_motivator.storage[object:id()].state))
	manager:add_evaluator (properties["stand"], 			this.evaluator_standing			(xr_motivator.storage[object:id()].state))

	-- Actions
	local action = this.action_change_state (object:name(),"action_change_state", xr_motivator.storage[object:id()].state)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["state_end"],	false))
	action:add_effect 		(world_property(properties["state_end"],	true))
	manager:add_action (operators["state"], action)

	action = this.action_stand_up (object:name(),"action_stand_up", xr_motivator.storage[object:id()].state)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(properties["stand"],		false))
	action:add_effect 		(world_property(properties["stand"],		true))
	manager:add_action (operators["stand"], action)

	action = manager:action (stalker_ids.action_puzzle_solver)	
	action:add_precondition		(world_property(properties["state_end"],	true))
--	action:add_precondition		(world_property(properties["stand"],		true))

	action = manager:action (stalker_ids.action_combat_planner)	
	action:add_precondition		(world_property(properties["stand"],		true))

--		end
--	end

end