local the_actor
local heli_mgr

local state_init
local state_before       = 0
local state_combat       = 1
local state_after_combat = 2
local state_raid         = 3

local e_wait, e_explode = 0, 1

local events = {
	e_wait,    50000,
	e_explode, "factory_combat_grnd_3",
	e_wait,    50000,
	e_explode, "factory_combat_grnd_1",
	e_wait,    50000,
	e_explode, "factory_combat_grnd_2",
	e_wait,    100000
}

--local cheat_zones = {}

-- нужно сохранять
local state
local events_i, event_end
local combat_end, wait_end

----------------------------------------------------------------------------------------------------
function chst( new_state )
	state      = new_state
	state_init = true
end

function process_event_cmd()
	if not wait_end or wait_end < game.get_game_time() then
		local c1, c2 = events[events_i], events[events_i + 1]
		events_i = events_i + 2

		if c1 == e_wait then
			wait_end = game.CTime()
			wait_end:setHMSms( 0, 0, 0, c2 )
			wait_end:add( game.get_game_time() )

		elseif c1 == e_explode then
			local obj = level.object( c2 )
			if obj then
				obj:explode( 0 )
			end
		end
	end
end

function update()
	if state == state_before then
		if state_init then
			heli_mgr:set_path( "heli_path_hang" )

			state_init = false
		end

		if the_actor:has_info( "agr_factory_combat_start" ) then
			chst( state_combat )
		end
	end

	if state == state_combat then
		if state_init then
			printf( "!agr_factory_combat_started" )

			combat_end = game.CTime()
			combat_end:setHMS( 0, 6, 20 )
			combat_end:add( game.get_game_time() )

			events_i = 1

			state_init = false
		end

		process_event_cmd()

		if events_i > table.getn( events ) then
			the_actor:give_info_portion( "agr_factory_combat_proceed" )
			chst( state_after_combat )
		end
	end

	if state == state_after_combat then
		if state_init then
			printf( "!agr_factory_combat_proceed" )

			heli_mgr:send_to_stay_point()

			state_init = false
		end

		if the_actor:has_info( "agr_factory_need_help" ) then
			chst( state_raid )
		end
	end

	if state == state_raid then
		if state_init then
			heli_mgr:set_path( "heli_path_around" )

			state_init = false
		end
	end
end

function on_cheat_enter( zone, obj )
	if obj:id() == the_actor:id() and
	   not heli_mgr.enemy and
	   the_actor:has_info( "agr_factory_need_help" )
	then
		heli_mgr:set_enemy( obj )
	end
end

function on_cheat_leave( zone, obj )
	if heli_mgr.enemy and heli_mgr.enemy:id() == the_actor:id() then
		heli_mgr:set_path( "heli_path_around" )
	end
end

function main()
    the_actor  = get_actor()

	heli_mgr = xr_heli.HeliManager()
	heli_mgr:initialize( "heli", nil, 30, 40 )

	if not state then
		chst( state_before )
	end

	for i = 1, 4 do
		local zone = get_level_object( "cheat_zone" .. i )

--		table.insert( cheat_zones, zone )

		zone:set_callback( on_cheat_enter, true )
	    zone:set_callback( on_cheat_leave, false )
	end

    while true do
		update()
		heli_mgr:update()
		wait()
	end
end
