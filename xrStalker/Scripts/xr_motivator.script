----------------------------------------------------------------------------------------------------------------------
--  автор: Диденко Руслан (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------
storage = {}
memtsg = {} --' временная таблица
lasthealth = 0
lastime = nil

----------------------------------------------------------------------------------------------------------------------
--Motivator binder
----------------------------------------------------------------------------------------------------------------------
class "motivator_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:__init (obj) super(obj)
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:reinit()
	object_binder.reinit(self)
	
	self.object:set_pda_callback(pda_callback)
	self.object:set_hear_callback(hear_callback)
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:net_spawn(sobject)
	local sim = alife()
	if sim ~= nil then 
		xr_spawner.spawn(sobject)
	end
	return object_binder.net_spawn(self, sobject)
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:net_destroy()
	xr_motivator.storage[self.object:id()] = nil
    object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:update(delta)
    object_binder.update(self, delta)
--' Проверка ТИМ СКВАД ГРУП
if false then
  if memtsg[self.object:id()] == nil then
    printf("[TSG] Object: %s t:%d s:%d g:%d", self.object:name(),
                          self.object:team(),
                          self.object:squad(),
                          self.object:group())
    memtsg[self.object:id()] = self.object:id()
  end
end

--' Проверка потери жизни
if false then
	if lasttime == nil or
	   game.get_game_time():diffSec(lasttime) > 1 
	then
		printf("%f * %f", self.object.health, self.object.health - lasthealth)
		lasthealth = self.object.health
		lasttime = game.get_game_time()
	end
end

end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:reload (section)
    object_binder.reload(self, section)

    local char_ini = self.object:spawn_ini()

    --' Bind other scripts
    printf("Base evaluator ID %d", stalker_ids.property_script)
    printf("Base action ID %d", stalker_ids.action_script)
    self.object:disable_talk()

    --' загрузка озвучки
    xr_sounds.load_sounds (self.object)
    xr_sound.load_sound(self.object)
----------------------------------------------------------------------------------------------------------------------
-- Общие скрипты
----------------------------------------------------------------------------------------------------------------------
    xr_motivator.storage[self.object:id()] = {  followers = {} }

    --' Положения тела
    xr_motivator.storage[self.object:id()].state = {
            body_state = 0,
            target_state = 0,
            position = nil,
            dist = 1,
            anim = xr_state.anims(self.object)
        }
    xr_state.add_to_binder(self.object)
    --' удар в морду
    xr_punch.add_to_binder (self.object)   

    --' Настройка схемы реакции
	xr_motivator.storage[self.object:id()].reactions = {
		enabled = true,
		time_wait = 5*60*1000,
		evn = xr_reactions.events(self.object),
		obj = {position = nil,
				id = nil,
				type = nil,
				time = nil,
				visibility = nil
			},
		rules = {}
    }
    xr_reactions.add_to_binder(self.object, char_ini)
    --' Настройка встречи
    xr_motivator.storage[self.object:id()].meet = {
			Buyer = nil,
            Seller = self.object,
            begin_wait_to_see = { time = 300,
                                begin = nil },
            enabled = true,
            over = false,
            actor = nil,
            noweap = false,			--' игнорируем наличие оружия у актора
            distance = 15,			--' расстояние, в пределах которого мы реагируем
            shoot_distance = 5		--' расстояние, в пределах которого мы стреляем
        }  
	xr_meet.add_to_binder(self.object, char_ini)
	--' Компаньон
	xr_assistance.add_to_binder(self.object)		
	--' помощник, мля !!!
	xr_motivator.storage[self.object:id ()].sos = {
		enabled = false,
		npc = nil,
		initialized = false,
		code = 0,
		need_follow = false
    }
	xr_sos.add_to_binder(self.object, char_ini)
	--' раненый.
	xr_motivator.storage[self.object:id ()].wounded = {
		enabled = true,
		threshold = 0.2,
		sit = false,
		cover = false,
		npc = nil,
		ignore_time = 0,
		final = true,
		immediate = false
    }
	xr_wounded.add_to_binder (self.object, char_ini)

----------------------------------------------------------------------------------------------------------------------
-- Модели поведения
----------------------------------------------------------------------------------------------------------------------
	--' 
	xr_logic.stalker_enable_scripts(self.object, char_ini)
end
----------------------------------------------------------------------------------------------------------------------
function pda_callback(recepient, who, msg_type)
    recepient:answer_pda ()
end
----------------------------------------------------------------------------------------------------------------------
function hear_callback(self, who, sound_type, sound_position, sound_power)
    ----printf("SOUNDCHECK %s, %f", who:name(), sound_power)
end
----------------------------------------------------------------------------------------------------------------------
function AddToMotivator(npc)
    npc:bind_object(this.motivator_binder(npc))
end
----------------------------------------------------------------------------------------------------------------------
function addCommonPrecondition(action)
	action:add_precondition (world_property(xr_evaluators_id.state_change,		true))
	action:add_precondition (world_property(xr_evaluators_id.reaction,			false))
	action:add_precondition (world_property(xr_evaluators_id.assistance + 1,	false))
	action:add_precondition (world_property(xr_evaluators_id.stohe_meet_base + 1,false))
	
end
----------------------------------------------------------------------------------------------------------------------
function checkStorage(npc)
    -- FIXME: Zmey: надо бы вынести общую часть кода в отдельную функцию
    local count = 0
    for k,v in xr_motivator.storage[npc:id()] do
        if	k == "sleeper" or
			k == "follower" or
			k == "patrol" or
			k == "camper" or
			k == "walker" or
			k == "assassin" or
			k == "commander" or
			k == "ambush" or
			k == "bodyguard" or
			k == "zoneguard" or
			k == "sniper" or
			k == "kamp"
        then
            if v.enabled == true then
                count = count + 1
            end
        end
    end
    if count > 1 then
        printf("ERROR: there is too many active script")
        for k,v in xr_motivator.storage[npc:id()] do
            if	k == "sleeper" or
				k == "follower" or
				k == "patrol" or
				k == "camper" or
				k == "walker" or
				k == "assassin" or
				k == "commander" or
				k == "ambush" or
				k == "bodyguard" or
				k == "zoneguard" or
				k == "sniper" or
				k == "kamp"
            then
                if v.enabled == true then
                    printf("ERROR: %s", k)
                end
            end
        end
    end
end
