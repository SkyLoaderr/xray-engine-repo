local Patrols = {}

function FindCommand (_group, _command)
    if table.getn (Patrols) == 0 then return 0 end
    for a = 1, table.getn (Patrols), 1 do
        if Patrols[a].group == _group and Patrols[a].command == _command then
           return a
        end
    end
    return 0
end

function AddToCommand (_group, _command, _member, _npc)
    --find command
    local index = this.FindCommand (_group, _command)
--    printf ("Index = %d", index)
    --if command present - add the new member
    if index ~= 0 then
--       printf ("Find command %s_%d", _group, _command)
       local t = {npc = _npc, member = _member, variables = {}}
       table.insert (Patrols[index].members, t)
--       printf ("New member successfully added")
       return
    end

    --create new command
    local temp = {
                 group = _group,
                 command = _command,
                 members = {}
                 }
    local t =
             {
             npc = _npc,
             member = _member,
             variables = {}
             }
    table.insert (temp.members, t)
    table.insert (Patrols, temp)
--    printf ("New command successfully added")
end

function RemoveFromCommand (_group, _command, _member)

    if table.getn (Patrols) == 0 then
       printf ("ERROR !!! Requested remove patrol member %s_%d_%d. Patrols table is empty !!!", _group, _command, _member)
       return
    end

    for a = 1, table.getn (Patrols), 1 do
        if Patrols[a].group == _group and Patrols[a].command == _command then
--           printf ("Find in %s_%d", _group, _command)
--           printf ("Size of table Patrols[a].members is %d units", table.getn (Patrols[a].members))
           for b = 1, table.getn (Patrols[a].members), 1 do
--               printf ("Member %d", Patrols[a].members[b].member)
              if Patrols[a].members[b].member == _member then
                 table.remove (Patrols[a].members, b)
                 printf ("Remove member %s_%d_%d", _group, _command, _member)
                 if table.getn (Patrols[a].members) == 0 then
                    table.remove (Patrols, a)
                    printf ("Patrol group %s_%d is empty. Removed", _group, _command)
                 end
                 return
              end
           end
        end
    end
    printf ("ERROR !!! Requested remove patrol member %s_%d_%d. Member not found !!!", _group, _command, _member)
end


function PrintTable ()

    printf ("----------------------Start table---------------------------------")
    if table.getn (Patrols) == 0 then printf ("Table is empty") end
    for a = 1, table.getn (Patrols), 1 do
        printf ("Patrol Unit %d", a)
        printf ("Patrol group : %s, patrol command : %d", Patrols[a].group, Patrols[a].command)
        if table.getn (Patrols[a].members) == 0 then
           printf ("Member table is empty")
        else
           for b = 1, table.getn (Patrols[a].members), 1 do
               printf ("NPC : %s, member %d", Patrols[a].members[b].npc, Patrols[a].members[b].member)
           end
        end
    end
    printf ("----------------------End table-----------------------------------")
end


----------------------------------------------------------------------------------------------------------------------
--Motivation global
----------------------------------------------------------------------------------------------------------------------
class "motivation_global"	(motivation)
----------------------------------------------------------------------------------------------------------------------
function motivation_global:__init(motivations) super()
	self.motivations = motivations
end
----------------------------------------------------------------------------------------------------------------------
function motivation_global:evaluate(motivation_id)
	if self.motivations["alive"] == motivation_id then
		if self.object:alive() == true then
			return			1.0
		else
			return			0.0
		end
	else
		if self.object:alive() == false then
			return			1.0
		else
			return			0.0
		end
	end
end
----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
--Evaluator const
----------------------------------------------------------------------------------------------------------------------
class "evaluator_const"		(property_evaluator)
----------------------------------------------------------------------------------------------------------------------
function evaluator_const:__init(value) super()
	self.value = value
end
----------------------------------------------------------------------------------------------------------------------
function evaluator_const:evaluate()
	return self.value
end
----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
--Evaluator alive
----------------------------------------------------------------------------------------------------------------------
class "evaluator_alive"		(property_evaluator)
----------------------------------------------------------------------------------------------------------------------
function evaluator_alive:__init () super ()
end
----------------------------------------------------------------------------------------------------------------------
function evaluator_alive:evaluate()
	return self.object:alive ()
end
----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
--Action alive
----------------------------------------------------------------------------------------------------------------------
class "action_alive"			(action_base)
----------------------------------------------------------------------------------------------------------------------
function action_alive:__init() super()
end
----------------------------------------------------------------------------------------------------------------------
function action_alive:initialize()
	action_base.initialize				(self)

	self.object:set_node_evaluator		()
	self.object:set_path_evaluator		()
	self.object:set_desired_position	()
	self.object:set_desired_direction	()
	printf								("script action is initialized!")
end
----------------------------------------------------------------------------------------------------------------------
function action_alive:execute()
	action_base.execute					(self)
	
	self.object:play_sound				(2,60000,10000)

	self.object:set_sight				(look.search,nil,0);

	self.object:set_item				(object.idle);

	self.object:set_path_type			(game_object.game_path)
	self.object:set_detail_path_type	(move.line)
	self.object:set_body_state			(move.standing)
	self.object:set_movement_type		(move.walk)
	self.object:set_mental_state		(anim.free)
end
----------------------------------------------------------------------------------------------------------------------
function action_alive:finalize()
	action_base.finalize	(self)
end
----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
--Patrol binder
----------------------------------------------------------------------------------------------------------------------
class "patrol_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function patrol_binder:__init (object) super(object)
end
----------------------------------------------------------------------------------------------------------------------
function patrol_binder:reinit ()
	object_binder.reinit	(self)
end
----------------------------------------------------------------------------------------------------------------------
function patrol_binder:reload (section)
	object_binder.reload	(self, section)
	local					motivations	= {}
	local					operators = {}
	local					properties = {}
	local					manager	= self.object:motivation_action_manager ()
	local					goal = world_state ()
	
	manager:clear			()

	motivations["global"]	= 0
	motivations["dead"]		= 1
	motivations["alive"]	= 2

	properties["alive"]		= 0
	properties["dead"]		= 1
	properties["solved"]	= 2

	operators["dead"]		= 0
	operators["free"]		= 1

	-- // motivations
	manager:add_motivation	(motivations["global"],		this.motivation_global(motivations))

	goal:clear				()
	goal:add_property		(world_property(properties["dead"],	true))
	manager:add_motivation	(motivations["dead"],		motivation_action(goal))

	goal:clear				()
	goal:add_property		(world_property(properties["solved"],true))
	manager:add_motivation	(motivations["alive"],		motivation_action(goal))

	manager:add_connection	(motivations["global"],		motivations["dead"])
	manager:add_connection	(motivations["global"],		motivations["alive"])

	-- // evaluators
	manager:add_evaluator	(properties["alive"],		this.evaluator_alive	())
	manager:add_evaluator	(properties["dead"],		this.evaluator_const	(false))
	manager:add_evaluator	(properties["solved"],		this.evaluator_const	(false))

	-- // operators/actions
	local					action = action_base()
	action:add_precondition	(world_property(properties["alive"],	false))
	action:add_precondition	(world_property(properties["dead"],		false))
	action:add_effect		(world_property(properties["dead"],		true))
	manager:add_action		(operators["dead"],			action)

	action					= this.action_alive()
	action:add_precondition	(world_property(properties["alive"],	true))
	action:add_precondition	(world_property(properties["solved"],	false))
	action:add_effect		(world_property(properties["solved"],	true))
	manager:add_action		(operators["free"],			action)
end
----------------------------------------------------------------------------------------------------------------------
function patrol_binder:net_spawn	(server_object)
    printf ("NetSpawn called")
	if (object_binder.net_spawn(self,server_object) == false) then
	   return false
	end
	local group, command, member = str_split (self:object)
    this.AddToCommand (group, command, member, self:object)
    this.PrintTable ()
	return true
end
----------------------------------------------------------------------------------------------------------------------
function patrol_binder:net_destroy	()
    printf ("NetDestroy called")
	local group, command, member = str_split (self:object)
    this.RemoveFromCommand (group, command, member)
	object_binder.net_destroy	(self)
end
----------------------------------------------------------------------------------------------------------------------

function AddToPatrol (npc, group, command, member)
    npc:bind_object	(this.patrol_binder (obj))
end

