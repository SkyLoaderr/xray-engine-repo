local prines = sound_object ("scripts\\rolik\\trader_prines")            --prines
local alco   = sound_object ("scripts\\rolik\\trader_alco")              --alko
local davai  = sound_object ("scripts\\rolik\\trader_davai")             --davay
local molodec = sound_object ("scripts\\rolik\\trader_molodec")          --molodec
local peredai = sound_object ("scripts\\rolik\\trader_peredai")          --pereday_svoim_ya__
local stoish = sound_object ("scripts\\rolik\\trader_stoish")            --che_stoish


local actor_entered = false
local time = 0
local trade = false
local exchange = false
local phrase = 0
local first_enter = true

function on_enter (zone, object)
    printf ("Actor entered")
    actor_entered = true
end

function on_exit (zone, object)
    printf ("Actor exited")
    actor_entered = false
end

function on_start_trade()
  trade = true
end

function on_end_trade()
  trade = false
end

function on_trade(object,type)
    if object:name () == "artefact" then exchange = true end
end


function after_trading (trader)

    while trade == true do wait () end

    reset_action (trader, military_trader.script_name ())
    if exchange == true then
       action (trader, anim ("idle_spinka"), cond (cond.anim_end))
       while trader:action () do wait () end
       reset_action (trader, military_trader.script_name ())
       action (trader, anim ("molodec"), cond (cond.anim_end))
       molodec:play_at_pos (trader, trader:position (), 0)
       while trader:action () do wait () end
       reset_action (trader, military_trader.script_name ())
       action (trader, anim ("pereday_svoim_ya__"), cond (cond.anim_end))
       peredai:play_at_pos (trader, trader:position (), 0)
       action (trader, anim ("spinka_idle"), cond (cond.anim_end))
       actor_entered = false
       return true
       end

    action (trader, anim ("alko"), cond (cond.anim_end))
    alco:play_at_pos (trader, trader:position (), 0)
    while trader:action () do wait () end
    phrase = 2
    return false
end

function wait_trading (trader)
    if trader:action () ~= nil then return 0 end

    if device ():time_global () - time < 5000 then return 0 end

    reset_action (trader, military_trader.script_name ())
    printf ("Phrase %d", phrase)
    if phrase == 0 then
       action (trader, anim ("che_stoish"), cond (cond.anim_end))
       stoish:play_at_pos (trader, trader:position (), 0)
       phrase = 1
       time = device ():time_global ()
    elseif phrase == 1 then
           phrase = 2
           action (trader, anim ("alko"), cond (cond.anim_end))
           alco:play_at_pos (trader, trader:position (), 0)
    else
       action (trader, anim ("idle"), cond (cond.anim_end))
       action (trader, anim ("palci"), cond (cond.anim_end))
       end
    return 0
end

function first_pass (trader)

    phrase = 0

    while trader:action () do wait () end
    reset_action (trader, military_trader.script_name ())

    if first_enter == true then
       action (trader, anim ("prines"), cond (cond.anim_end))
       prines:play_at_pos (trader, trader:position (), 0)
       while trader:action () and prines:playing () == true do wait () end

       reset_action (trader, military_trader.script_name ())
       action (trader, anim ("palci"), cond (cond.anim_end))
       while trader:action () do wait () end

       first_enter = false
       end

    reset_action (trader, military_trader.script_name ())
    action (trader, anim ("davay"), cond (cond.anim_end))
    davai:play_at_pos (trader, trader:position (), 0)
    while trader:action () and davai:playing () == true do wait () end

    time = device ():time_global ()

    while true do
          if actor_entered == false then return end
          if trade == false then military_trader.wait_trading (trader);
          else
             if military_trader.after_trading (trader) == true then
                return
             end
          end
          wait ()
    end
end

function main ()

    local trader = get_level_object ("trader")
    local trzone = get_level_object ("trader_zone")

    trzone:clear_callback (true)
    trzone:clear_callback (false)
    trzone:set_callback (military_trader.on_enter, true)
    trzone:set_callback (military_trader.on_exit, false)


    trader:script (true, military_trader.script_name ())

    trader:set_callback (military_trader.on_start_trade,true)    -- start
    trader:set_callback (military_trader.on_end_trade,false)    -- end
    trader:set_trade_callback (military_trader.on_trade)


    action (trader, anim ("idle"), cond (cond.anim_end))

    while true do
          if actor_entered == true and exchange == false then military_trader.first_pass (trader) end
          if trader:action () == nil then
             reset_action (trader, military_trader.script_name ())
             local count = math.random (1, 3)
             if count == 1 then
                action (trader, anim ("idle_chitaet"), cond (cond.anim_end))
                action (trader, anim ("chitaet"), cond (cond.anim_end))
                action (trader, anim ("chitaet_idle"), cond (cond.anim_end))
             elseif count == 2 then
                action (trader, anim ("palci"), cond (cond.anim_end))
                action (trader, anim ("idle_spinka"), cond (cond.anim_end))
                action (trader, anim ("spinka_idle"), cond (cond.anim_end))
             else
                action (trader, anim ("cheshit"), cond (cond.anim_end))
                action (trader, anim ("zatylok"), cond (cond.anim_end))
             end
          end
       wait ()
       end

    trader:clear_callback (true)
    trader:clear_callback (false)
    trader:clear_trade_callback ()

    trader:script (false, military_trader.script_name ())
    printf ("Trader end")
end


