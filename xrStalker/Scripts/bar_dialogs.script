--Взнос Долгу для прохода на территорию
function has_dolg_deposite(actor, npc)
	return actor:money() >= 1000
end

function give_dolg_deposite(actor, npc)	
	dialogs.relocate_money(npc, 1000, "out")
end


--Бармен в комнате
function give_agroprom_documents(first_speaker, second_speaker)
	local agroprom_documents = first_speaker:object("quest_case_02")
	dialogs.relocate_item(second_speaker, agroprom_documents, "out")
end

function give_agroprom_reward(first_speaker, second_speaker)
		dialogs.relocate_money(second_speaker, 3000, "in")
end

function give_extra_task(actor, npc)
	if barman_darklab_documents_given(actor,npc) or
	   barman_need_decoding_given(actor,npc)
	then
		return true
	end
	return false
end
function dont_give_extra_task(actor, npc)
	return not give_extra_task(actor, npc)
end

function barman_dont_has_room_job(actor,npc)
	return not barman_has_room_job(actor,npc)
end
function barman_has_room_job(actor,npc)	
	if barman_need_darklab_documents(actor,npc) or
	   barman_need_decoding(actor,npc) or
	   barman_need_radar(actor,npc)
	then
		return true
	end
	return false
end

function barman_need_complete_job(actor,npc)
	if (barman_darklab_documents_given(actor,npc) and have_darklab_documents(actor, npc) ) or (barman_need_decoding_given(actor,npc) and have_decoding_documents(actor, npc))
	then
		return true
	end
	return false
end

function barman_dont_has_job(actor,npc)
	return not barman_has_job(actor,npc)
end

function barman_has_job(actor,npc)
	if barman_need_research(actor,npc) or barman_need_kill_veterans(actor,npc)
	then
		return true
	end
	return false
end


-- ********************************************************
--			БАРМЕН В КОМНАТЕ
-- ********************************************************
-- Документы с дарклаба
function barman_need_darklab_documents(actor,npc)
	if db.actor:dont_has_info("bar_darklab_document_start")
	then
		return true
	end
	return false
end

function barman_darklab_documents_given(actor,npc)
	if db.actor:has_info("bar_darklab_document_start") and
	   db.actor:dont_has_info("bar_darklab_document_done") 
	then
		return true
	end
	return false
end

function have_darklab_documents(first_speaker, second_speaker)
  	return first_speaker:object("bar_darklab_documents") ~= nil
end

function give_darklab_documents(first_speaker, second_speaker)
	local darklab_documents = first_speaker:object("bar_darklab_documents")
	dialogs.relocate_item(second_speaker, darklab_documents, "out")
	level_tasks.set_task_state(task.completed, "bar_darklab_documents", 0)
end

function give_darklab_reward(first_speaker, second_speaker)
		dialogs.relocate_money(second_speaker, 4500, "in")
end

-- Расшифровка документов
function barman_need_decoding(actor,npc)
	if db.actor:dont_has_info("bar_decoding_start") and
	   db.actor:has_info("bar_darklab_document_done")
	then
		return true
	end
	return false
end
function barman_need_decoding_given(actor,npc)
	if db.actor:has_info("bar_decoding_start") and
	   db.actor:dont_has_info("bar_decoding_done")
	then
		return true
	end
	return false
end
function give_documents_to_decoding(npc, actor)
	local darklab_documents = npc:object("bar_darklab_documents")
	if darklab_documents then
		dialogs.relocate_item(npc, darklab_documents, "in")
	end
end
function have_decoding_documents(first_speaker, second_speaker)
  	return first_speaker:object("bar_decoding_documents") ~= nil
end
function give_decoding_documents(first_speaker, second_speaker)
	local decoding_documents = first_speaker:object("bar_decoding_documents")
	if decoding_documents then
		dialogs.relocate_item(second_speaker, decoding_documents, "out")
	end
	level_tasks.set_task_state(task.completed, "bar_decoding_documents", 0)
end

function give_decoding_reward(first_speaker, second_speaker)
		dialogs.relocate_money(second_speaker, 5000, "in")
end

-- Выдача задания на отключение радара
function barman_need_radar(actor,npc)
	if db.actor:dont_has_info("bar_deactivate_radar_start") and
	   db.actor:has_info("bar_decoding_done")
	then
		return true
	end
	return false
end

-- ********************************************************
--			БАРМЕН ЗА ПРИЛАВКОМ
-- ********************************************************
-- спасение исследований ученных
function barman_need_research(actor,npc)
	if db.actor:dont_has_info("bar_resque_research_start") then
		return true
	end
	return false
end
function actor_have_research(actor,npc)
	if db.actor:object("bar_ecolog_flash") then
		return true
	end
	return false
end
function actor_have_not_research(actor,npc)
	if db.actor:object("bar_ecolog_flash") then
		return false
	end
	return true
end
function actor_transfer_research(actor,npc)
	local obj = actor:object("bar_ecolog_flash")
	if obj then
		dialogs.relocate_item(npc, obj, "out")
	end
end
function transfer_research_to_actor(npc,actor)
	local obj = npc:object("bar_ecolog_flash")
	if obj then
		dialogs.relocate_item(npc, obj, "in")
	end
end
function barman_need_kill_veterans(actor,npc)
	if db.actor:dont_has_info("bar_kill_veteran_start") then
		return true
	end
	return false
end


function barman_ecolog_done(actor,npc)
	level_tasks.set_task_state(task.completed, "bar_resque_information", 0)
	dialogs.relocate_money(second_speaker, 2000, "in")
end
function barman_ecolog_fail(actor,npc)
	level_tasks.set_task_state(task.fail, "bar_resque_information", 0)
end
function volkodav_research_done(actor,npc)
	level_tasks.set_task_state(task.completed, "bar_get_information", 0)
end
function volkodav_research_fail(actor,npc)
	level_tasks.set_task_state(task.fail, "bar_get_information", 0)
end
function volkodav_active_quest(actor,npc)
	if db.actor:has_info("bar_get_research_start") and
	   db.actor:dont_has_info("bar_get_research_done") and
	   db.actor:dont_has_info("bar_get_research_fail")
	then
		return true
	end
	return false
end


--Долг архивные документы
function have_dolg_arhive_document(first_speaker, second_speaker)
  	return first_speaker:object("dolg_arhive_documents") ~= nil
end

function give_dolg_arhive_document(first_speaker, second_speaker)
	local document = first_speaker:object("dolg_arhive_documents")
	dialogs.relocate_item(second_speaker, document, "out")
	level_tasks.set_task_state(task.completed, "bar_dolg_test_quest", 0)
end


--Свобода РГ-6
function have_rg6(first_speaker, second_speaker)
  	return first_speaker:object("wpn_rg-6") ~= nil
end

function give_rg6(first_speaker, second_speaker)
	local rg6 = first_speaker:object("wpn_rg-6")
	dialogs.relocate_item(second_speaker, rg6, "out")
end

function enter_to_dolg(first_speaker, second_speaker)
	local dolg_outfit = second_speaker:object("dolg_outfit")
	dialogs.relocate_item(second_speaker, dolg_outfit, "in")
end


-- флэшка Борова
function have_borov_flash(first_speaker, second_speaker)
  	return first_speaker:object("borov_flash") ~= nil
end
function give_borov_flash(first_speaker, second_speaker)
	local borov_flash = first_speaker:object("borov_flash")
	dialogs.relocate_item(second_speaker, borov_flash, "out")
end



-- PDA Тирана
function have_bar_tiran_pda(first_speaker, second_speaker)
  	return first_speaker:object("bar_tiran_pda") ~= nil
end
function give_bar_tiran_pda(first_speaker, second_speaker)
	local bar_tiran_pda = first_speaker:object("bar_tiran_pda")
	dialogs.relocate_item(second_speaker, bar_tiran_pda, "out")
end



-- PDA Лидера Свободы
function have_mil_svoboda_leader_pda(first_speaker, second_speaker)
  	return first_speaker:object("mil_svoboda_leader_pda") ~= nil
end
function give_mil_svoboda_leader_pda(first_speaker, second_speaker)
	local mil_svoboda_leader_pda = first_speaker:object("mil_svoboda_leader_pda")
	dialogs.relocate_item(second_speaker, mil_svoboda_leader_pda, "out")
end



-- Петренко, выдача награды

function actor_need_reward (actor, npc)
	if (db.actor:has_info("bar_kill_borov_done") and db.actor:dont_has_info("bar_kill_borov_reward")) or
	   (db.actor:has_info("bar_kill_svoboda_ambush_done") and db.actor:dont_has_info("bar_kill_svoboda_reward"))or
	   (db.actor:has_info("bar_kill_svoboda_leader_done") and db.actor:dont_has_info("bar_kill_svoboda_leader_reward"))
	then
		return true
	end
	return false
end	

function have_tiran_reward(first_speaker, second_speaker)
	local groza = second_speaker:object("wpn_groza")
--	dialogs.relocate_item(second_speaker, groza, "in")
	dialogs.relocate_money(second_speaker, 2000, "in")
end

function have_borov_reward(first_speaker, second_speaker)
	local dolg_rifle = second_speaker:object("wpn_spas12")
--	dialogs.relocate_item(second_speaker, dolg_rifle, "in")
	dialogs.relocate_money(second_speaker, 1000, "in")
end

function have_svoboda_leader_reward(first_speaker, second_speaker)
	local super_suit = second_speaker:object("scientific_outfit")
	dialogs.relocate_item(second_speaker, super_suit, "in")
	dialogs.relocate_money(second_speaker, 10000, "in")
end


--Фамильное ружье охотника
function have_hunters_toz(first_speaker, second_speaker)
  	return first_speaker:object("hunters_toz") ~= nil
end
function give_hunters_toz(first_speaker, second_speaker)
	local hunters_toz = first_speaker:object("hunters_toz")
	dialogs.relocate_item(second_speaker, hunters_toz, "out")
	level_tasks.set_task_state(task.completed, "bar_hunter_rifle", 0)
end
function have_hunter_reward(first_speaker, second_speaker)
	dialogs.relocate_money(second_speaker, 500, "in")
end


--PDA ночного снайпера
function have_sniper_pda(first_speaker, second_speaker)
  	return first_speaker:object("bar_sniper_pda") ~= nil
end

function give_sniper_pda(first_speaker, second_speaker)
	local sniper_pda = first_speaker:object("bar_sniper_pda")
	dialogs.relocate_item(second_speaker, sniper_pda, "out")
	level_tasks.set_task_state(task.completed, "bar_drunk_dolg_quest", 0)
end

function have_sniper_reward(first_speaker, second_speaker)
	local dolg_detector = second_speaker:object("detector_advances")
	dialogs.relocate_item(second_speaker, dolg_detector, "in")
end


--PDA Счастливчика
function have_lucky_pda(actor,npc)
	if db.actor:object("bar_lucky_pda") then
		return true
	end
	return false
end

function give_lucky_pda(first_speaker, second_speaker)
	local lucky_pda = first_speaker:object("bar_lucky_pda")
	dialogs.relocate_item(second_speaker, lucky_pda, "out")
	dialogs.relocate_money(second_speaker, 2500, "in")
	level_tasks.set_task_state(task.completed, "bar_crazy_veterans_quest", 0)
end

-- Оплата информации осведомителю.
function has_money_for_informer_1(actor, npc)
	return actor:money() >= 1500
end

function give_money_for_informer_1(actor, npc)
	dialogs.relocate_money(npc, 1500, "out")
end

function has_money_for_informer_2(actor, npc)
	return actor:money() >= 3000
end

function give_money_for_informer_2(actor, npc)	
	dialogs.relocate_money(npc, 3000, "out")
end

function has_money_for_informer_3(actor, npc)
	return actor:money() >= 4500
end

function give_money_for_informer_3(actor, npc)	
	dialogs.relocate_money(npc, 4500, "out")
end

function have_volkodav_reward(actor, npc)	
	local podstvolnik = npc:object("wpn_addon_grenade_launcher")
	dialogs.relocate_item(npc, podstvolnik, "in")
	dialogs.relocate_money(npc, 1000, "in")
end


-- ********************************************************
--			ARENA
-- ********************************************************
function arena_empty(actor,npc)
	return arena_has_no_monsters(npc, actor)
end
function arena_not_empty(actor,npc)
	return not arena_empty(actor,npc)
end

function arena_has_no_monsters(npc, actor)
	if not arena_has_boar(npc, actor)
	then
		return true
	end
	return false
end

function arena_has_boar(npc, actor)
	return db.actor:dont_has_info("bar_arena_boar_defeated")
end

function actor_has_1000(actor,npc)
	return actor:money() > 1000
end
function give_money_1000(actor, npc)	
	dialogs.relocate_money(npc, 1000, "out")
end
function actor_has_2000(actor,npc)
	return actor:money() > 2000
end
function give_money_2000(actor, npc)	
	dialogs.relocate_money(npc, 2000, "out")
end
function actor_has_3000(actor,npc)
	return actor:money() > 3000
end
function give_money_3000(actor, npc)	
	dialogs.relocate_money(npc, 3000, "out")
end
function actor_has_5000(actor,npc)
	return actor:money() > 5000
end
function give_money_5000(actor, npc)	
	dialogs.relocate_money(npc, 5000, "out")
end