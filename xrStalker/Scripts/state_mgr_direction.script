--' Повороты тела
--' Смотрим ли мы сейчас туда, куда нужно или нет?
class "eva_state_mgr_direction" (property_evaluator)
function eva_state_mgr_direction:__init(name, st) super (nil, name)
	self.st = st
	self.target_position = nil
end
function eva_state_mgr_direction:evaluate()
	self.target_position = nil

	if self.st.look_object ~= nil and
	   self.object:see(self.st.look_object) == true
	then
		self.target_position = self.st.look_object:position()
--		printf("changed for object")
	end
		
	if self.target_position == nil and
	   self.st.look_position ~= nil
	then
		self.target_position = self.st.look_position
--		printf("changed for position")
	end
	
	if self.target_position == nil then
		-- если текущая позиция нулевая
		if self.st.current_direction == nil then
			self:callback()
			return true
		else
			return false
		end	
	else	
		-- если текущая позиция ненулевая
		local dir = utils.vector_copy_by_val(self.target_position):sub(self.object:position())
		--printf("head: %s", utils.to_str(yaw_degree(dir, self.object:head_orientation())))
		--printf("body: %s", utils.to_str(yaw_degree(dir, self.object:direction())))

		if yaw_degree(dir, self.object:head_orientation()) > 5 then
			self.st.planner:action(self.st.operators["direction_turn"]).target_position = self.target_position
			return false
		else
			self:callback()	
			return true
		end
	end	
	return true
end
function eva_state_mgr_direction:callback()
	if self.st.callback ~= nil and
	   self.st.callback.turn_end_func ~= nil 
	then
		self.st.callback.turn_end_func(self.st.callback.obj)
		self.st.callback.turn_end_func = nil		
	end
end

class "eva_state_mgr_direction_search" (property_evaluator)
function eva_state_mgr_direction_search:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_direction_search:evaluate()
	return self.st.current_direction ~= nil
end

--' Поворачиваемся ли мы сейчас
class "eva_state_mgr_direction_turning" (property_evaluator)
function eva_state_mgr_direction_turning:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_direction_turning:evaluate()
--	printf("BODY TURN %s", utils.to_str(self.object:is_body_turning()))
	return self.object:is_body_turning()
end



--' Включаем поворот
class "act_state_mgr_direction_turn" (action_base)
function act_state_mgr_direction_turn:__init(name, st) super (nil, name)
	self.st = st
	self.target_position = nil
end
function act_state_mgr_direction_turn:initialize()
	action_base.initialize(self)
	self.object:set_sight(look.direction, utils.vector_copy_by_val(self.target_position):sub(self.object:position()), true)
end
function act_state_mgr_direction_turn:execute()
	action_base.execute(self)
	self.object:set_sight(look.direction, utils.vector_copy_by_val(self.target_position):sub(self.object:position()), true)
end
function act_state_mgr_direction_turn:finalize()
	action_base.finalize(self)
end

--' Включаем поворот
class "act_state_mgr_direction_search" (action_base)
function act_state_mgr_direction_search:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_direction_search:initialize()
	action_base.initialize(self)
	self.object:set_sight(look.danger, nil, 0)
	self.st.current_direction = nil
end
function act_state_mgr_direction_search:execute()
	action_base.execute(self)
end
function act_state_mgr_direction_search:finalize()
	action_base.finalize(self)
end