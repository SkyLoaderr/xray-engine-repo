

--' Повороты тела
--' Смотрим ли мы сейчас туда, куда нужно или нет?
class "eva_state_mgr_direction" (property_evaluator)
function eva_state_mgr_direction:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_direction:evaluate()
	printf("direction")
	
	if state_lib.states[self.st.target_state].direction == nil then return true end
	
	if 
	
	local dir = self.object:position():sub(db.actor:position())
	
	self.object:direction()
	return true
end

--' Поворачиваемся ли мы сейчас
class "eva_state_mgr_direction_turning" (property_evaluator)
function eva_state_mgr_direction_turning:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_direction_turning:evaluate()
	printf("%s", utils.to_str(self.object:is_body_turning()))
	return false
end


--' Включаем поворот
class "act_state_mgr_direction_turn" (action_base)
function act_state_mgr_direction_turn:__init(name) super (nil, name)
end
function act_state_mgr_direction_turn:initialize()
	action_base.initialize(self)
end
function act_state_mgr_direction_turn:execute()
	action_base.execute(self)
end
function act_state_mgr_direction_turn:finalize()
	action_base.finalize(self)
end

--' Ожидание поворота
class "act_state_mgr_direction_wait" (action_base)
function act_state_mgr_direction_wait:__init(name) super (nil, name)
end
function act_state_mgr_direction_wait:initialize()
	action_base.initialize(self)
end
function act_state_mgr_direction_wait:execute()
	action_base.execute(self)
end
function act_state_mgr_direction_wait:finalize()
	action_base.finalize(self)
end
