-- Сбор информации о том, какие сталкеры и в каком количестве обитают в симуляции


-- Была ли произведена реинициализация после лоада.
local reinit_complete = false
local simulator = nil

class "simulation_statistic"
function simulation_statistic:__init()
	self.objects = {}
	self.allocation = {}
end
function simulation_statistic:add(npc)
--	local community, rank = self:getNpcType(npc)
--	self.objects[npc.id] = {community = community, rank = rank}
--	if self.allocation[community] == nil then
--		self.allocation[community] = {}
--	end
--	if self.allocation[community][rank] == nil then
--		self.allocation[community][rank] = 0
--	end
--	self.allocation[community][rank] = self.allocation[community][rank] + 1
end
function simulation_statistic:remove(npc)
--	local community, rank = self.objects[npc.id].community, self.objects[npc.id].rank
--	self.allocation[community][rank] = self.allocation[community][rank] - 1
--	self.objects[npc.id] = nil
end
function simulation_statistic:getNpcType(npc)
	if IsStalker(npc) then
		local community = "neutral"
		if npc:community() == "monolith" then
			community = "monolith"
		elseif npc:community() == "military" then
			community = "military"
		elseif npc:community() == "killer" then
			community = "killer"
		elseif npc:community() == "ecolog" then
			community = "ecolog"
		elseif npc:community() == "dolg" then
			community = "dolg"
		elseif npc:community() == "freedom" then
			community = "freedom"
		elseif npc:community() == "bandit" then
			community = "bandit"
		elseif npc:community() == "zombied" then
			community = "zombied"
		end
		
		local rank = "novice"
		if npc:rank() >= 90 then
			rank = "master"
		elseif npc:rank() >= 60 then
			rank = "veteran"
		elseif npc:rank() >= 30 then
			rank = "stalker"
		end
		return community, rank
	else
		local community = xr_statistic.monster_classes[get_clsid(npc)]
		if community == nil then
			abort("Statistic ERROR: cannot find monstr class for clsid[%s]", get_clsid(npc))
		end
		if community == "NIL" then
			return nil,nil
		end
		
		local rank = "weak"
		if npc:rank() >= 80 then
			rank = "strong"
		elseif npc:rank() >= 40 then
			rank = "normal"
		end
		return community, rank
	end	
end
function simulation_statistic:pstats(npc)
	printf("*** SIMULATION POPULATION STATISTIC ***")
	print_table(self.allocation)
end

-- На первом вызове апдейта снимаем флаг о том, что реинициализация уже произведена
function update()
	reinit_complete = false
end
-- Вызывать на регистре смарттеррейна
function reinit()
	if reinit_complete == false then
		simulator = nil
		reinit_complete = true
	end
end
-- Регистрация чувака
function add(npc)
	if simulator == nil then
		simulator = simulation_statistic()
	end
	simulator:add(npc)
end
-- Неригистрация
function remove(npc)
	if simulator == nil then
		return
	end
	simulator:remove(npc)
end


function pstats()
	if simulator == nil then
		return
	end
	simulator:pstats(npc)
end