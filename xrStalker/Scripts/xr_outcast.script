local walking		= 1
local play_anim		= 2

//states
local start 	 = 1
local anim_hello = 2
local say_hello  = 3
local talk_realy = 4
local end_talk 	 = 5
---------------------------------------------------------------------------------------------------------------------
-- Evaluators
---------------------------------------------------------------------------------------------------------------------

class "actor_near_evaluator" (property_evaluator)

function actor_near_evaluator:__init (name, storage) super (nil, name)
    self.a 		= storage
	self.result	= false
end

function actor_near_evaluator:evaluate()
    // ≈сли до этого актер был р€дом, то считаем с учетом большого рассто€ни€
	if(self.result) then
		self.result = (level.actor() ~= nil and distance_between(self.object, level.actor()) < 10)
	else
		self.result = (level.actor() ~= nil and distance_between(self.object, level.actor()) < 5)
	end
	
	return self.result
end


---------------------------------------------------------------------------------------------------------------------
-- Speak with actor
---------------------------------------------------------------------------------------------------------------------

class "speak_with_actor_action" (action_base)
function speak_with_actor_action:__init (name, storage, scenario) super (nil, name)
    self.st				= storage
	self.scenario		= scenario
	self.cur_command	= 3
	self.playing		= false
	self.state			= self.st.state
	self.talking		= 0						// »спользуетс€ дл€ разговора
	self.phrase			= nil
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:initialize ()
    action_base.initialize 	(self)
	
	self.state			= self.st.state
	self.object:set_movement_type		(move.stand)	
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:execute ()
	action_base.execute (self)
	
	if(self.state ~= -1) then
		self:fsm_work()
	else
		//  огда уже заскриптованных действий не осталось, просто смотрим на актера
		self.object:set_sight               (look.direction, level.actor():position():sub(self.object:position()), 0)
	end
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:fsm_work ()
    // устроен следующим образом. «адаетс€ команда, переход в следующее состо€ние, 
	// которое не начинает выпол€нтьс€, пока не закончитс€ предъидущее
	
	if(self.state == start) then
		// ѕоворачиваемс€ в сторону актера
		self.object:set_sight	(look.direction, level.actor():position():sub(self.object:position()), 0)	
		self:set_state(anim_hello)
	
	elseif(self.state == anim_hello) then
		// махаем рукой
		if(self:end_turning())then
			self.object:add_animation("hello_0_idle_0", true)
			self:set_state(say_hello)
		end
	
	elseif(self.state == say_hello) then
		// говорим приветствие
		if(self:end_animations()) then
			xr_sounds.play_sound(self.object, 0, "outcast", 1, 1, 1)
			self:set_state(talk_realy)
		end	
			
	elseif(self.state == talk_realy) then
		// –ассказуем рассказ
		if(self:end_sounds()) then
			self:talk("outcast", 1, 2, 3000)
			self.st.state	= -1						// «апоминаем, что уже сказали правду
			self:set_state(end_talk)
		end
	elseif(self.state == end_talk) then
		//  онец всех действий
		if(self:end_talk()) then
			self:set_state(-1)
		end
	end
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:talk(theme, sub_theme, number, start_time)
	self.theme		= theme
	self.sub_theme	= sub_theme
	self.number		= number
	self.start_time	= start_time
	self.object:add_animation("idle_0_idle_8_0", true)
	self.object:add_animation("idle_0_idle_8_talk", true)
	self.talking	= 1
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:end_talk()
    // ¬озвращает, закончили ли мы разговаривать. ≈сли еще нет, то следит за разговором
	if(self.talking == 0) then return true end
	
	if(self.talking == 1 and self.object:animation_count() == 1) then
		// √оворим фразу
		self.object:add_animation("idle_0_idle_8_talk", true)
		xr_sounds.play_sound(self.object, 1000, self.theme, self.sub_theme, self.number, 1)
		self.talking = 2
		self.time	 = device():time_global()
	
	elseif(self.talking == 2 and self.object:active_sound_count() ~= 0) then
		// ∆дем начало фразы
		self.talking = 3
		
	elseif(self.talking == 3) then
		// ƒоговариваем и возвращаемс€ в исходное положение
		if(self.object:active_sound_count() == 0) then
			self.object:clear_animations()
			self.object:add_animation("idle_0_idle_8_2", true)
			self.talking = 4
		elseif(self.object:animation_count() == 1) then
			// ≈ще не все сказали, продолжаем проигрывать анимацию
			self.object:add_animation("idle_0_idle_8_talk", true)
		end
	elseif(self.talking == 4 and self.object:animation_count() == 0) then
		// ¬ернулись в исходное положение, заканчиваем работу
		self.talking = 0
		return true
	end
	
	return false
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:end_turning()
	return (device():time_global() < self.time + 300 and yaw(self.object:direction(), level.actor():position():sub(self.object:position())) < 0.3) or
			// —казали поворачиватьс€, а угол маленький, поворачиватьс€ не будем
			(device():time_global() > self.time + 700 and self.object:is_body_turning() == false)
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:end_animations()
	return (self.object:animation_count() == 0)
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:end_sounds()
    return (self.object:active_sound_count() == 0)
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:set_state(new_state, work_time)
    // ”станавливаем новое состо€ние и запоминаем врем€
	if(work_time == nil) then work_time = 0 end
	self.state	= new_state
	self.time	= device():time_global() + work_time
end

---------------------------------------------------------------------------------------------------------------------

function speak_with_actor_action:finalize ()
    stop_play_sound			(self.object)
	action_base.finalize 	(self)
end

---------------------------------------------------------------------------------------------------------------------
-- main action
---------------------------------------------------------------------------------------------------------------------

class "action_outcast_walk" (action_base)
function action_outcast_walk:__init (name, storage) super (nil, name)
    self.st				= storage
	self.move_mgr		= move_mgr.move_mgr()
	self.state 			= walking
end
---------------------------------------------------------------------------------------------------------------------

function action_outcast_walk:initialize ()
    action_base.initialize 	(self)
	
	self.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	self.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	
	self.move_mgr:initialize(self.object)
	self:reset_scheme		()
end

---------------------------------------------------------------------------------------------------------------------

function action_outcast_walk:execute ()
    action_base.execute (self)
	
	if(self.state == walking) then
		self.move_mgr:update()
		self.object:set_mental_state(anim.free)
	elseif(self.state == play_anim) then
		if(self.object:animation_count() == 0) then
			self.state	= walking
			self.move_mgr:update_movement_state()
		end
	else
		utils.abort("Object '%s': script error: unknown state", self.object:name())
	end
	
end

---------------------------------------------------------------------------------------------------------------------

function action_outcast_walk:move_cb( mode, num )
	printf( "move callback num = %d", num )

	self.object:add_animation( random_choice( "idle_0_idle_0", "idle_0_idle_1",
					"idle_0_idle_3", "idle_0_idle_4", "idle_0_idle_6"), true )
	self.state = play_anim
	
	return true
end

---------------------------------------------------------------------------------------------------------------------

function action_outcast_walk:reset_scheme ()
	self.move_mgr:reset(self.st.path_walk, self.path_walk_info, self.st.path_look,
						 self.path_look_info, nil, {run = false, danger = false},  {obj=self, func=self.move_cb}
						)
end

---------------------------------------------------------------------------------------------------------------------

function action_outcast_walk:finalize ()
    action_base.finalize 		(self)
	self.move_mgr:finalize		()
    self.object:clear_animations()
end

----------------------------------------------------------------------------------------------------------------------
--scientist binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(obj, char_ini)

    if(char_ini and char_ini:section_exist("outcast") == false) then
		printf("not binding outcasta")				// for debug
		return
	end
	
	local storage		= xr_motivator.storage[obj:id()].outcast
	storage.path_walk	= utils.conf_get_string(char_ini, "outcast", "path_walk", nil, obj, true)
	storage.path_look	= utils.conf_get_string(char_ini, "outcast", "path_look", nil, obj, true)

	local operators     = {}
    local properties    = {}
	
	xr_motivator.storage[obj:id()].replics = {npc = obj}  
	
	properties["complete"]          = xr_evaluators_id.jon_outcast
	properties["replics"]			= xr_evaluators_id.jon_outcast_replics
	
    operators["outcast"]           	= xr_actions_id.jon_outcast
	operators["replics"]           	= xr_actions_id.jon_outcast_replics

    local manager  					= obj:motivation_action_manager ()
    manager:add_evaluator			(properties["complete"], const_evaluator(true))
	manager:add_evaluator			(properties["replics"], actor_near_evaluator("actor near", xr_motivator.storage[obj:id()].outcast))

    // –еплики
	local action 					= speak_with_actor_action("action_speak_with_actor", xr_motivator.storage[obj:id()].outcast, scenario1)
    //action:add_precondition         (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition         (world_property (properties["replics"],        	true))    
	action:add_effect				(world_property(properties["replics"], 			false))
	manager:add_action				(operators["replics"], action)

	// ’одьба
	action = action_outcast_walk ("action_outcast_walk", xr_motivator.storage[obj:id()].outcast)

    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    //action:add_precondition         (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition         (world_property (properties["replics"],        	false))    
	action:add_precondition         (world_property (properties["complete"],        true))
    action:add_effect               (world_property (properties["complete"],        false))
    manager:add_action              (operators["outcast"], action)

    action = manager:action         (xr_actions_id.alife)
    action:add_precondition         (world_property (properties["complete"],  false))
	
	// ”станавливаем ему сценарий
	xr_replics.set_scenario(obj, "outcast")
end 
