
local state_kamp = 0
local state_wave1 = 1
local state_wave2 = 2
local state_wave3 = 3
local state_wave4 = 4
local state_wave5 = 5
local state_wave6 = 6
local state_wave7 = 7
local state_kamp_end = 8

--local load_job_followers, load_job_monolith_base, load_job_dogs_nest1

local gulags = {}

function load_job(sj, gname, type, squad, groups)
--[[
    ------Stalkers-------------------------------------------------------
	if      type == "pri_followers"     then    load_job_followers      (sj, gname, type, squad, groups)
	elseif  type == "pri_monolith_base" then    load_job_monolith_base  (sj, gname, type, squad, groups)
    ------Monsters-------------------------------------------------------
    --- Dogs
	elseif  type == "pri_dogs_nest1"    then    load_job_dogs_nest1     (sj, gname, type, squad, groups)
	end
]]
    local g = gulags[type]
    if g then g[1](sj, gname, type, squad, groups) end
end

function f_predicate1(obj) 
	return obj:profile_name() == "stalker_veteran"
end

function f_predicate2(obj) 
    local t = obj:best_weapon()
    if t then
        printf("gulag <prip>: predicate f_predicate2. best_weapon(%s)", t:name())
	    return obj:profile_name() == "stalker_veteran" and string.sub(t:name(), 1, 8) == "wpn_rpg7" --and t and t:animation_slot() == "4"
	else
	    return false
	end
end

function load_job_followers(sj, gname, type, squad, groups)
	-----------------------------------------------------------------------
	-- À»ƒ≈– - œ–»Œ–»“≈“ 2,3
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_leader_wait",
		idle = 0,
		prior = 2, state = { state_kamp },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_leader_wave1",
		idle = 0,
		prior = 2, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_leader_wave2",
		idle = 0,
		prior = 2, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_leader_wave3",
		idle = 0,
		prior = 2, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_leader_wave4",
		idle = 0,
		prior = 2, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_leader_wave5",
		idle = 0,
		prior = 2, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_leader_wave6",
		idle = 0,
		prior = 2, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_leader_wave7",
		idle = 0,
		prior = 2, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: kamp_end
	t = { section = "logic@pri_followers_leader_wave8",
		idle = 0,
		prior = 2, state = { state_kamp_end },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- √–¿Õ¿“ŒÃ≈“◊»  - œ–»Œ–»“≈“ 3,2
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_bomber_kamp",
		idle = 0,
		prior = 3, state = { state_kamp },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_bomber_wave1",
		idle = 0,
		prior = 3, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_bomber_wave2",
		idle = 0,
		prior = 3, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_bomber_wave3",
		idle = 0,
		prior = 3, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_bomber_wave4",
		idle = 0,
		prior = 3, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_bomber_wave5",
		idle = 0,
		prior = 3, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_bomber_wave6",
		idle = 0,
		prior = 3, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_bomber_wave7",
		idle = 0,
		prior = 3, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: kamp_end
	t = { section = "logic@pri_followers_bomber_wave8",
		idle = 0,
		prior = 3, state = { state_kamp_end },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 1 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap1_kamp",
		idle = 0,
		prior = 1, state = { state_kamp },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap1_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap1_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap1_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap1_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap1_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap1_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap1_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: kamp_end
	t = { section = "logic@pri_followers_nap1_wave8",
		idle = 0,
		prior = 1, state = { state_kamp_end },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 2 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap2_kamp",
		idle = 0,
		prior = 1, state = { state_kamp },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap2_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap2_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap2_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap2_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap2_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap2_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap2_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: kamp_end
	t = { section = "logic@pri_followers_nap2_wave8",
		idle = 0,
		prior = 1, state = { state_kamp_end },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 3 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap3_kamp",
		idle = 0,
		prior = 1, state = { state_kamp },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap3_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap3_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap3_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap3_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap3_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap3_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap3_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: kamp_end
	t = { section = "logic@pri_followers_nap3_wave8",
		idle = 0,
		prior = 1, state = { state_kamp_end },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
end

function load_job_monolith_base(sj, gname, type, squad, groups)
end

--- Dogs
function load_job_dogs_nest1(sj, gname, type, squad, groups)
    local i = 0
    for i = 0, 10 do
        --- state 0
	    t = { section = "logic@pri_dogs_nest1", 
		    idle = 0,
		    prior = 5, state = {0}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = "pri_dogs_nest1_small_restr"
	    }
	    table.insert(sj, t)
        --- state 1
	    t = { section = "logic@pri_dogs_nest1", 
		    idle = 0,
		    prior = 5, state = {1}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = "pri_dogs_nest1_big_restr"
	    }
        table.insert(sj, t)
   end
end

--------------------------------------------------------------------------
function load_states(gname, type)
--[[
    --- Soldiers -------------------------------------------
	if type == "pri_followers"          then    return check_state_followers
	--- Monsters -------------------------------------------
	--- Dogs
	elseif type == "pri_dogs_nest1"     then    return check_state_dogs_nest1
	end
]]
    local g = gulags[type]
    if g then return g[2] end

	return nil
end
	    
function check_state_followers(gulag)
	local state = gulag.state
	local actor = db.actor
	if state == state_kamp and actor:has_info("pri_followers_start") then
		return state_wave1 --state_wave1
	end
	if state == state_wave1 and
		actor:has_info("pri_wave1_monolith1_dead") and
		actor:has_info("pri_wave1_monolith2_dead") and
		actor:has_info("pri_wave1_monolith3_dead") and
		actor:has_info("pri_wave1_monolith4_dead")
	then
		actor:give_info_portion("pri_wave1_end")
		return state_wave2
	end
	if state == state_wave2 and
		actor:has_info("pri_wave2_monolith1_dead") and
		actor:has_info("pri_wave2_monolith2_dead") and
		actor:has_info("pri_wave2_monolith3_dead") and
		actor:has_info("pri_wave2_monolith4_dead") and
		actor:has_info("pri_wave2_monolith5_dead") and
		actor:has_info("pri_wave2_monolith6_dead") and
		actor:has_info("pri_wave2_monolith7_dead") and
		actor:has_info("pri_wave2_monolith8_dead") and
		actor:has_info("pri_wave2_monolith9_dead")
	then
		actor:give_info_portion("pri_wave2_end")
		return state_wave3
	end
	if state == state_wave3 and actor:has_info("pri_wave3_btr_dead") then
		actor:give_info_portion("pri_wave3_end")
		return state_wave4
	end
	if state == state_wave4 and
		actor:has_info("pri_wave4_monolith1_dead") and
		actor:has_info("pri_wave4_monolith2_dead") and
		actor:has_info("pri_wave4_monolith3_dead") and
		actor:has_info("pri_wave4_monolith4_dead") and
		actor:has_info("pri_wave4_monolith5_dead") and
		actor:has_info("pri_wave4_monolith6_dead") and
		actor:has_info("pri_wave4_monolith7_dead") and
		actor:has_info("pri_wave4_monolith8_dead")
	then
		actor:give_info_portion("pri_wave4_end")
		return state_wave5
	end
	if state == state_wave5 and
		actor:has_info("pri_wave5_monolith1_dead") and
		actor:has_info("pri_wave5_monolith2_dead") and
		actor:has_info("pri_wave5_monolith3_dead") and
		actor:has_info("pri_wave5_monolith4_dead")
	then
		actor:give_info_portion("pri_wave5_end")
		return state_wave6
	end
	if state == state_wave6 and
		--actor:has_info("pri_wave6_monolith1_dead") and
		actor:has_info("pri_wave6_monolith2_dead") and
		actor:has_info("pri_wave6_monolith3_dead")
	then
		actor:give_info_portion("pri_wave6_end")
		return state_wave7
	end
	--if state == state_wave7 and
    --    actor:has_info("pri_wave7_monolith1_dead") and
    --    actor:has_info("pri_wave7_monolith2_dead") and
    --    actor:has_info("pri_wave7_monolith3_dead") and
    --    actor:has_info("pri_wave7_monolith4_dead") and
    --    actor:has_info("pri_wave7_monolith5_dead") and
    --    actor:has_info("pri_wave7_monolith6_dead") and
    --    actor:has_info("pri_wave7_monolith7_dead")
    --then
    --    actor:give_info_portion("pri_wave7_end")
    --    return state_kamp_end
    --end
    return state
end

function check_state_monolith_base(gulag)
    return 0
end

function check_state_dogs_nest1(gulag)
	local t = db.zone_by_name["pri_dogs_nest1_big_restr"] -- ËÏˇ ·ÓÎ¸¯Ó„Ó ÂÒÚ.
	if t and db.actor then
		if t:inside(db.actor:position()) then
			return 1
		else
			return 0
		end
	else
		return gulag.state
	end
end

--------------------------------------------------------------------------
function checkStalker(npc_community, gulag_type)
--[[
	if gulag_type == "pri_followers" then return npc_community == "stalker"
	end
]]
    local g = gulags[gulag_type]
    if g then return npc_community == g[3] end

	return false
end

function checkMonster(npc_community, gulag_type)
--[[
    if gulag_type == "pri_dogs_nest1" then return npc_community == "dog"
    end
]]
    local g = gulags[gulag_type]
    if g then return npc_community == g[3] end

    return false
end

--------------------------------------------------------------------------
gulags.pri_followers        = {load_job_followers,      check_state_followers,      "stalker"}
gulags.pri_monolith_base    = {load_job_monolith_base,  check_state_monolith_base,  "monolith"}
gulags.pri_dogs_nest1       = {load_job_dogs_nest1,     check_state_dogs_nest1,     "dog"}

--printf("gulag <pri>: table -")
--print_table(gulags)
