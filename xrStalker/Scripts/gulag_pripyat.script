
local state_wait = 0
local state_wave1 = 1
local state_wave2 = 2
local state_wave3 = 3
local state_wave4 = 4
local state_wave5 = 5
local state_wave6 = 6
local state_wave7 = 7
local state_wave8 = 8

local state_zombied_wait  = 0
local state_zombied_scene = 1
local state_zombied_fight = 2
local state_zombied_guard = 3

zombied_in_combat = {}

function is_zombied_in_combat()
    local k, v = 0, 0
    for k,v in zombied_in_combat do
        return true
    end
    return false
end

local gulags = {}

--------------------------------------------------------------------------
-- Predicates
--------------------------------------------------------------------------
function f_predicate1(obj)
	return obj:profile_name() == "pri_stalker_veteran"
end

function f_predicate2(obj)
    local t = obj:best_weapon()
    if t then
        --printf("gulag <prip>: predicate f_predicate2. best_weapon(%s)", t:name())
	    return obj:profile_name() == "pri_stalker_veteran" and string.sub(t:name(), 1, 8) == "wpn_rpg7" --and t and t:animation_slot() == "4"
	else
	    return false
	end
end

function f_predicate3(obj)
	return obj:clsid() == clsid.controller_s
end

function f_predicate4(obj)
    if obj:clsid() == clsid.script_stalker or obj:clsid() == clsid.stalker then
        local prof = obj:profile_name()
	    return prof == "pri_zombied" or prof == "pri_zombied_veteran"
	end
	return false
end

function f_predicate4_1(obj)
    if obj:clsid() == clsid.script_stalker or obj:clsid() == clsid.stalker then
        local prof = obj:profile_name()
	    return prof == "pri_soldier_suicide"
	end
	return false
end

function f_predicate5(obj)
	return obj:profile_name() == "pri_monolith_regular"
end

--------------------------------------------------------------------------
-- Jobs
--------------------------------------------------------------------------
function load_job(sj, gname, type, squad, groups)
    local g = gulags[type]
    if g then g[1](sj, gname, type, squad, groups) end
end

function load_job_followers(sj, gname, type, squad, groups)
--[[
    local i, j = 0, 0
    local followers = {"leader", "bomber", "nap1", "nap2", "nap3"}
    local states_str = {"wait", "wave1", "wave2", "wave3", "wave4", "wave5", "wave6", "wave7", "wave8"}
    local states = {state_wait, state_wave1, state_wave2, state_wave3, state_wave4, state_wave5, state_wave6, state_wave7, state_wave8}
    
    for i = 1, 5 do
	    t = { section = "logic@" .. gname .. "_" .. followers[i] .. "_wait",
		    idle = 0,
		    prior = 2, state = {state_wait},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = "",
		    predicate = f_predicate1
	    }
	    table.insert(sj, t)
        for j = 2, 9 do
	        t = { section = "logic@" .. gname .. "_" .. followers[i] .. "_" .. states_str[j],
		        idle = 0,
		        prior = 2, state = { states[j] },
		        squad = squad, group = groups[1],
		        in_rest = "", out_rest = "",
		        predicate = f_predicate1
	        }
	        table.insert(sj, t)
        end
    end
]]
	-----------------------------------------------------------------------
	-- À»ƒ≈– - œ–»Œ–»“≈“ 2,3
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_leader_wait",
		idle = 0,
		prior = 2, state = { state_wait },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_leader_wave1",
		idle = 0,
		prior = 2, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_leader_wave2",
		idle = 0,
		prior = 2, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_leader_wave3",
		idle = 0,
		prior = 2, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_leader_wave4",
		idle = 0,
		prior = 2, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_leader_wave5",
		idle = 0,
		prior = 2, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_leader_wave6",
		idle = 0,
		prior = 2, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_leader_wave7",
		idle = 0,
		prior = 2, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave8, priority: 3
	t = { section = "logic@pri_followers_leader_wave8",
		idle = 0,
		prior = 3, state = { state_wave8 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- √–¿Õ¿“ŒÃ≈“◊»  - œ–»Œ–»“≈“ 3
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_bomber_wait",
		idle = 0,
		prior = 3, state = { state_wait },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_bomber_wave1",
		idle = 0,
		prior = 3, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_bomber_wave2",
		idle = 0,
		prior = 3, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_bomber_wave3",
		idle = 0,
		prior = 3, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_bomber_wave4",
		idle = 0,
		prior = 3, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_bomber_wave5",
		idle = 0,
		prior = 3, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_bomber_wave6",
		idle = 0,
		prior = 3, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_bomber_wave7",
		idle = 0,
		prior = 3, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	--- state: wave8, priority: 2
	t = { section = "logic@pri_followers_bomber_wave8",
		idle = 0,
		prior = 2, state = { state_wave8 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate2
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 1 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap1_wait",
		idle = 0,
		prior = 1, state = { state_wait },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap1_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap1_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap1_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap1_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap1_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap1_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap1_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave8
	t = { section = "logic@pri_followers_nap1_wave8",
		idle = 0,
		prior = 1, state = { state_wave8 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 2 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap2_wait",
		idle = 0,
		prior = 1, state = { state_wait },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap2_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap2_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap2_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap2_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap2_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap2_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap2_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave8
	t = { section = "logic@pri_followers_nap2_wave8",
		idle = 0,
		prior = 1, state = { state_wave8 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	-----------------------------------------------------------------------
	-- Õ¿œ¿–Õ» 3 - œ–»Œ–»“≈“ 1
	-----------------------------------------------------------------------
	--- state: kamp
	t = { section = "logic@pri_followers_nap3_wait",
		idle = 0,
		prior = 1, state = { state_wait },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave1
	t = { section = "logic@pri_followers_nap3_wave1",
		idle = 0,
		prior = 1, state = { state_wave1 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave1_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave2
	t = { section = "logic@pri_followers_nap3_wave2",
		idle = 0,
		prior = 1, state = { state_wave2 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave2_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave3
	t = { section = "logic@pri_followers_nap3_wave3",
		idle = 0,
		prior = 1, state = { state_wave3 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave3_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave4
	t = { section = "logic@pri_followers_nap3_wave4",
		idle = 0,
		prior = 1, state = { state_wave4 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave4_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave5
	t = { section = "logic@pri_followers_nap3_wave5",
		idle = 0,
		prior = 1, state = { state_wave5 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave5_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave6
	t = { section = "logic@pri_followers_nap3_wave6",
		idle = 0,
		prior = 1, state = { state_wave6 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave6_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave7
	t = { section = "logic@pri_followers_nap3_wave7",
		idle = 0,
		prior = 1, state = { state_wave7 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
	--- state: wave8
	t = { section = "logic@pri_followers_nap3_wave8",
		idle = 0,
		prior = 1, state = { state_wave8 },
		squad = squad, group = groups[1],
		in_rest = "", out_rest = "pri_followers_wave7_out_restr",
		predicate = f_predicate1
	}
	table.insert(sj, t)
end

function load_job_ambush7(sj, gname, type, squad, groups)
    local i = 0
    for i = 1, 7 do
        --- state 0
	    t = { section = "logic@" .. gname .. "_monolith" .. i .. "_hide", 
		    idle = 0,
		    prior = 1, state = {0}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_out_restr"
	    }
	    table.insert(sj, t)
        --- state 1
	    t = { section = "logic@" .. gname .. "_monolith" .. i, 
		    idle = 0,
		    prior = 1, state = {1}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_out_restr"
	    }
        table.insert(sj, t)
    end
end

function load_job_zombied(sj, gname, type, squad, groups)
    local i, j = 0, 0
    local states_str = {"wait", "scene", "fight", "guard"}
    local states = {state_zombied_wait, state_zombied_scene, state_zombied_fight, state_zombied_guard}
    for i = 1, 3 do
--[[
        for j = 1, 4 do
	        t = { section = "logic@" .. gname .. "_controller" .. i .. "_" .. states_str[j], 
		        idle = 0,
		        prior = 1, state = {states[j]},
		        squad = squad, group = groups[1],
		        in_rest = "", out_rest = gname .. "_base_restr",
		        predicate = f_predicate3
	        }
	        table.insert(sj, t)
        end
]]
        --- state: wait
	    t = { section = "logic@" .. gname .. "_controller" .. i .. "_wait", 
		    idle = 0,
		    prior = 1, state = {state_zombied_wait},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate3
	    }
	    table.insert(sj, t)
        --- state: scene
	    t = { section = "logic@" .. gname .. "_controller" .. i .. "_scene", 
		    idle = 0,
		    prior = 1, state = {state_zombied_scene},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate3
	    }
        table.insert(sj, t)
        --- state: fight
	    t = { section = "logic@" .. gname .. "_controller" .. i .. "_fight", 
		    idle = 0,
		    prior = 1, state = {state_zombied_fight},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate3
	    }
        table.insert(sj, t)
        --- state: guard
	    t = { section = "logic@" .. gname .. "_controller" .. i .. "_guard", 
		    idle = 0,
		    prior = 1, state = {state_zombied_guard},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate3
	    }
        table.insert(sj, t)
    end

    for i = 1, 7 do
        --- state: wait
	    t = { section = "logic@" .. gname .. "_soldier" .. i .. "_wait", 
		    idle = 0,
		    prior = 1, state = {state_zombied_wait},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate4
	    }
	    table.insert(sj, t)
        --- state: scene
	    t = { section = "logic@" .. gname .. "_soldier" .. i .. "_scene", 
		    idle = 0,
		    prior = 1, state = {state_zombied_scene},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate4
	    }
        table.insert(sj, t)
        --- state: fight
	    t = { section = "logic@" .. gname .. "_soldier" .. i .. "_fight", 
		    idle = 0,
		    prior = 1, state = {state_zombied_fight},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = "",
		    predicate = f_predicate4
	    }
        table.insert(sj, t)
        --- state: guard
	    t = { section = "logic@" .. gname .. "_soldier" .. i .. "_guard", 
		    idle = 0,
		    prior = 1, state = {state_zombied_guard},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_base_restr",
		    predicate = f_predicate4
	    }
        table.insert(sj, t)
    end
end

function load_job_monolith(sj, gname, type, squad, groups)
    local i, j, v = 0, 0, 0
    for i = 1, 14 do
        --- state: main
	    t = { section = "logic@" .. gname .. "_soldier" .. i, 
		    idle = 0,
		    prior = 1, state = {0},
		    squad = squad, group = groups[1],
		    in_rest = "", out_rest = "",
		    predicate = f_predicate5
	    }
	    table.insert(sj, t)
	end
	for i, v in {3, 4, 4} do
	    for j = 1, v do
            --- state: main
	        t = { section = "logic@" .. gname .. "_kamp" .. i .. "_soldier" .. j, 
		        idle = 0,
		        prior = 1, state = {0},
		        squad = squad, group = groups[1],
		        in_rest = "", out_rest = "",
		        predicate = f_predicate5
	        }
	        table.insert(sj, t)
	    end
	end
end

--- Dogs
function load_job_dogs_nest1(sj, gname, type, squad, groups)
    local i = 0
    for i = 1, 10 do
        --- state 0
	    t = { section = "logic@pri_dogs_nest1", 
		    idle = 0,
		    prior = 1, state = {0}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = "pri_dogs_nest1_small_restr"
	    }
	    table.insert(sj, t)
        --- state 1
	    t = { section = "logic@pri_dogs_nest1", 
		    idle = 0,
		    prior = 1, state = {1}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = "pri_dogs_nest1_big_restr"
	    }
        table.insert(sj, t)
   end
end

function load_job_stadium(sj, gname, type, squad, groups)
    local i = 0
    for i = 1, 10 do
        --- state 0
	    t = { section = "logic@" .. gname .. "_gigant", -- .. i .. "_wait", 
		    idle = 0,
		    prior = 1, state = {0}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_small_restr"
	    }
	    table.insert(sj, t)
        --- state 1
	    t = { section = "logic@" .. gname .. "_gigant", -- .. i, 
		    idle = 0,
		    prior = 1, state = {1}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_kill_restr"
	    }
        table.insert(sj, t)
        --- state 2
	    t = { section = "logic@" .. gname .. "_gigant", -- .. i, 
		    idle = 0,
		    prior = 1, state = {2}, squad = squad, group = groups[1],
		    in_rest = "", out_rest = gname .. "_restr"
	    }
        table.insert(sj, t)
   end
end

--------------------------------------------------------------------------
-- States
--------------------------------------------------------------------------
function load_states(gname, type)
    local g = gulags[type]
    if g then return g[2] end

	return nil
end
	    
function check_state_followers(gulag)
	local state = gulag.state
	local actor = db.actor
	if state == state_wait and actor:has_info("pri_followers_start") then
		return state_wave1
	end
	if state == state_wave1 and
		actor:has_info("pri_wave1_monolith1_dead") and
		actor:has_info("pri_wave1_monolith2_dead") and
		actor:has_info("pri_wave1_monolith3_dead") and
		actor:has_info("pri_wave1_monolith4_dead")
	then
		actor:give_info_portion("pri_wave1_end")
		return state_wave2
	end
	if state == state_wave2 and
		actor:has_info("pri_wave2_monolith1_dead") and
		actor:has_info("pri_wave2_monolith2_dead") and
		actor:has_info("pri_wave2_monolith3_dead") and
		actor:has_info("pri_wave2_monolith4_dead") and
		actor:has_info("pri_wave2_monolith5_dead") and
		actor:has_info("pri_wave2_monolith6_dead") --and
		--actor:has_info("pri_wave2_monolith7_dead") and
		--actor:has_info("pri_wave2_monolith8_dead") and
		--actor:has_info("pri_wave2_monolith9_dead")
	then
		actor:give_info_portion("pri_wave2_end")
		return state_wave4 --3
	end
	if state == state_wave3 and actor:has_info("pri_wave3_btr_dead") then
		actor:give_info_portion("pri_wave3_end")
		return state_wave4
	end
	if state == state_wave4 and
		actor:has_info("pri_wave4_monolith1_dead") and
		actor:has_info("pri_wave4_monolith2_dead") and
		actor:has_info("pri_wave4_monolith3_dead") and
		actor:has_info("pri_wave4_monolith4_dead") and
		actor:has_info("pri_wave4_monolith5_dead") and
		actor:has_info("pri_wave4_monolith6_dead") and
		--actor:has_info("pri_wave4_monolith7_dead") and
		actor:has_info("pri_wave4_monolith8_dead")
	then
		actor:give_info_portion("pri_wave4_end")
		return state_wave5
	end
	if state == state_wave5 and
		actor:has_info("pri_wave5_monolith1_dead") and
		actor:has_info("pri_wave5_monolith2_dead") and
		actor:has_info("pri_wave5_monolith3_dead") and
		actor:has_info("pri_wave5_monolith4_dead")
	then
		actor:give_info_portion("pri_wave5_end")
		return state_wave6
	end
	if state == state_wave6 and
		--actor:has_info("pri_wave6_monolith1_dead") and
		actor:has_info("pri_wave6_monolith2_dead") and
		actor:has_info("pri_wave6_monolith3_dead")
	then
		actor:give_info_portion("pri_wave6_end")
		return state_wave7
	end
	if state == state_wave7 and
        xr_gulag.getGulagPopulation("pri_ambush7") == 0
    then
        actor:give_info_portion("pri_wave7_end")
        return state_wave8
    end
    return state
end

function check_state_ambush7(gulag)
	if db.actor:has_info("pri_wave7_start") then
        return 1
	end
	return gulag.state
end

function check_state_zombied(gulag)
	local state = gulag.state
	local actor = db.actor
    if actor:has_info("pri_zombied_scene_start") then
        if actor:dont_has_info("pri_zombied_scene_end") then
            return state_zombied_scene
        elseif is_zombied_in_combat() then --table.getn(zombied_in_combat) > 0 then
            if state_zombied_fight ~= state then
                printf("gulag <state>: pri_zombied - fight")
            end
            return state_zombied_fight
        else
            if state_zombied_guard ~= state then
                printf("gulag <state>: pri_zombied - guard")
            end
            return state_zombied_guard
        end
    end
    return state
end

function check_state_monolith(gulag)
    return 0
end

function check_state_dogs_nest1(gulag)
	local t = db.zone_by_name["pri_dogs_nest1_big_restr"] -- ËÏˇ ·ÓÎ¸¯Ó„Ó ÂÒÚ.
	if t and db.actor then
		if t:inside(db.actor:position()) then
			return 1
		else
			return 0
		end
	else
		return gulag.state
	end
end

function check_state_stadium(gulag)
	--local state = gulag.state
	local actor = db.actor
	if actor:has_info("pri_stadium_scene_start") then
	    if actor:has_info("pri_stadium_scene_end") then
	        return 2
	    else
	        return 1
	    end
	else
	    return 0
	end
end

--------------------------------------------------------------------------
-- Dynamic ltx
--------------------------------------------------------------------------
function load_ltx(gname, type)
    local g = gulags[type]
    if g then return g[4](gname, type) end

	return nil
end

function load_ltx_ambush7(gname, type)
    local i, res = 0, ""
    
    for i = 1, 7 do
        res = res.."[logic@" .. gname .. "_monolith" .. i .. "_hide]\n" ..
                   "active = walker@" .. gname .. "_monolith" .. i .. "_hide\n" ..
                   "combat_ignore = combat_ignore" ..

                   "[walker@" .. gname .. "_monolith" .. i .. "_hide]\n" ..
                   "path_walk = monolith" .. i .. "_hide_walk\n" ..
                   "path_look = monolith" .. i .. "_hide_look\n" ..
                   "combat_ignore_cond = always" ..

                   "[logic@" .. gname .. "_monolith" .. i .. "]\n" ..
                   "active = walker@" .. gname .. "_monolith" .. i .. "\n" ..

                   "[walker@" .. gname .. "_monolith" .. i .. "]\n" ..
                   "path_walk = monolith" .. i .. "_walk\n" ..
                   "path_look = monolith" .. i .. "_look\n"
    end
    return res
end

function load_ltx_monolith(gname, type)
    local i, res = 0, ""
    
    for i = 1, 20 do
        res = res.."[logic@" .. gname .. "_stalker" .. i .. "]\n" ..
                   "active = walker@" .. gname .. "_stalker" .. i .. "\n" ..

                   "[walker@" .. gname .. "_stalker" .. i .. "]\n" ..
                   "path_walk = patrol" .. i .. "_walk\n" ..
                   "path_look = patrol" .. i .. "_look\n"
    end
    return res
end

function load_ltx_dogs_nest1(gname, type)
    return "[logic@pri_dogs_nest1]\nactive = nil\n"
end

function load_ltx_stadium(gname, type)
    return ""
end

--------------------------------------------------------------------------
function checkStalker(npc_community, gulag_type)
    local g = gulags[gulag_type]
    if g then
        for i, v in pairs(g[3]) do
            if npc_community == v then
                return true
            end
        end
    end

	return false
end

function checkMonster(npc_community, gulag_type)
    local g = gulags[gulag_type]
    if g then
        for i, v in pairs(g[3]) do
            if npc_community == v then
                return true
            end
        end
    end

    return false
end

--------------------------------------------------------------------------
gulags.pri_followers    = {load_job_followers,  check_state_followers,  {"stalker"}}
gulags.pri_ambush7      = {load_job_ambush7,    check_state_ambush7,    {"monolith"},               load_ltx_ambush7}
gulags.pri_zombied      = {load_job_zombied,    check_state_zombied,    {"zombied", "military", "controller"}}
gulags.pri_monolith     = {load_job_monolith,   check_state_monolith,   {"monolith"},               load_ltx_monolith}
gulags.pri_dogs_nest1   = {load_job_dogs_nest1, check_state_dogs_nest1, {"dog"},                    load_ltx_dogs_nest1}
gulags.pri_stadium      = {load_job_stadium,    check_state_stadium,    {"pseudo_gigant"}} --,          load_ltx_stadium}

--printf("gulag <pri>: table -")
--print_table(gulags)
