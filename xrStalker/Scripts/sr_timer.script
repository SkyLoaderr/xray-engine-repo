----------------------------------------------------------------------------------------------------
-- Таймер с выводом изображения на экран.
----------------------------------------------------------------------------------------------------

local k,v = 0,0

class "action_timer"
function action_timer:__init(obj, storage)
	self.object = obj
	self.st = storage
end
function action_timer:update(delta)
	local actor = db.actor
	if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
		return
	end
	-- Высчитываем сколько времени уже работает счетчик
	local nn = time_global() - db.storage[self.object:id()].activation_time
	
	-- Изменяем значение счетчика
	local value_time = 0
	if self.st.type == "inc" then
		value_time = self.st.start_value + nn
	else
		value_time = self.st.start_value - nn
	end
	if value_time <= 0 then
		value_time = 0
	end
	-- Формируем строку счетчика
	local hours = math.floor(value_time/3600000)
	local minutes = math.floor(value_time/60000 - hours*60)
	local seconds = math.floor(value_time/1000 - hours*3600 - minutes*60)
	local str = tostring(hours)..":"..sr_timer.time2str(minutes)..":"..sr_timer.time2str(seconds)
	self.st.ui:CustomMessageOut(self.st.value_id, str, self.st.color)

	-- Определяем нужно ли куда то переходить.
--	if self.st.type == "dec" then
	for k,v in self.st.on_value do
		if value_time <= v.dist then
			if self.st.last_value[k] == nil then
				-- Обработка значения.
				xr_logic.switch_to_section(self.object, self.st, xr_logic.pick_section_from_condlist(db.actor, self.object, v.state))
			end
		end
	end
--	else
--	end
end
function action_timer:deactivate(delta)
	self.st.ui:RemoveCustomMessage(self.st.caption_id)
	self.st.ui:RemoveCustomMessage(self.st.value_id)
end

function time2str(n)
	if n >= 10 then
		return tostring(n)
	else
		return "0"..tostring(n)
	end
end
---------------------------------------------------------------------------------------------------------------------
function add_to_binder(obj, ini, scheme, section, storage)
	local action = action_timer(obj, storage)
	xr_logic.subscribe_action_for_events(obj, storage, action)
end
function set_scheme(obj, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	st.caption = utils.cfg_get_string( ini, section, "caption", obj, false, "", "")
	st.type = utils.cfg_get_string( ini, section, "type", obj, false, "", "inc")
	if st.type ~= "inc" and st.type ~= "dec" then
		abort("ERROR: wrong sr_timer type. Section [%s], Restrictor [%s]", section, obj:name())
	end
	
	if st.type == "dec" then
		st.start_value = utils.cfg_get_number(ini, section, "start_value", obj, true)
	else
		st.start_value = utils.cfg_get_number(ini, section, "start_value", obj, false, 0)
	end
	-- Вычитываем значения перехода.
	st.on_value = xr_meet.parse_data(obj, utils.cfg_get_string(ini, section, "on_value", obj, false, ""))
	st.last_value = {}
	-- DEBUG!!!
	st.start_value = 10*1000
	
	local argb = parse_names(utils.cfg_get_string( ini, section, "argb", obj, false, "", "255,255,40,0"))
	for k=1,4 do
		if argb[k] == nil then
			argb[k] = 0
		else
			argb[k] = tonumber(argb[k])
		end
	end
	st.color = GetARGB(argb[1],argb[2],argb[3],argb[4])
		
	st.ui = get_hud()
	st.font = GetFontDI()
	st.caption_id = tostring(obj:id()).."caption"
	st.ui:AddCustomMessage(st.caption_id,	900,15,30,	st.font, CGameFont.alRight, st.color)
	st.ui:CustomMessageOut(st.caption_id, st.caption, st.color)
	st.value_id = tostring(obj:id()).."value"
	st.ui:AddCustomMessage(st.value_id,		910,15,30, st.font, CGameFont.alLeft, st.color)
end