----------------------------------------------------------------------------------------------------------------------
--  ѕроверка условий разрешени€ или запрещени€ спавна
--  автор: ƒиденко –услан (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------

spawner = {}

function spawn(npc)
	local char_ini = npc:spawn_ini()
	local id = nil
	if char_ini:section_exist ("spawner") and
		char_ini:line_exist("spawner", "id")
	then
		id = char_ini:r_string("spawner", "id")
	end	
	if id ~= nil then
		printf("want spawn")
		if xr_spawner.spawner[id] == nil then
			xr_spawner.create_spawner(id)
		end
		xr_spawner.spawner[id]:addList(npc)
		xr_spawner.spawner[id]:check_spawn(npc.id)
	end	
	if char_ini:section_exist ("zone_spawner") then
	   zone_spawner.add_member (npc)
	end    
	if char_ini:section_exist ("escape_raid") then
	   escape_raid.add_member (npc)
	end    
	return true
end

function spawn_client(npc)
	local char_ini = npc:spawn_ini()
	local id = nil
	if char_ini:section_exist ("spawner") and
		char_ini:line_exist("spawner", "id")
	then
		id = char_ini:r_string("spawner", "id")
	end	
	if id ~= nil then
		if xr_spawner.spawner[id] == nil then
			xr_spawner.create_spawner(id)
		end
		local sim = alife()
		sobject = sim:object(npc:id())
		xr_spawner.spawner[id]:addList(sobject)
		xr_spawner.spawner[id]:check_spawn(npc:id())
	end	
	return true
end

class "object_spawner"
function object_spawner:__init(id)
	self.list = {}
	self.name = id
	self.rules = self:load_rules(id)
	self.timer = game.get_game_time()
	self.idle = 60
end
function object_spawner:check_spawn(npc_id)
	if self.rules(npc_id) == false then
		self:hide(npc_id)
	end
end
function object_spawner:addList(sobject)
	self.list[sobject.id] = { id = sobject.id, on = sobject:can_switch_online(), off = sobject:can_switch_offline(), int = sobject:interactive(), pos = sobject.position}
end
function object_spawner:restore(npc_id)
	local sim = alife()
	if sim == nil then return true end	
	sim:set_switch_online	(npc_id, self.list[npc_id].on)
	sim:set_switch_offline	(npc_id, self.list[npc_id].off)
	sim:set_interactive		(npc_id, self.list[npc_id].int)
end
function object_spawner:hide(npc_id)
	local sim = alife()
	if sim == nil then return true end
	sim:set_switch_online	(npc_id, false)
	sim:set_switch_offline	(npc_id, true)
	sim:set_interactive		(npc_id, false)
end
function object_spawner:update()	
	--printf("!!%s!! %s", self.name, game.get_game_time():diffSec(self.timer))
	if game.get_game_time():diffSec(self.timer) > self.idle then
		for k,v in self.list do
			if self.rules(k) == true then
				--' не забыть добавить условие, что персонаж должен быть далеко от актера
				local actor = level.actor()
				if actor == nil or
				   actor:position():distance_to_sqr(v.pos) > 10000
				then
					self:restore(k)
				end
			end
		end		
		self.timer = game.get_game_time()
	end
end
function object_spawner:destroy()	
	for k,v in self.list do
		self:restore(k)
		self.list[k] = nil
	end
end
function object_spawner:load_rules(id)
	if id == "test" then
		return function(obj)
			if level.get_time_hours() >= 8 and
			   level.get_time_hours() < 21 
			then
				return true
			else
				return false
			end
		end
	end
	if id == "day" then
		return function(obj)
			if level.get_time_hours() >= 9 and
			   level.get_time_hours() < 21 
			then
				return true
			else
				return false
			end
		end
	end
	if id == "night" then
		return function(obj)
			if level.get_time_hours() < 9 or
			   level.get_time_hours() >= 21 
			then
				return true
			else
				return false
			end
		end
	end
	if id == "bar_svoboda_sniper" then
		return function()
			return level.actor():has_info("bar_svoboda_sniper")
		end
	end
	if id == "bar_monolith_zasada" then
		return function()
			return level.actor():has_info("bar_monolith_zasada")
		end
	end
end

function create_spawner(id)
	if xr_spawner.spawner[id] == nil then
		xr_spawner.spawner[id] = xr_spawner.object_spawner(id)
		printf("create spawner")
		return true	
	end
	return false
end
function update(id)
	if xr_spawner.spawner[id] ~= nil then
		xr_spawner.spawner[id].update()
	end
end