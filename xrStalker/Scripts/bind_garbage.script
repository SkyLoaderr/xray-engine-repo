// Rush monsters

local counter = 0
local need_monsters = {}
------------------------------------------------------------------------------------
-- Check for monster present in need kill table
------------------------------------------------------------------------------------
function is_present (id)
    local size = table.getn (need_monsters)
    if size == 0 then return false end
    for a = 1, size, 1 do
        if need_monsters[a] == id then
           return true
        end
    end
    return false        
end
------------------------------------------------------------------------------------
-- Remove monster from table if present
------------------------------------------------------------------------------------
function remove (id)
    local size = table.getn (need_monsters)
    if size == 0 then return end
    for a = 1, size, 1 do
        if need_monsters[a] == id then
           table.remove (need_monsters, a)
           printf ("Monster with ID %d removed from need kill table", id)
           return
        end
    end
end            

------------------------------------------------------------------------------------
-- Rush monster class
------------------------------------------------------------------------------------
class "CRushMonster" (object_binder)
------------------------------------------------------------------------------------
function CRushMonster:__init(obj) super(obj)
    --need for single set callback's
    self.first_call = false 
end 
------------------------------------------------------------------------------------
function CRushMonster:reload(section)
	object_binder.reload(self, section)
	
	self.char_ini	= self.object:spawn_ini()
	
    -- get path name
    local path_name = utils.mob_get_string(self.char_ini, "gameplay", "path_walk", nil, self.object, true)
    
    -- check for need to kill
    if path_name == "garbage_rush_way2" or path_name == garbage_rush_way4 then
       if this.is_present (self.object:id ()) == false then
          table.insert (need_monsters, self.object:id ())
          printf ("Monster %s added to need kill table", self.object:name ())
       end    
    end
	-- standard
	self.rest_way	= patrol (path_name)
	self.end_work	= false
	self.actor_near = false
	self.freed		= false
end
------------------------------------------------------------------------------------
function CRushMonster:update(delta)
	object_binder.update(self, delta)
	
	-- end work ? 
	if self.end_work == true then return end
	
	if self:test_to_end_work () == false then return end
	
	// Если еще не взяли под скрипт, то берем
	if self.object:get_script() == false then
	   self.object:script (true, script_name ())
	end
	
	// Установим коллбэки всех видов и форм :)
	if self.first_call == false then
	   self.first_call = true 
	   self.object:set_death_callback (self, "death_callback")
       self.object:set_callback(self, "move_callback", game_object.movement)
    end   
	   
	
    self:set_action()
end
------------------------------------------------------------------------------------
function CRushMonster:move_callback (obj, action_type, index)
    -- check for end path and freed monster
    if index == -1 then return end
    local ptr = patrol (obj:patrol ())
    if ptr:flag (index, 0) then
	   if self.object:get_script() == true then
          self.object:script (false, script_name ())
	   end
	   self.end_work = true
	   xr_spawner.remove_from_list (self.object:id ())
	   local sim = alife()
	   if sim ~= nil then
		  sim:set_switch_online (self.object:id (), true)
		  sim:set_switch_offline (self.object:id (), true)
		  sim:set_interactive (self.object:id (), true)
	   end
    end
end
------------------------------------------------------------------------------------
function CRushMonster:set_action()
    -- set move on path
	if self.object:action () then return end
    action (self.object, move (move.run_fwd, self.rest_way), cond(cond.move_end))
    
end
------------------------------------------------------------------------------------
function CRushMonster:test_to_end_work()
	
	if self.object:alive () == true then 
       return true 
    end
	
	self.end_work = true
	return false
end
------------------------------------------------------------------------------------
function CRushMonster:death_callback (self, who)
    -- who dead ????!!!!
    if who == nil then return  end
    printf ("Monster %s killed", self:name ())
    -- remove from spawner 
    xr_spawner.remove_from_list (self:id ())
    -- get actor
    local act = level.actor ()
    -- no actor kill monster - simple remove
    if act == nil or act:id () ~= who:id () then 
       this.remove (self:id ()) 
       return 
    end
    printf ("Monster %s killed by actor", self:name ())
    -- if monster in kill table then update killed counter
    if this.is_present (self:id ()) == false then return end
    counter = counter + 1
    printf ("Monsters killed by actor %d", counter)
    this.remove (self:id ())
    -- check for set gulag to normal mode
    if table.getn (need_monsters) < 5 then
       -- set gulag to normal state
       if act:has_info ("gar_monsters_rush_wave1") then
          act:disable_info_portion ("gar_monsters_rush_wave1") 
          printf ("Return GULAG to start state")
       end   
    end
    if counter > 3 then
       printf ("Set relation") 
       xr_gulag.setGulagRelation ("gar_dolg", game_object.friend, act)
       printf ("Relation setted") 
    end    
end
------------------------------------------------------------------------------------
