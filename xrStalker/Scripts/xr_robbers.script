
plr_is_near = false
plr_stop_pos = nil
plr_num_bullets = nil
plr_hunt = false
approach_player_now = false
looking_at_actor = false

bandit1_ready = false
bandit2_ready = false
bandit3_ready = false

function action2(obj,...)
    local act = entity_action()
    local i = 1
    while true do
        if (arg[i] ~= nil) then
            act:set_action(arg[i])
        else
            break
        end
        i = i + 1
    end
    if (obj ~= nil) then
        obj:command(act,false)
    end
    return  entity_action(act)
end

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Константа
class "evaluator_need_robber" (property_evaluator)
function evaluator_need_robber:__init(storage) super ()
  self.a = storage
end
function evaluator_need_robber:evaluate ()
  local tt

  tt = self.a.enabled == true

      return tt
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обычное поведение
class "action_robber_activity" (action_base)
function action_robber_activity:__init (npc_name,action_name,storage) super (nil, action_name)
	--printf("_bp: action_robber_activity: __init")
	self.a = storage

	self.state_none = 0
	self.state_waiting_for_plr_to_come = 1 -- ждет игрока
	self.state_waiting_for_plr_to_stop = 2
	self.state_leader_shouting_stop = 3 -- кричит "не двигаться!"
	self.state_helper_shouting_stop = 4 -- помощник кричит то же самое
	self.state_leader_shouting_drop_your_weapon = 5 -- кричит "если хочешь жить, брось оружие!"
	self.state_wait_before_approach = 6
	self.state_approaching = 7 -- идет к игроку
	self.state_approached = 8
	self.state_anim_hit = 9 -- бьет игрока
	self.state_grab_money = 10 -- бьет игрока
	self.state_end = 11

	self.state = self.state_none

	self.leader = self.a.leader
	self.helper = self.a.helper
	printf("_bp: leader = %s", if_then_else(self.leader, "true", "false"))
	printf("_bp: helper = %s", if_then_else(self.leader, "true", "false"))
	self.teammate1 = self.a.teammate1
	self.teammate2 = self.a.teammate2
	self.path_rob = self.a.path_rob
end

function action_robber_activity:initialize()
	--printf("_bp: action_robber_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self.object:set_item(object.idle, self.object:best_weapon())
	self.object:set_detail_path_type(move.line)
	self.object:set_body_state(move.standing)
        self.object:set_movement_type(move.stand)
	--self.object:set_path_type(game_object.patrol_path)
	--self.object:set_patrol_path(self.path_active, patrol.start, patrol.continue, true)
	--self.object:set_mental_state(anim.free)
	--self.object:set_sight(look.search, nil, 0)
	self.object:set_sight(look.danger, nil, 0)

	self.patrol_rob = patrol(self.path_rob)
	local look_pt = xr_robbers.vector_copy_by_val(self.patrol_rob:point(0)):sub(self.object:position())
	self.object:set_sight(look.direction, look_pt, 0)

	self.state = self.state_waiting_for_plr_to_come
end

function action_robber_activity:execute()
	--printf("_debug_robber [%s]: state [%d], animation_count [%d]", self.object:name(), self.state,
	--self.object:animation_count())

	if not self.actor then
		self.actor = level.actor()
		if not self.actor then
			return
		end
	end

	if not self.actor:alive() then
		return
	end
	
	if this.looking_at_actor then
		local pos = self.actor:position()
		pos.y = pos.y + 0.8
		self.object:set_sight(look.fire_point, pos, 0)
	end
	
	if self.object.health < 1 then
		printf("AGRESSION")
		this.plr_hunt = true
	end

	local active_item = self.actor:active_item()
	if active_item and isWeapon(active_item:clsid()) then
		if this.plr_num_bullets and this.plr_num_bullets ~= active_item:get_ammo_in_magazine() then
			printf("AGRESSION2")
			this.plr_hunt = true
		end
	end
	
	if this.plr_hunt then
		if self.object:relation(self.actor) ~= game_object.enemy then
			self.object:set_relation(game_object.enemy, self.actor)
		end
		return
	end

	local pos = self.actor:position()
	local distance = pos:distance_to(self.patrol_rob:point(0))
	--printf("distance to corpse = %d", distance)
	
	if this.plr_is_near then
		if distance > 2 then
			if self.leader then
				self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
						xr_sounds_id.zmey_robber_will_shoot)
				this.plr_hunt = true
				return
			end
		elseif this.plr_stop_pos then
			if self.helper then
				if pos:distance_to(this.plr_stop_pos) >= 0.5 then
					self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
							xr_sounds_id.zmey_robber_will_kill)
					this.plr_stop_pos = nil
				end
			end
		end
	end	

	if self.state == self.state_waiting_for_plr_to_come then
		--printf("_debug_robber [%s]: adding animations", self.object:name())
		while self.object:animation_count() <= 1 do
			local animate = math.random(1, 10)
			if animate == 1 then
				self.object:add_animation("stoya_ruje_ 0", true)
			elseif animate == 2 then
				self.object:add_animation("vishka_3", false)
			elseif animate == 3 then
				self.object:add_animation("norm_torso_2_idle_1", false)
			elseif animate == 4 then
				self.object:add_animation("norm_torso_2_idle_2", true)
			elseif animate == 5 then
				self.object:add_animation("norm_torso_2_idle_3", false)
			elseif animate == 6 then
				self.object:add_animation("chasovoy_0", true)
			elseif animate == 7 then
				self.object:add_animation("chasovoy_1", true)
			elseif animate == 8 then
				self.object:add_animation("chasovoy_2", true)
			elseif animate == 9 then
				self.object:add_animation("chasovoy_3", true)
			elseif animate == 10 then
				self.object:add_animation("chasovoy_4", true)
			end
		end

		if distance <= 2 and self.leader then
			self.object:clear_animations()
			this.looking_at_actor = true
			self.expiration_time = device():time_global() + 2000
			printf("_bp: leader stay")
			self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
					xr_sounds_id.zmey_robber_stop)
				self.state = self.state_waiting_for_plr_to_stop
		elseif self.helper and this.plr_is_near then
			self.object:clear_animations()
			this.looking_at_actor = true
			printf("_bp: helper waits")
			self.expiration_time = device():time_global() + 1000
			self.state = self.state_leader_shouting_stop
		elseif not self.leader and not self.helper then
			self.object:clear_animations()
			this.looking_at_actor = true
			self.state = self.state_wait_before_approach
		end

	elseif self.state == self.state_waiting_for_plr_to_stop then
		if device():time_global() >= self.expiration_time then
			this.plr_is_near = true
			this.plr_stop_pos = self.actor:position()
			if active_item then
				this.plr_num_bullets = active_item:get_ammo_in_magazine()
			end
			self.expiration_time = device():time_global() + 2000
			self.state = self.state_leader_shouting_stop
		end
		
	elseif self.state == self.state_leader_shouting_stop then
		if device():time_global() >= self.expiration_time then
			if self.leader then
				printf("_bp: leader drop_weap")
				if not active_item or not isWeapon(active_item:clsid()) then
					self.expiration_time = device():time_global() + 0
				else
					self.expiration_time = device():time_global() + 2000
					self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
							xr_sounds_id.zmey_robber_drop_weap)
				end
				self.state = self.state_leader_shouting_drop_your_weapon
			elseif self.helper then
				printf("_bp: helper stay")
				self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
						xr_sounds_id.zmey_robber_do_not_move)
				self.state = self.state_wait_before_approach
			end
		end

	elseif self.state == self.state_leader_shouting_drop_your_weapon then
		if self.leader and device():time_global() >= self.expiration_time then
			if not active_item or not isWeapon(active_item:clsid()) then
				--self.object:play_sound(xr_sounds_id.zmey_robber_base, 1, 0, 1, 0,
				--		xr_sounds_id.zmey_robber_good)
				self.state = self.state_wait_before_approach
				this.approach_player_now = true
				this.looking_at_actor = false
			end
		end


	elseif self.state == self.state_wait_before_approach then
		if this.approach_player_now then
			if self.leader and self.object:best_weapon() then
				self.object:set_item(object.deactivate, self.object:best_weapon())
			end
			self.object:set_path_type(game_object.level_path)
			self.object:set_desired_direction(self.actor:direction())
			self.object:set_dest_level_vertex_id(self.actor:level_vertex_id())
			self.object:set_movement_type(move.run)
			self.state = self.state_approaching
		end

	elseif self.state == self.state_approaching then
		if self.object:position():distance_to(self.actor:position()) < 2 then
			this.looking_at_actor = true
			self.object:set_movement_type(move.stand)
			if self.leader then
				this.bandit1_ready = true
				
				self.state = self.state_anim_hit
			else
				if self.helper then
					this.bandit2_ready = true
				else
					this.bandit3_ready = true
				end
				self.state = self.state_approached
			end
		end

	elseif self.state == self.state_anim_hit then
		if self.leader and this.bandit1_ready and this.bandit2_ready and this.bandit3_ready then
			self.object:add_animation("udar_0", true)
			self.expiration_time = device():time_global() + 700
			self.state = self.state_grab_money
		end
	
	elseif self.state == self.state_grab_money then
		if self.leader and
			(device():time_global() >= self.expiration_time or self.object:animation_count() <= 0) then
			local h = hit()
			h.power = 1000
			h.direction:set(1, 0, 0)
			h.bone = "bip01_head"
			h.draftsman = self.object
			h.impulse = 10
			h.type = hit.wound
			self.actor:hit(h)

			self.state = self.state_end
		end
	end
end

function action_robber_activity:finalize()
	--printf("_bp: FINALIZE")
	self.object:clear_animations()

	if self.object.health < 1 then
		printf("AGRESSION")
		this.plr_hunt = true
	end

	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--Guard binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc)
	--printf("_bp: add_to_binder (robber)")
	local operators    = {}
	local properties  = {}

	-- FIXME: тут будет robber
	npc:add_sound([[script_replics\bandit_1\replics\bandit_ambush_]],
			20, snd_type.talk, 2, 1, xr_sounds_id.zmey_robber_base)

	local manager = npc:motivation_action_manager()

	properties["need_robber"]   = xr_evaluators_id.zmey_robber_base + 1
	operators["action_robber"]   = xr_actions_id.zmey_robber_base + 1

	-- // evaluators
	manager:add_evaluator (properties["need_robber"],   this.evaluator_need_robber  (xr_motivator.storage[npc:id()].robber))

	local new_action = this.action_robber_activity(npc, "action_robber_activity", xr_motivator.storage[npc:id()].robber)
	new_action:add_precondition    (world_property(stalker_ids.property_alive,   true))
	new_action:add_precondition    (world_property(stalker_ids.property_enemy,   false))
	new_action:add_precondition    (world_property(properties["need_robber"],   true))
	new_action:add_effect(world_property(properties["need_robber"], false))
	manager:add_action(operators["action_robber"], new_action)

	new_action = manager:action(stalker_ids.action_free_no_alife)
	new_action:add_precondition(world_property(properties["need_robber"], false))

	new_action = manager:action(stalker_ids.action_gather_items)
	new_action:add_precondition(world_property(properties["need_robber"], false))
end

-- функции
function vector_copy_by_val(vec)
	local newvec = vector()
	newvec.x = vec.x
	newvec.y = vec.y
	newvec.z = vec.z
	return newvec
end

