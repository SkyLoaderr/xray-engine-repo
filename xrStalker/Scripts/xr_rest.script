local operators		= {}
local properties	= {}
	
properties["rest"]             = xr_evaluators_id.sidor_rest      + 0
properties["food"]             = xr_evaluators_id.sidor_rest      + 1
properties["state"]            = xr_evaluators_id.state_change 
operators["action_rest"]       = xr_actions_id.sidor_act_rest     + 0


----------------------------------------------------------------------------------------------------------------------
class "evaluator_satiety" (property_evaluator)
----------------------
function evaluator_satiety:__init (treshold, name) super ()
    self.treshold = treshold
    self.value = false
end
----------------------
function evaluator_satiety:evaluate ()
    printf ("CURRENT SATIETY %f", self.object.satiety)
    if self.object.satiety < self.treshold then
       self.value = true
    end    
    if self.value == true then printf ("ZHRAT !!!") else printf ("NA PARASHU !!!") end
    return self.value
end
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
class "evaluator_food" (property_evaluator)
----------------------
function evaluator_food:__init (name) super ()
end
----------------------
function evaluator_food:evaluate ()
    if self.object:object ("bread") ~= nil or 
       self.object:object ("kolbasa") ~= nil or 
       self.object:object ("conserva") ~= nil or
       self.object:object ("vodka") ~= nil then
       printf ("FOOD PRESENT")
       return true
    end    
    printf ("NO FOOD")
    return false
end
----------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
class "action_sit_down" (action_base)
----------------------
function action_sit_down:__init (name) super (nil, name)
end
----------------------
function action_sit_down:initialize ()
    action_base.initialize (self)
    xr_state.change_state (self.object, 3)
end    
----------------------
function action_sit_down:execute ()
    action_base.execute (self)
    if xr_state.finish_state (self.object) == false then return end
    
end    
----------------------
function action_sit_down:finalize ()
    action_base.finalize (self)
end    

----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
class "action_rest" (action_base) 
----------------------
function action_rest:__init (name) super (nil, name)
    self.eat_enable = false
    self.drink_enable = false
    self.eat_object = nil
    self.drink_object = nil
    self.state = 0
    self.time_to_eat = 0
end
----------------------
function action_rest:initialize ()
    printf ("INITIALIZED !!!")
    action_base.initialize (self)
    
    if self.state == 0 then
       if xr_state.change_state (self.object, 3) == true then
          printf ("CHANGE STATE")  
          self.state = 1
          return
       end   
    end   
    
    self.eat_object = self.object:object ("bread")
    if self.eat_object == nil then
       self.eat_object = self.object:object ("kolbasa") 
       if self.eat_object == nil then
          self.eat_object = self.object:object ("conserva") 
       end
    end
    self.eat_enable = self.eat_object ~= nil
    self.drink_object = self.object:object ("vodka")
    self.drink_enable = self.drink_object ~= nil
    self.time_to_eat = device ():time_global () + 30000
end
----------------------
function action_rest:execute ()
    printf ("EXECUTED !!!")
    action_base.execute (self)
    if xr_state.change_state (self.object, 3) == true then return end
    
    if self.eat_enable == true then
       self.object:activate (self.eat_object)
       if device ():time_global () - self.time_to_eat < 0 then
          self.object:deactivate (self.eat_object)
          self.eat_enable = false
          self.time_to_eat = device ():time_global () + 20000
       end
       return
    else   
       self.object:deactivate (self.eat_object)
       self.eat_enable = false
       self.time_to_eat = device ():time_global () + 20000
    end
    
    if self.drink_enable == true then
       self.object:activate (self.drink_object)
       if device ():time_global () - self.time_to_eat < 0 then
          self.object:deactivate (self.drink_object)
          self.drink_enable = false
          self.time_to_eat = device ():time_global () + 20000
       end
       return
    else   
       self.object:deactivate (self.drink_object)
       self.drink_enable = false
       self.object:motivation_action_manager ():evaluator (properties["rest"]).value = false
    end
    
end
----------------------
function  action_rest:finalize ()
    action_base.finalize (self)
    printf ("FINALIZED !!!")
    if self.state == 0 then 
       self.state = 1 
       return
    end
    xr_state.change_state (self.object, 0)
end    
----------------------




----------------------------------------------------------------------------------------------------------------------
function add_to_binder (obj, property_id)

	local manager  = obj:motivation_action_manager ()

   	--local ini = obj:spawn_ini ()
   	--if ini == nil or ini:section_exist ("rest") == false or ini:line_exist ("rest", "satiety_threshold") == false then return end
    
    --local satiety = ini:r_u32 ("rest", "satiety_threshold")
   	
    manager:add_evaluator (properties["rest"], this.evaluator_satiety (0.2, "evaluator_satiety"))
    manager:add_evaluator (properties["food"], this.evaluator_food ("evaluator_food"))
    
    local action = this.action_rest ("action_rest")
    action:add_precondition     	(world_property (stalker_ids.property_alive,    true))
   	action:add_precondition     	(world_property (stalker_ids.property_enemy,    false))
   	action:add_precondition         (world_property (properties["food"],            true))
   	action:add_precondition         (world_property (properties["rest"],            true))
   	--action:add_precondition         (world_property (properties["state"],           true))
   	action:add_effect               (world_property (properties["rest"],            false))
   	manager:add_action              (operators["action_rest"], action)
   	     	   
    action = manager:action (property_id)
   	action:add_precondition (world_property (properties["rest"],  false))
    
end
----------------------------------------------------------------------------------------------------------------------
