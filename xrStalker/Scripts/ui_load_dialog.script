-- File:        UI_LOAD_DIALOG.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.5

function main()
	local dlg = ui_load_dialog.load_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
end

class "load_dialog" (ui_base_dialog.base_dialog)

function load_dialog:__init() super()
   self:SetFont(GetFontMedium()) --set base font for dialog.
   
   self:InitControls()
   self:InitCallBacks()
   self:FillList()
end

function load_dialog:__finalize()

end

function load_dialog:SetClGame  (game_cl)
   self.m_game_cl = game_cl
end

function load_dialog:FillList()

	local flist = getFS():file_list_open_ex("$game_saves$",FS.FS_ListFiles,"*.sav")
	local f_cnt = flist:Size()
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)			
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - 4))
		local date_time = "[" .. file:Modif() .. "]"
		--menu_item =  .. 
		self:AddItemToList(file_name, date_time)
	end
	
end

function load_dialog:InitControls()
	ui_base_dialog.base_dialog.InitControls(self, "Main Menu")
	
	----- DATA ----	
	local info_rect       = {x = 0, 
						     y = self.top_align_indent,
						     width = 128, 
						     height = 300}
	info_rect.x = self.right_align_x - info_rect.width
	local btn_load_rect   = {x = self.left_align_x,
							 y = 0,
							 width  = self.btn_rect.width,
							 height = self.btn_rect.height}
	btn_load_rect.y = self.bottom_align_y - btn_load_rect.height
	local btn_back_rect   = {x = btn_load_rect.x + btn_load_rect.width + self.indent,
							 y = btn_load_rect.y,
							 height = btn_load_rect.height,
							 width  = btn_load_rect.width}
	local list_rect       = {x = self.left_align_x,
						     y = self.top_align_y,
						     width = 0,
						     height = 0}
	list_rect.width  = self.main_rect.width  - self.indent*3 - info_rect.width
	list_rect.height = self.main_rect.height - self.indent*2 - list_rect.y - btn_load_rect.height	
	
	----- CODE -------
	
	-- INFO box --
	local frame_info = CUIFrameWindow() 
    frame_info:SetAutoDelete(true)
    frame_info:Init("ui\\ui_frame_very_small", info_rect.x, info_rect.y, info_rect.width, info_rect.height)
    self.main_frame:AttachChild(frame_info)	

	------------LIST-----------------
    local txt_list   = CUIFrameWindow()  --background for ListView
    txt_list:SetAutoDelete(true)
    txt_list:Init("ui\\ui_pop_up", list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    self.main_frame:AttachChild(txt_list) 

    local list_wnd = CUIListWndEx()
    list_wnd:SetAutoDelete(true)
    list_wnd:SetWindowName("list_window")
    list_wnd:Init(list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    list_wnd:SetItemHeight(25)
    list_wnd:EnableScrollBar(true)
    self.main_frame:AttachChild(list_wnd)

--------------------------------------- 
    local btn   = CUIButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_ok") 
	btn:Init("ui\\ui_button_01",btn_load_rect.x, btn_load_rect.y, btn_load_rect.width, btn_load_rect.height)
    btn:SetText("OK")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter) 
	btn:SetTextY(self.button_indent) 
	self:Register(btn) --for event-handling
	self.main_frame:AttachChild(btn)
--------------------------------------
    btn   = CUIButton()
    btn:SetAutoDelete(true)
    btn:SetWindowName("button_cancel")	
	btn:Init("ui\\ui_button_01",btn_back_rect.x, btn_back_rect.y, btn_back_rect.width, btn_back_rect.height) 	
	btn:SetText("cancel")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)
end

function load_dialog:InitCallBacks()
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED,             self,"OnButton_ok_clicked")
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED,             self,"OnButton_cancel_clicked")
	self:AddCallback("message_box",   ui_events.MESSAGE_BOX_OK_CLICKED,     self,"OnMsgOk")
	self:AddCallback("message_box",   ui_events.MESSAGE_BOX_CANCEL_CLICKED, self,"OnMsgCancel")
	self:AddCallback("message_box",   ui_events.MESSAGE_BOX_YES_CLICKED,    self,"OnMsgYes")
	self:AddCallback("message_box",   ui_events.MESSAGE_BOX_NO_CLICKED,     self,"OnMsgNo")
end

function load_dialog:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnButton_ok_clicked()		
	
end

function load_dialog:OnButton_cancel_clicked()
	level.start_stop_menu(self,true)
end

function load_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
     
   DIK_RETURN = 28
   WINDOW_KEY_PRESSED = 6
   
   local bind = dik_to_bind(dik)
   if bind == key_bindings.kQUIT then
      level.start_stop_menu(self,true)
   end  
   
   if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
	self:OnButton_ok_clicked()
   end
   
   return true
end

function load_dialog:AddItemToList(file_name, date_time)
	local new_item = CUIListItemPair()
	
	new_item:SetTextFileName(file_name)
	new_item:SetTextDateTime(date_time)
	
	--new_item:SetText(file_name)
	
	
	local list_box = self:GetListWnd("list_window")
	
	list_box:AddItem(new_item)
	
end



