-- File:        UI_LOAD_DIALOG.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.5

function main()
	local dlg = ui_load_dialog.load_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
end

class "load_dialog" (CUIScriptWnd)

function load_dialog:__init() super()
   self:InitControls()
   self:InitCallBacks()
   self:FillList()
end

function load_dialog:__finalize()

end

function load_dialog:FillList()

	local f = getFS()
	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.sav")
	local f_cnt = flist:Size()
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)			
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - 4))
		local date_time = "[" .. file:Modif() .. "]"
		--menu_item =  .. 
		self:AddItemToList(file_name, date_time)
	end
	
end

function load_dialog:InitControls()
--[[	ui_base_dialog.base_dialog.InitControls(self, "Load Game")
	
	----- DATA ----	
	local info_rect       = {x = self.left_align_x/2, 
						     y = self.top_align_y,
						     width = 148, 
						     height = 148}
	local pict_rect       = {x = info_rect.x + 58,
							 y = info_rect.y + 16,
							 width = 128,
							 height = 128}
								 
	local list_rect_f     = {x = self.indent*2,
						     y = info_rect.y + info_rect.height + self.indent,
						     width = 0,
						     height = 0}
	list_rect_f.width  = self.main_rect.width  - self.indent*2*2 
	list_rect_f.height = self.main_rect.height - self.indent*2 - list_rect_f.y 
	
	local list_ind = 10
	local list_rect       = {x = list_rect_f.x + list_ind,
							 y = list_rect_f.y + list_ind,
							 width = list_rect_f.width - list_ind*2,
							 height = list_rect_f.height - list_ind*2}
							 
	]]
	
	self:Init(0,0,1024,768)
	
	self.list_file_font = GetFontMedium()
	self.list_date_font = GetFontMedium()
	
	local xml = CScriptXmlInit()
	local ctrl
	xml:ParseFile("ui_mm_load_dlg.xml")
	
	local st = xml:InitStatic("back_video", self)
	math.randomseed(time_global())
	local vid_file ="ui\\ui_vid_back_0" .. math.random(1,4)
	st:InitTexture(vid_file)
	
	xml:InitStatic("background",				self)	

	self.form = xml:InitStatic("form",			self)
	
	xml:InitStatic("form:caption",				self.form)
	
	ctrl = xml:InitStatic("form:picture",		self.form)
	ctrl:SetWindowName("static_pict")	
	
	xml:InitStatic("form:file_info",			self.form)
	
	xml:InitFrame("form:list_frame",			self.form)

	ctrl = xml:InitList("form:list", 			self.form)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")
		
	ctrl = xml:Init3tButton("form:btn_load",	self.form)	
	self:Register(ctrl, "button_load")
	
	ctrl = xml:Init3tButton("form:btn_delete",	self.form)	
	self:Register(ctrl, "button_del")
	
	ctrl = xml:Init3tButton("form:btn_cancel",	self.form)
	self:Register(ctrl, "button_back")	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
	
--[[
	----- CODE -------
	self.bkg:InitTexture("ui\\ui_static_mm_back_02")	
	self.main_frame:SetWndPos(415,168)
	
	-- INFO box --
	
	local pict_info = CUIStatic() 
    pict_info:SetAutoDelete(true)
	pict_info:SetWindowName("static_pict")
    pict_info:Init(pict_rect.x, pict_rect.y, pict_rect.width, pict_rect.height)
	self.main_frame:AttachChild(pict_info)
	
	local frame_info = CUIStatic() 
    frame_info:SetAutoDelete(true)
    frame_info:Init("ui\\ui_static_loadgameinfo", info_rect.x, info_rect.y, info_rect.width, info_rect.height)
	self.main_frame:AttachChild(frame_info)			

	------------LIST-----------------
    local txt_list   = CUIFrameWindow()  --background for ListView
    txt_list:SetAutoDelete(true)
    txt_list:Init(self.texture_list_frame, list_rect_f.x, list_rect_f.y, list_rect_f.width, list_rect_f.height)
    self.main_frame:AttachChild(txt_list) 

    local list_wnd = CUIListWnd()
    list_wnd:SetAutoDelete(true)
    list_wnd:SetWindowName("list_window")
	list_wnd:SetItemHeight(20)
    list_wnd:Init(list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    list_wnd:EnableScrollBar(true)
	list_wnd:ShowSelectedItem(true)
	self:Register(list_wnd)
    self.main_frame:AttachChild(list_wnd)

	-----> BUTTONS
	--- LOAD
    local btn   = CUI3tButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_load") 
	btn:Init(self.btn_left.texture,self.btn_left.x, self.btn_left.y, self.btn_left.width, self.btn_left.height)
    btn:SetText("Load")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter) 
	btn:SetTextY(self.button_indent) 
	self:Register(btn) --for event-handling
	self.main_frame:AttachChild(btn)
	
	--- DELETE
    btn   = CUI3tButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_del") 
	btn:Init(self.btn_center.texture, self.btn_center.x, self.btn_center.y, self.btn_center.width, self.btn_center.height)
    btn:SetText("Delete")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter) 
	btn:SetTextY(self.button_indent) 
	btn:Enable(false)
	self:Register(btn) --for event-handling
	self.main_frame:AttachChild(btn)
	
	--- BACK
    btn   = CUI3tButton()
    btn:SetAutoDelete(true)
    btn:SetWindowName("button_back")	
	btn:Init(self.btn_right.texture,self.btn_right.x, self.btn_right.y, self.btn_right.width, self.btn_right.height) 	
	btn:SetText("Back")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)
	
	]]
end

function load_dialog:InitCallBacks()
	self:AddCallback("button_load",		ui_events.BUTTON_CLICKED,             self.OnButton_load_clicked,	self)
	self:AddCallback("button_back",		ui_events.BUTTON_CLICKED,             self.OnButton_back_clicked,	self)
	self:AddCallback("button_del",		ui_events.BUTTON_CLICKED,             self.OnButton_del_clicked,	self)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,     self.OnMsgOk,					self)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_CANCEL_CLICKED, self.OnMsgCancel,				self)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_YES_CLICKED,    self.OnMsgYes,				self)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_NO_CLICKED,     self.OnMsgNo,					self)
	// list box click
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self)
end

function load_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	local picture  = self:GetStatic("static_pict")	
	local item = list_box:GetItem(list_box:GetFocusedItem())
	
	local item_text = item:GetText()
	
--	local f = getFS();
--	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly) , item_text .. ".dds")
--	local f_cnt = flist:Size()
	
	if file_exist(item_text .. ".dds") then
		picture:InitTexture(item_text)
	else
		picture:InitTexture("ui\\ui_no_screenshot")
	end
		
end

function file_exist(fname)
	local f = getFS();
	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly) , fname)
	local f_cnt = flist:Size()
	
	if f_cnt > 0 then
		return true
	else
		return false
	end	
end

function load_dialog:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function load_dialog:OnButton_load_clicked()	
	local console = get_console()
	local list = self:GetListWnd("list_window")	
	local index = list:GetSelectedItem()
	
	if index == -1 then return end
		
	local item  = list:GetItem(index)
	local fname = item:GetText()
	
	console:execute("main_menu off")
	console:execute("disconnect")	
	console:execute("start server(" .. fname .. "/single/alife/load) client(localhost)")	
end

function load_dialog:OnButton_back_clicked()
	self:GetHolder():start_stop_menu(self,true)
	self.owner:Show(true)
end

function load_dialog:OnButton_del_clicked()
	local list = self:GetListWnd("list_window")	
	local index = list:GetSelectedItem()
	
	if index == -1 then return end
		
	local item  = list:GetItem(index)
	local fname = item:GetText()
	local save_file = fname .. ".sav"
	local dds_file = fname .. ".dds"
	
	local f = getFS()
	
	f:file_delete("$game_saves$",save_file)
	
	if file_exist(dds_file) then
		f:file_delete("$game_saves$", dds_file)
	end
	
	list:RemoveItem(index)

end

function load_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   ui_base_dialog.base_dialog.OnKeyboard(self,dik,keyboard_action)
	
	DIK_RETURN = 28
	WINDOW_KEY_PRESSED = 6
	
	if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
		self:GetHolder():start_stop_menu(self,true)
		self.owner:Show(true)
	end
   
	return true
end

function load_dialog:AddItemToList(file_name, date_time)
	local new_item = CUIListItemPair()
	
	new_item:SetTextFileName(file_name)
	new_item:SetTextDateTime(date_time)
	new_item:SetFontFileName(self.list_file_font)
	new_item:SetFontDateTime(self.list_date_font)
	
	--new_item:SetText(file_name)
	
	
	local list_box = self:GetListWnd("list_window")
	
	list_box:AddItem(new_item)
	
end



