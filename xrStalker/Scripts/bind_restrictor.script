--[[------------------------------------------------------------------------------------------------
Space restrictor binder
Чугай Саша

Примечания:
	- обновлений у рестрикторов нету, поэтому для тех, кому надо, актёр вызывает искусственно на своём обновлении
	- callbacks вызывается только на актёра
--------------------------------------------------------------------------------------------------]]

local updatable_binders = {}    -- биндеры, которые требуют обновлений (update)

function actor_update()
	for i, v in updatable_binders do
		v:actor_update()
	end
end

function bind( obj )
	db.storage[obj:id()] = { }

	obj:bind_object( restrictor_binder( obj ) )
end

----------------------------------------------------------------------------------------------------
class "restrictor_binder" ( object_binder )

function restrictor_binder:__init(obj, char_ini) super(obj)
	self.initialized = false
	self.loaded = false
	
	xr_logic.load_generic_schemes(obj, modules.stype_restrictor)
end

function restrictor_binder:reload(section)
	object_binder.reload(self, section)
end

function restrictor_binder:reinit()
	object_binder.reinit(self)

	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
end

function restrictor_binder:net_spawn(data)
	if not object_binder.net_spawn( self,data ) then
		return false
	end

	db.add_zone( self.object )

	if need_update then
		updatable_binders[self.object:id()] = self
	end

	return true
end

function restrictor_binder:net_destroy()
	db.del_zone( self.object )

	updatable_binders[self.object:id()] = nil

	object_binder.net_destroy(self)
end

-- вызывается из обновления актёра!
function restrictor_binder:actor_update()
	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_restrictor)
	end

	if self.st.active_section ~= nil then
		xr_logic.non_goap_update_actions_event(self.object, self.st[self.st.active_scheme])
	end
end

function restrictor_binder:net_save_relevant()
	return true
end

function restrictor_binder:save(packet)
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function restrictor_binder:load(reader)
	self.loaded = true

	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end
