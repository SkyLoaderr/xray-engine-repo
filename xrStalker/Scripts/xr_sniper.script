local distance_to_enemy		= 15

local time_to_rest			= 15000              --Время отдыха
local time_to_look			= 10000              --Сколько времени смотрим, когда останавливаемся в idle
local time_walk_near_mnstr	= 40000              --Видит монстра, но на него не реагирует, после этого времени начинает стрелять в монстра
local time_to_camper		= 20000              --Сколько времени сидим в укрытии и ждем
local time_camper_look		= 7000              --Сколько приглядываемся, когда кемперим и ползем по маршруту


---------------------------------------------------------------------------------------------------------------------
-- Evaluators
---------------------------------------------------------------------------------------------------------------------

--Включена ли схема. Еще в этом евалуаторе вычисляется видимые враги и монстры
class "enabled_evaluator_new" (property_evaluator)

function enabled_evaluator_new:__init (name, storage) super ()
    self.a = storage
end

function enabled_evaluator_new:evaluate()
    return  self.a.enabled
end

---------------------------------------------------------------------------------------------------------------------

--Видим ли монстра рядом
class "monster_evaluator" (property_evaluator)
function monster_evaluator:__init (name, storage) super ()
    self.a       = storage
    self.monster   = nil
    self.enabled    = false          --Реагируем ли мы на данного монстра
    self.look_time  = 0
end

function monster_evaluator:evaluate()
  if(object_type(self.object:best_enemy()) == "monstr") then
      if(self.object:see(self.object:best_enemy())) then
          return true
        end
    end
    return false
end
---------------------------------------------------------------------------------------------------------------------

--Видим ли врага
class "see_enemy_evaluator" (property_evaluator)
function see_enemy_evaluator:__init (name, storage) super ()
    self.a       = storage
    self.time	 = device():time_global()
end

function see_enemy_evaluator:evaluate()
    if(object_type(self.object:best_enemy()) == "stalker") then
        if(self.object:see(self.object:best_enemy())) then
            self.time = device():time_global()
            return true
        else
			if(device():time_global() < self.time + 4000) then
				//'Недавно видели, теперь не видим
				return true
			end
        end
    end
    return false
end
---------------------------------------------------------------------------------------------------------------------

--Находится ли враг ближе некоторого расстояния
class "enemy_near_evaluator" (property_evaluator)
function enemy_near_evaluator:__init (name, storage) super ()
    self.a = storage
end

function enemy_near_evaluator:evaluate()
    if(self.a.enabled == false) then  return true  end
    return( self.object:best_enemy() ~= nil and distance_between(self.object, self.object:best_enemy()) < distance_to_enemy )
end
---------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
-- Action sniper_idle
---------------------------------------------------------------------------------------------------------------------
local sit_idle    = 1
local LOOK      = 2
local walk      = 3

class "action_sniper_idle" (action_base)
function action_sniper_idle:__init (name, storage) super (nil, name)
    self.a			= storage
    self.state		= sit_idle
    self.animation	= nil
    self.time		= 0
    self.time_sight	= 0                --Используется при остановке

end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:initialize ()
    local path		= patrol(self.a.rest_path)
    self.last_point	= path:level_vertex_id  (path:count() - 1)      --Последняя точка пути
    self.point_path = patrol(self.a.point_path)
    self.rest_point	= point_with_bit_id(self.point_path, 0)  --Точка, в которой будем сидеть
	//printf("rest point __________%d", self.rest_point)
    self.prev_point = -1

    action_base.initialize (self)

    self.animation      = xr_state.anims(self.object)

    --Если до этого не сидели, то будем сидет, в противном случае будем ходить
    if(self.state == sit_idle) then
        self:init_state_sit_down()
    else
        self:init_state_walk()
    end 
    
     self.object:set_callback (self, "move_callback", game_object.movement)
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:init_state_sit_down  ()
    if( self.object:level_vertex_id() ~= self.rest_point ) then
		//printf("rest point __________%d", self.rest_point)
		self.object:set_dest_level_vertex_id(self.rest_point)
		self.object:set_body_state			(move.standing)
        self.object:set_movement_type		(move.walk)
        self.object:set_path_type			(game_object.level_path)
		self.object:set_detail_path_type	(move.line)
        self.object:set_sight               (look.danger, nil, 0)
        self.object:set_item                (object.activate, self.object:best_weapon())
        self.object:set_desired_direction	(point_with_bit(self.point_path, 2):sub(level.vertex_position(self.rest_point)) )
    end

    self.object:set_mental_state            (anim.free)

    self.time    = 0
    self.state      = sit_idle
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:init_state_walk()
    self.state      = walk
    self.time       = 0

    if(xr_state.change_state(self.object, 0)) then  return true  end    --Если будем менять положение тела, то больше ничего не делаем

    self.object:set_mental_state        (anim.free)
    self.object:set_body_state			(move.standing)
    self.object:set_detail_path_type    (move.line)
    self.object:set_path_type           (game_object.patrol_path)
    self.object:set_patrol_path			(self.a.rest_path, patrol.start, patrol.continue, true)
    self.object:set_movement_type       (move.walk)
    self.object:set_sight				(look.path_dir, nil, 0)

    self.object:set_item				(object.activate, self.object:best_weapon())


end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:state_sit_down    ()
  --Подходит с точки сидения, садится, а потом проигруется idle анимация
    if(self.object:level_vertex_id() == self.rest_point) then

        self.object:set_movement_type	(move.stand)

		if(xr_state.change_state(self.object, 2) == false) then
			//self.animation:update		("idle")
            if(self.time == 0) then
				--Запоминаем время, когда присели
				self.time = device():time_global()
            end

            if( self.time ~= 0 and device():time_global() > (self.time + time_to_rest) and self.object:animation_count() <= 1 )then
				--Когда насиделись, встаем и идем
				//self.animation:update (nil)
				self:init_state_walk	()
				end
		else
			--Когда садимся, убераем оружие
			self.object:set_item            (object.deactivate, self.object:best_weapon())
		end

    end
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:state_walk      ()
  --Идем до конца маршрута, если остановились, то стоим некоторое время, а потом идем
    if(self.state == LOOK) then
        if(device():time_global() > self.time_sight and self.object:is_body_turning() == false) then
            self.object:set_mental_state      (anim.danger)   --Целимся
        end
        if(device():time_global() > self.time) then         --Начинаем идти
            self.object:set_path_type           (game_object.patrol_path)
            self.object:set_patrol_path         (self.a.rest_path, patrol.nearest, patrol.continue, true)
            self.object:set_movement_type       (move.walk)
			self.object:set_body_state			(move.standing)
            self.object:set_sight               (look.path_dir, nil, 0)
            self.object:set_mental_state        (anim.free)
            self.state  = walk
        end
    end


--  if(self.object:level_vertex_id() == self.last_point) then
--      self:init_state_sit_down  ()
--    end
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:execute       ()
    action_base.execute             (self)

    if(self.state == sit_idle) then
        self:state_sit_down		()
    else
        self:state_walk			()
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:move_callback(obj, action_type, index)
    if(index == patrol(self.a.rest_path):count() - 1)then          --Дошли до последней точки пути
      self:init_state_sit_down  ()
      return
    end

    if(index == self.prev_point) then return end

    self.object:set_movement_type	(move.stand)
	self.object:set_body_state		(move.standing)
    self.object:set_sight			(look.fire_point, point_with_bit(self.point_path, 2), 0)
    self.state       = LOOK
    self.time      = device():time_global() + time_to_look
    self.time_sight = device():time_global() + 1000
    self.prev_point = index
end
---------------------------------------------------------------------------------------------------------------------
function action_sniper_idle:finalize ()
    action_base.finalize       (self)
    self.object:clear_callback  (game_object.movement)
	xr_state.change_state(self.object, 0)							//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
end

---------------------------------------------------------------------------------------------------------------------
-- Action kill_monster
---------------------------------------------------------------------------------------------------------------------
local fire  = 1
local LOOK  = 2
local sight = 3

class "action_kill_monster" (action_base)
function action_kill_monster:__init (name, storage) super (nil, name)
    self.a       = storage
    self.time     = 0            --Когда надо закончить стелять
    self.state    = LOOK
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_monster:initialize ()

    action_base.initialize (self)

    self.object:set_movement_type      (move.stand)
    self.object:set_sight            (look.point, self.object:best_enemy():position(), 0)
    self.object:set_item                (object.activate, self.object:best_weapon())
    self.object:set_mental_state        (anim.free)
    self.object:set_item        (object.activate, self.object:best_weapon())

    self.state    = LOOK
    self.time    = device():time_global() + 2000
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_monster:execute ()
    action_base.execute (self)

    if(device():time_global() > self.time) then

        if(self.state == LOOK) then
            self.state  = sight
            self.time   = device():time_global() + 3000
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
          self.object:set_mental_state    (anim.danger)
        elseif(self.state == sight) then
            self.state  = fire
            self.time   = device():time_global() + 1500
            self.object:set_item            (object.fire1, self.object:best_weapon())
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
        elseif(self.state == fire) then
            self.state  = LOOK
            self.time   = device():time_global() + 3000
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
            self.object:set_item            (object.idle, self.object:best_weapon())
            self.object:set_mental_state    (anim.free)
        end

    end
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_monster:finalize ()
    action_base.finalize       (self)
    self.object:set_item       (object.idle, self.object:best_weapon())
    self.object:set_mental_state  (anim.free)
end

---------------------------------------------------------------------------------------------------------------------
-- Action kill_enemy
---------------------------------------------------------------------------------------------------------------------
class "action_kill_enemy" (action_base)
function action_kill_enemy:__init (name, storage) super (nil, name)
    self.a = storage
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy:initialize ()

    action_base.initialize   (self)

    self.object:clear_animations    ()
    self.object:set_movement_type       (move.stand)
    self.object:set_sight               (look.fire_point, self.object:best_enemy():position(), 0)
    self.object:set_item                (object.activate, self.object:best_weapon())
    self.object:set_mental_state        (anim.danger)
    self.object:set_item				(object.activate, self.object:best_weapon())

    self.state      = sight
    self.time       = device():time_global() + 2000

end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy:execute ()
  --Потом если не пригодится, то удалить состояние смотрения. Только целимся и стреляем
    action_base.execute (self)

    if(device():time_global() > self.time) then

        if(self.state == LOOK) then
            self.state  = sight
            self.time   = device():time_global() + 3000
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
            self.object:set_mental_state    (anim.danger)
        elseif(self.state == sight) then
            self.state  = fire
            self.time   = device():time_global() + 1500
            self.object:set_item            (object.fire1, self.object:best_weapon())
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
        elseif(self.state == fire) then
            self.state  = sight
            self.time   = device():time_global() + 3000
            self.object:set_sight           (look.fire_point, self.object:best_enemy():position(), 0)
            self.object:set_item            (object.idle, self.object:best_weapon())
            self.object:set_mental_state    (anim.danger)
        end

    end
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy:finalize ()
    action_base.finalize (self)

    self.object:set_item            (object.idle, self.object:best_weapon())
    self.object:set_mental_state    (anim.free)
end

---------------------------------------------------------------------------------------------------------------------
-- Action
---------------------------------------------------------------------------------------------------------------------
local hide    = 1
local camper  = 2
local walk    = 3
local LOOK    = 4        --Состояние, когда смотрим в даль, когда ползем по маршруту

class "action_camper" (action_base)
function action_camper:__init (name, storage) super (nil, name)
    self.a         = storage
end
---------------------------------------------------------------------------------------------------------------------
function action_camper:initialize ()
    self.camper_point   = nil
    self.end_of_path    = patrol(self.a.camper_path):level_vertex_id(patrol(self.a.camper_path):count() - 1)
    self.point_path     = patrol(self.a.point_path)
    self.state        = 0
    self.time          = 0
    self.look_point      = nil          --точка в которую будем смотреть, когда сидим и кемперим
    self.prev_point    = -1

    action_base.initialize   (self)

	self.object:set_item      (object.activate, self.object:best_weapon())
    self.object:clear_animations  ()

    self.camper_point   = near_point_with_bit(self.object:position(), patrol(self.a.point_path), 1)
    self.state        = hide
end
---------------------------------------------------------------------------------------------------------------------
function action_camper:execute ()
    action_base.execute (self)

    if(self.state == hide) then
        if( self.object:level_vertex_id() ~= self.point_path:level_vertex_id(self.camper_point) ) then
        --Если находимся не в точке, в которой будем прятатся, тогда бежим туда
            self.object:set_dest_level_vertex_id(self.point_path:level_vertex_id(self.camper_point))
            self.object:set_movement_type   (move.run)
          self.object:set_body_state      (move.standing)
          self.object:set_sight          (look.path_dir, nil, 0)
            self.object:set_path_type        (game_object.level_path)
            self.object:set_mental_state    (anim.danger)
        else
            self.state   = camper
            self.object:set_movement_type   (move.stand)
            self.object:set_mental_state    (anim.free)
            self.time   = device():time_global() + math.random(time_to_camper/2, time_to_camper)

            self:select_look_point()
        end
    elseif(self.state == camper) then
        if(device():time_global() < self.time) then
          --Еще не прошло время выходить с нычки, продолжаем кемперить
            self.object:set_body_state      (move.crouch)
            self.object:set_mental_state    (anim.danger)
            self.object:set_movement_type   (move.stand)
            self.object:set_sight          (look.fire_point, self.look_point, 0)
    else
            self.state  = walk
            self.object:set_patrol_path     (self.a.camper_path, patrol.start, patrol.continue, true)
          self.object:set_sight          (look.path_dir, nil, 0)
            self.object:set_movement_type   (move.walk)
            self.object:set_body_state      (move.crouch)
            self.object:set_path_type        (game_object.patrol_path)
          self.object:set_callback         (self, "move_callback", game_object.movement)
            self.prev_point   = -1
        end
    else
        --Переползаем по маршруту и иногда смотри в точки
      if(self.state == LOOK and device():time_global() > self.time) then
             self.object:set_movement_type    (move.walk)
            self.object:set_sight          (look.path_dir, nil, 0)
            self.state   = walk
        end

        self.object:set_mental_state    (anim.danger)
     end

end
---------------------------------------------------------------------------------------------------------------------
function action_camper:move_callback(obj, action_type, index)
  if(index == patrol(self.a.camper_path):count() - 1)then
      self:forget_enemy()                --Доползли до конца маршрута, забываем о враге
    end

  if(self.prev_point == index) then return end    --Тут только что останавливались

    self.object:set_movement_type   (move.stand)
    self.object:set_sight          (look.fire_point, point_with_bit(self.point_path, 2), 0)

    self.time      = device():time_global() + time_camper_look
    self.state      = LOOK
    self.prev_point = index
end
---------------------------------------------------------------------------------------------------------------------
function action_camper:select_look_point()
    --Просматривает какой бит после второго установлен в точке пути self.camper_point и еще в пути точку с этим битом
    for i = 3, 20 do

        if(self.point_path:flag(self.camper_point, i)) then
            self.look_point  = point_with_bit(self.point_path, i, self.camper_point)
            return
        end
    end
    printf("Assert%d")      --Херово построен путь. Читай доку по настройке стрелка
end
---------------------------------------------------------------------------------------------------------------------
function action_camper:forget_enemy()
     self.object:enable_memory_object(self.object:best_enemy(), false)      --Может вылетать
end

---------------------------------------------------------------------------------------------------------------------
function action_camper:finalize ()
    action_base.finalize       (self)
    self.object:clear_callback  (game_object.movement)
end

----------------------------------------------------------------------------------------------------------------------
--sniper binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(obj, char_ini)
   
    if char_ini == nil or char_ini:section_exist("sniper") == true then
    
    //'Биндим читера снайпера, если есть для него секция
    if(char_ini ~= nil and char_ini:line_exist ("sniper", "chiter") == true) then
		chiter_binding(obj, char_ini)
		return 
	end	
    
    local operators     = {}
    local properties    = {}


    properties["enabled"]            = xr_evaluators_id.jon_sniper_enabled
    properties["see_monster"]        = xr_evaluators_id.jon_sniper_see_monster
    properties["see_enemy"]          = xr_evaluators_id.jon_sniper_see_enemy
    properties["enemy_near"]         = xr_evaluators_id.jon_sniper_enemy_near
    properties["stand"]				 = xr_evaluators_id.stohe_state_base + 1

    properties["event"]              = xr_evaluators_id.reaction

    operators["idle"]                = xr_actions_id.jon_sniper_enabled
    operators["kill_monster"]        = xr_actions_id.jon_sniper_see_monster
    operators["kill_enemy"]          = xr_actions_id.jon_sniper_see_enemy
    operators["camper"]              = xr_actions_id.jon_sniper_camper

    local manager  = obj:motivation_action_manager ()

    manager:add_evaluator (properties["enabled"],     this.enabled_evaluator_new ("alife_sniper", xr_motivator.storage[obj:id()].sniper))
    manager:add_evaluator (properties["see_monster"], this.monster_evaluator     ("see_monster",  xr_motivator.storage[obj:id()].sniper))
    manager:add_evaluator (properties["see_enemy"],   this.see_enemy_evaluator   ("see_enemy",    xr_motivator.storage[obj:id()].sniper))
    manager:add_evaluator (properties["enemy_near"],  this.enemy_near_evaluator  ("enemy_near",   xr_motivator.storage[obj:id()].sniper))

    local action = this.action_sniper_idle ("sniper_idle", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition         (world_property (properties["see_monster"],     false))
    action:add_precondition         (world_property (properties["event"],            false))
    action:add_precondition         (world_property (properties["enabled"],         true))
    action:add_effect               (world_property (properties["enabled"],         false))
    manager:add_action              (operators["idle"], action)

    action = this.action_kill_monster("kill_monster", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (properties["enabled"],         true))
    action:add_precondition         (world_property (properties["stand"],         true))
    action:add_precondition         (world_property (properties["see_monster"],     true))
    action:add_effect               (world_property (properties["see_monster"],     false))
    manager:add_action              (operators["kill_monster"], action)

    action = this.action_kill_enemy("kill_enemy", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (properties["enabled"],         true))
    action:add_precondition         (world_property (properties["enemy_near"],      false))
    action:add_precondition         (world_property (properties["see_enemy"],       true))
    action:add_precondition         (world_property (stalker_ids.property_enemy,    true))
    action:add_effect               (world_property (stalker_ids.property_enemy,    false))
    manager:add_action              (operators["kill_enemy"], action)

    action = this.action_camper("camper", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (properties["enabled"],         true))
    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (stalker_ids.property_enemy,    true))
    action:add_precondition         (world_property (properties["enemy_near"],      false))
    action:add_precondition         (world_property (properties["stand"],         true))
    action:add_precondition         (world_property (properties["see_monster"],     false))
    action:add_precondition         (world_property (properties["see_enemy"],       false))
    action:add_effect               (world_property (properties["see_enemy"],      true))
    manager:add_action              (operators["camper"], action)


    action = manager:action         (stalker_ids.action_combat_planner)
    action:add_precondition         (world_property (properties["enemy_near"],      true))

    action = manager:action         (stalker_ids.action_puzzle_solver)
    action:add_precondition         (world_property (properties["enabled"],  false))

    xr_reactions.add_rule      (obj,"no_visual")

	if char_ini ~= nil then 
		xr_sniper.set_sniper(obj)
    end   
    end
end

-- включение снайпера
function set_sniper(object, enabled, rest_path, camper_path, point_path)
	local char_ini = object:spawn_ini()
	local st = xr_motivator.storage[object:id()].sniper

	if(enabled == nil) then
		if(char_ini:line_exist ("sniper", "enabled") == true) then
			st.enabled = char_ini:r_bool("sniper", "enabled")
		else
			st.enabled = false
		end
	else
		st.enabled = enabled
	end
	
    if rest_path == nil then
		if (char_ini:line_exist ("sniper", "rest_path") == true) then
			st.rest_path = char_ini:r_string("sniper", "rest_path")
		else
			st.enabled = false
		end
	else
		st.rest_path = rest_path
    end
    if point_path == nil then
		if (char_ini:line_exist ("sniper", "point_path") == true) then
			st.point_path = char_ini:r_string("sniper", "point_path")
		else		
			st.enabled = false
		end
	else
		st.point_path = point_path
    end
    if camper_path == nil then
		if (char_ini:line_exist ("sniper", "camper_path") == true) then
			st.camper_path = char_ini:r_string("sniper", "camper_path")
		else
			st.enabled = false
		end
	else
		st.camper_path = camper_path
    end
	xr_motivator.checkStorage(object)
end


//--------------------------------------------------------------------------------
// Снайпер читер
//--------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------

//Читерство. Если актер в зоне, либо мы его видим, либо у нас есть враг, то он возвращает true
class "enemy_evaluator" (property_evaluator)
function enemy_evaluator:__init (name, storage) super ()
    self.a			= storage
    self.monster	= nil
    self.enabled	= false          --Реагируем ли мы на данного монстра
    self.look_time	= 0
    self.zone       = nil
    self.a.enter	= false
end

function enemy_evaluator:evaluate()
	if(self.zone == nil) then
	    self.zone       = level.object(self.a.zone)
		self.zone:set_callback(self, "enter", true)
		self.zone:set_callback(self, "exit_zone", false)
	end

	if(self.object:best_enemy() ~= nil) then return false end		//Это херня, но без нее не возможно построить цепочку
	
	if(self.a.enter) then
		//'Зашел ли актера в зону. Если зашел, то живой ли он
		if(level.actor() and level.actor():alive() == false) then
			self.a.enter = false
			return false
		end
		return true
	end
    
    return false
end

function enemy_evaluator:enter(zone, obj)
	if(level.actor() and level.actor():id() == obj:id()) then
		printf("enter")
		self.a.enter	= true
	end
end

function enemy_evaluator:exit_zone(zone, obj)
	if(level.actor() and level.actor():id() == obj:id()) then
		self.a.enter	= false
		printf("exit")
	end
end

---------------------------------------------------------------------------------------------------------------------
-- Action kill_enemy
---------------------------------------------------------------------------------------------------------------------
class "action_kill_enemy2" (action_base)
function action_kill_enemy2:__init (name, storage) super (nil, name)
    self.a		= storage
    self.time	= 0
    self.state  = sight
    self.enemy  = nil
    self.point  = nil
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy2:initialize ()

    action_base.initialize   (self)

    self.object:clear_animations    ()
    self.object:set_movement_type       (move.stand)
    if(level.actor() and self.a.enter) then
		self.object:set_sight               (look.fire_point, level.actor():position(), 0)	
	else
		//Тут по идее может вылетать, но если вылетает, то ошибка где-то в эвалуаторе
		self.object:set_sight               (look.fire_point, self.object:best_enemy():position(), 0)
	end
	
	self.object:set_item                (object.activate, self.object:best_weapon())    
    self.object:set_mental_state        (anim.danger)
    self.object:set_item				(object.activate, self.object:best_weapon())
    self.object:set_body_state			(move.crouch)   
    self.state  = fire
    self.time	= device():time_global() + 1000
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy2:execute ()
    action_base.execute (self)

    if(self.a.enter and level.actor()) then
		self.enemy	= level.actor()
	else
		//Тут по идее может вылетать, но если вылетает, то ошибка где-то в эвалуаторе
		self.enemy	= self.object:best_enemy()
	end
      
	if(self.object:see(self.enemy) == false) then
		self.object:set_sight           (look.fire_point, self.enemy:position(), 0)		
		self.state	= sight
		return
	end

    if(device():time_global() > self.time) then

        if(self.state == sight) then
            self.state  = fire
            self.time   = device():time_global() + 1500
            self.point  = self.enemy:position()
            self.point.y = self.point.y + 1.2                       //Это для того, чтоб стрелял в туловище, а не в ноги
            self.object:set_item            (object.fire1, self.object:best_weapon())
            self.object:set_sight           (look.fire_point, self.enemy:position(), 0)
        elseif(self.state == fire) then
            self.state  = sight
            self.time   = device():time_global() + 2000
            self.object:set_sight           (look.fire_point, self.enemy:position(), 0)
            self.object:set_item            (object.idle, self.object:best_weapon())
            self.object:set_mental_state    (anim.danger)
        end

    end
end
---------------------------------------------------------------------------------------------------------------------
function action_kill_enemy2:finalize ()
    action_base.finalize		(self)
    self.object:set_body_state	(move.standing)   
	self.object:clear_animations()
	self.object:set_item		(object.idle, self.object:best_weapon())
end


function chiter_binding(obj, char_ini)
	local st = xr_motivator.storage[obj:id()].sniper

	st.enabled		= char_ini:r_bool("sniper", "enabled")
	st.rest_path	= char_ini:r_string("sniper", "rest_path")
	st.point_path	= char_ini:r_string("sniper", "point_path")
	st.camper_path	= char_ini:r_string("sniper", "camper_path")
	st.zone			= char_ini:r_string("sniper", "zone")

    local operators     = {}
    local properties    = {}


    properties["enabled"]            = xr_evaluators_id.jon_sniper_enabled
    properties["wait_enemy"]		 = xr_evaluators_id.jon_sniper_enemy_is
    properties["enemy_near"]         = xr_evaluators_id.jon_sniper_enemy_near
    properties["event"]              = xr_evaluators_id.reaction
    properties["stand"]				 = xr_evaluators_id.stohe_state_base + 1

    operators["idle"]                = xr_actions_id.jon_sniper_enabled
    operators["kill_enemy"]          = xr_actions_id.jon_sniper_see_enemy
    operators["wait_enemy"]          = xr_actions_id.jon_sniper_camper

    local manager  = obj:motivation_action_manager ()

    manager:add_evaluator (properties["enabled"],     this.enabled_evaluator_new ("alife_sniper", xr_motivator.storage[obj:id()].sniper))
    manager:add_evaluator (properties["wait_enemy"],  this.enemy_evaluator		 ("wait_enemy",   xr_motivator.storage[obj:id()].sniper))
    manager:add_evaluator (properties["enemy_near"],  this.enemy_near_evaluator  ("enemy_near",   xr_motivator.storage[obj:id()].sniper))

    local action = this.action_sniper_idle ("sniper_idle", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition         (world_property (properties["wait_enemy"],      false))
    action:add_precondition         (world_property (properties["enabled"],         true))
    action:add_effect               (world_property (properties["enabled"],         false))
    manager:add_action              (operators["idle"], action)

    action = this.action_kill_enemy2("wait_enemy", xr_motivator.storage[obj:id()].sniper)
 
	action:add_precondition         (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition       (world_property (properties["stand"],			true))
    action:add_precondition         (world_property (properties["wait_enemy"],		true))
    action:add_effect               (world_property (properties["wait_enemy"],		false))
    manager:add_action              (operators["kill_enemy"], action)

    action = this.action_kill_enemy2("kill_enemy", xr_motivator.storage[obj:id()].sniper)

    action:add_precondition         (world_property (properties["enemy_near"],      false))
	action:add_precondition			(world_property (properties["stand"],			true))
	action:add_precondition         (world_property (stalker_ids.property_alive,    true))
    action:add_precondition         (world_property (stalker_ids.property_enemy,    true))
    action:add_effect               (world_property (stalker_ids.property_enemy,    false))
	manager:add_action              (operators["wait_enemy"], action)
    
    action = manager:action         (stalker_ids.action_combat_planner)
    action:add_precondition         (world_property (properties["enemy_near"],      true))

    action = manager:action         (stalker_ids.action_puzzle_solver)
    action:add_precondition         (world_property (properties["enabled"],  false))

    xr_reactions.add_rule			(obj,"no_visual")
end