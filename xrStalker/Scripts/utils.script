
--[[
ОПИСАНИЕ ФУНКЦИЙ

-- Крешнуть игру (после вывода сообщения об ошибке в лог)
function abort(fmt, ...)

-- Выводит отладочное сообщение в лог, если скрипт активен (активный скрипт выбирается с помощью
-- переменной debug_info.trace_script). 
function trace(script_name, fmt, ...)

-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.
function to_str(what)

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)

-- Настройка параметров игровых объектов:
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
function cfg_get_number(char_ini, section, field, object, mandatory, default_val)

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)

-- Послать stalker в заданную точку patrol_path(path_point)
function stalker_go_to_waypoint(stalker, patrol_path, path_point)

--]]

----------------------------------------------------------------------------------------------------

-- Крешнуть игру (после вывода сообщения об ошибке в лог)
function abort(fmt, ...)
	local reason = string.format(fmt, unpack(arg))
	printf("ERROR: %s", reason)
	error_log("ERROR: " .. reason)
	string.format("%s") -- crash the script
end

-- Выводит отладочное сообщение в лог, если скрипт активен (активный скрипт выбирается с помощью
-- переменной debug_info.trace_script). 
function trace(script_name, fmt, ...)
	if debug_info.trace_script == script_name then
		log(string.format("[TRACE] " .. script_name .. ".script: " .. fmt, unpack(arg)))
	end
end

-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.
function to_str(what)
	if what == nil then
		return "<nil>"
	else
		return tostring(what)
	end
end

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)
--[[
	local newvec = vector()
	newvec.x = vec.x
	newvec.y = vec.y
	newvec.z = vec.z
	return newvec
--]]
	return vector():set(vec)
end

-- Настройка параметра типа bool у игрового объекта.
-- 
-- char_ini - указатель на customdata (обычно object:spawn_ini())
-- section - имя секции в customdata
-- field - имя поля в customdata
-- object - игровой объект, от которого будет взято имя для сообщения об ошибке
-- mandatory - поле обязательно должно быть задано
--
-- Возвращает true или false
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
	if mandatory == nil then
		utils.abort("section '%s': wrong arguments order in call to cfg_get_bool", section)
	end
	
	--printf("DEBUG: conf_get_bool: section='%s', field='%s'", section, field)
	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		local ret = char_ini:r_bool(section, field)
		return ret
	end
	if not mandatory then
		if default_val then
			if default_val ~= false and default_val ~= true then
				utils.abort("object '%s': section '%s': field '%s': default value is " ..
					"not boolean", object:name(), section, field)
			end
			return default_val
		end
		return false
	end
	utils.abort("object '%s': attempt to read a non-existant boolean field '%s' in " ..
		"section '%s'", object:name(), field, section)
end

function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
	if mandatory == nil or gulag_name == nil then
		utils.abort("section '%s': wrong arguments order in call to cfg_get_string", section)
	end


	--printf("DEBUG: conf_get_string: section='%s', field='%s'", section, field)
	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		if gulag_name and gulag_name ~= "" then
			return gulag_name .. "_" .. char_ini:r_string(section, field)
		else
			return char_ini:r_string(section, field)
		end
	end
	if not mandatory then
		return default_val
	end
	local err = "object name '" .. object:name() .. "': attempt to read a non-existant string field '" ..
		field .. "' in section '" .. section .. "'";
	utils.abort("%s", err)
end

function cfg_get_number(char_ini, section, field, object, mandatory, default_val)
	if mandatory == nil then
		utils.abort("section '%s': wrong arguments order in call to cfg_get_number", section)
	end

	--printf("DEBUG: conf_get_number: section='%s', field='%s'", section, field)
	if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
		return char_ini:r_s32(section, field)
	end
	if not mandatory then
		return default_val
	end
	local err = "object name '" .. object:name() .. "': attempt to read a non-existant numeric field '" ..
		field .. "' in section '" .. section .. "'";
	utils.abort("%s", err)
end

function mob_get_string(char_ini, section, field, override, object, mandatory, default_val)
	if override ~= nil then
		return override
	end

	return cfg_get_string(char_ini, section, field, object, mandatory, "", default_val)
end

function mob_get_number(char_ini, section, field, override, object, mandatory, default_val)
	if override ~= nil then
		return override
	end

	return cfg_get_number(char_ini, section, field, object, mandatory, default_val)
end

function mob_get_bool(char_ini, section, field, override, object, mandatory, default_val)
	if override ~= nil then
		return override ~= false
	end

	return cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
end

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)
	return stalker:level_vertex_id() == patrol_path:level_vertex_id(path_point)
--[[
	local stalker_pos = stalker:position()
	local distance = stalker_pos:distance_to(patrol_path:point(path_point))
	if distance <= 0.5 then
		return true
	end
	return false
--]]
end

-- Послать stalker в заданную точку patrol_path(path_point)
--[[
function stalker_go_to_waypoint(stalker, patrol_path, path_point)
	if stalker:animation_count() > 0 then
		stalker:clear_animations()
	end
	if stalker:level_vertex_id() == patrol_path:level_vertex_id(path_point) then
		return
	end
	stalker:set_dest_level_vertex_id(patrol_path:level_vertex_id(path_point))
	stalker:set_movement_type(move.run)
	stalker:set_body_state(move.standing)
	stalker:set_sight(look.path_dir, nil, 0)
	stalker:set_path_type(game_object.level_path)
	stalker:set_mental_state(anim.danger)
	stalker:set_detail_path_type(move.line)
end
--]]

function stalker_stop(stalker)
	stalker:set_movement_type(move.stand)
end

--[[
function stalker_look_at_waypoint(stalker, patrol_path, path_point)
	local look_pt = this.vector_copy_by_val(patrol_path:point(path_point)):sub(stalker:position())
	stalker:set_sight(look.direction, look_pt, 0)
end
--]]

--[[
function stalker_look_at_stalker(stalker, whom)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight(look.direction, look_pt, 0)
end
--]]

--[[
function stalker_look_at_stalker_angle(stalker, whom, angle)
    --stalker - killer
    --whom - killed :)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight (look.direction, vector_rotate_y (look_pt, angle), 0)
end
--]]

--[[
function stalker_look_firepoint_angle(stalker, whom, angle)
    --stalker - killer
    --whom - killed :)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight (look.fire_point, vector_rotate_y (look_pt, angle), 0)
end
--]]

local function door_default_callback(door, actor)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")

	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)

	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle 
	then
		joint:set_max_force_and_velocity(100, -1.5, 0)
	else
		joint:set_max_force_and_velocity(100, 1.5, 0)
	end
end

function door_init(door)
	door:set_use_callback(door_default_callback)
end

-- Дверь door импульсом захлопнется и залочится, при юзе будет вызываться callback_fn
function door_close_then_lock(door, callback_fn)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")
	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)
	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle 
	then
		joint:set_max_force_and_velocity(1000000, 0, 0)
	else
		joint:set_max_force_and_velocity(1000000, 0, 0)
	end
end
	
--unlock_then_open(door) -- дверь разлочится и импульсом откроется
--locked(door) -- true, если дверь закрыта и залочена

--При попытке поюзать незапертую дверь она просто силой открывается до максимально допустимого состояния.

function parse_waypoint_data(pathname, wpflags, wpname)
	local rslt = {}

	rslt.flags = wpflags

	if string.find(wpname, "|", at, true) == nil then
		return rslt
	end

	local par_num
	local fld_num
	local fld
	local val

	par_num = 1
	for param in string.gfind(wpname, "([%w_\\%=%-%,%*]+)|*") do
		if par_num == 1 then
			-- continue
		else
			if param == "" then
				utils.abort("path '%s': waypoint '%s': syntax error in waypoint name", pathname, wpname)
			end

			fld_num = 1
			fld = nil
			val = nil
			for v in string.gfind(param, "([%w_\\%-%,%*]+)=*") do
				if fld_num == 1 then
					fld = v
				elseif fld_num == 2 then
					val = v
				else
					utils.abort("path '%s': waypoint '%s': syntax error while parsing the param '%s'",
						pathname, wpname, param)
				end
				fld_num = fld_num + 1
			end

			if not fld or fld == "" then
				utils.abort("path '%s': waypoint '%s': syntax error while parsing the param '%s': no field specified",
					pathname, wpname, param)
			end

			if not val or val == "" then
				val = "true"
			end

			rslt[fld] = val
		end
		par_num = par_num + 1
	end
	return rslt
end

function path_parse_waypoints(pathname)
	if not pathname then
		return nil
	end

	printf("_bp: path_parse_waypoints: pathname='%s'", pathname)
	local ptr = patrol(pathname)
	local cnt = ptr:count()
	local rslt = {}

	for pt = 0, cnt - 1 do
		--printf("_bp: %s", ptr:name(pt))
		rslt[pt] = parse_waypoint_data(pathname, ptr:flags(pt), ptr:name(pt))
		if not rslt[pt] then
			utils.abort("error while parsing point %d of path '%s'", pt, pathname)
		end

	end

	return rslt
end

function path_parse_waypoints_from_arglist(pathname, num_points, ...)
	if not pathname then
		return nil
	end

	local ptr = patrol(pathname)
	local cnt = ptr:count()

	if cnt ~= num_points then
		utils.abort("path '%s' has %d points, but %d points were expected", pathname, cnt, num_points)
	end

	local rslt = {}

	local cur_arg
	local fl
	for pt = 0, cnt-1 do
		cur_arg = arg[pt + 1]
		if not cur_arg then
			utils.abort("script error [1] while processing point %d of path '%s'", pt, pathname)
		end
		fl = flags32()
		fl:assign(cur_arg[1])
		rslt[pt] = parse_waypoint_data(pathname, fl, cur_arg[2])
		if not rslt[pt] then
			utils.abort("script error [2] while processing point %d of path '%s'", pt, pathname)
		end
	end

	return rslt
end

function action2(obj,...)
	local act = entity_action()
	local i = 1
	while true do
		if (arg[i] ~= nil) then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if (obj ~= nil) then
		obj:command(act,false)
	end
	return  entity_action(act)
end

function wpn_info_get(npc)
	local rslt = {}

	local active_item = npc:active_item()
	local has_weapon = active_item and isWeapon(active_item)
	if has_weapon then
		rslt["id"] = active_item:id()
		rslt["ammo"] = active_item:get_ammo_in_magazine()
	end

	return rslt
end

function wpn_info_equal(wpn_info1, wpn_info2)
	return wpn_info1["id"] == wpn_info2["id"] and wpn_info1["ammo"] == wpn_info2["ammo"]
end

function get_scheme_by_section(section)
	local scheme = string.gsub(section, "%d", "")
	local at, to = string.find(scheme, "@", 1, true)
	if at and to then
		scheme = string.sub(scheme, 1, at - 1)
	end
	return scheme
end

-- a | b | c  ==>  { 1 = "a", 2 = "b", 3 = "c" }
function parse_params(params)
	--printf("_bp: parse_params: params=%s", params)
	local rslt = {}
	local n = 1
	for fld in string.gfind(params, "%s*([^|]+)%s*") do
		--printf("_bp: parse_params iter=%d, fld=%s", n, fld)
		rslt[n] = fld
		n = n + 1
	end
	return rslt
end

function is_day()
	return level.get_time_hours() >= 5 and level.get_time_hours() < 22
end

function electro_art_enabled ()
    return level.get_time_hours() >= 0 and level.get_time_hours() < 5
end

function no_need_to_rotate(npc, target_pos)
	local y = yaw(npc:direction(), utils.vector_copy_by_val(target_pos):sub(npc:position()))

	return y < 0.3
end

function no_need_to_rotate_xz(npc, target_pos)
	local dir1 = npc:direction()
	dir1.y = 0
	local dir2 = utils.vector_copy_by_val(target_pos):sub(npc:position())
	dir2.y = 0
	local y = yaw(dir1, dir2)

	return y < 0.3
end

function get_customdata_or_ini_file(npc, filename)
	if filename == "<customdata>" then
		local ini = npc:spawn_ini()
		if ini then
			return ini
		end
		return ini_file([[scripts\dummy.ltx]])
	else
		return ini_file(filename)
	end
end


-- Перевод угла из радианов в градусы
function rad2deg(r)
	return r * 180.0 / math.pi
end

-- Перевод угла из градусов в радианы
function deg2rad(d)
	return d * math.pi / 180.0
end

-- угол между двумя векторами в градусах.
function angle_diff(a1, a2)
	local b1 = a1:normalize()
	local b2 = a2:normalize()
	local dotp = b1:dotproduct(b2)

	return rad2deg(math.acos(math.abs(dotp)))
end

-- true, если нужно поворачивать влево
function angle_left(dir1, dir2)
	local dir_res = vector()
	dir_res:crossproduct(dir1, dir2)
	return dir_res.y <= 0
end

function angle_left_xz(dir1, dir2)
	local dir_res = vector()
	dir1.y = 0
	dir2.y = 0
	dir_res:crossproduct(dir1, dir2)
	return dir_res.y <= 0
end

function get_nearest_waypoint(obj, pathname, ptr, cnt)
	local pt_chosen = nil
	local min_dist = nil
	local dist
	for i = 0, cnt - 1 do
		dist = obj:position():distance_to(ptr:point(i))
		if not min_dist or dist < min_dist then
			min_dist = dist
			pt_chosen = i
		end
	end
	if not pt_chosen then
		utils.abort("object '%s': path '%s': get_nearest_waypoint: unable to choose a nearest waypoint (path has no waypoints?)",
			obj:name(), pathname)
	end
	return pt_chosen
end

function obj_by_sid(sid)
	local se_obj = alife():story_object(sid)
	if se_obj then
		return level.object_by_id(se_obj.id)
	end
	return nil
end

function npc_in_zone(npc, zone)
	return npc ~= nil and zone ~= nil and zone:inside(npc:position())
end
