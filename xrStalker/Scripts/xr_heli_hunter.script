--[[------------------------------------------------------------------------------------------------------------------
—хема "ќхотник за вертолЄтами"
„угай —аша

—делать:
--------------------------------------------------------------------------------------------------------------------]]

local def_attack_dist = 100 * 100 -- рассто€ние, на котором вертолЄт может быть атакован

function get_nearest_heli(npc_position, attack_dist_sqr)
	printf("TRY to search HELI")
	print_table(db.heli)
	local heli = nil
	for k,v in db.heli do
		if v:position():distance_to_sqr(npc_position) <= attack_dist_sqr and
		   (heli == nil or
		   v:position():distance_to_sqr(npc_position) < heli:position():distance_to_sqr(npc_position))
		then
			printf("find")
			heli = v
		end
	end
	return heli
end
---------------------------------------------------------------------------------------------------------------------
-- Ёвалуатор свойства "можно пострел€ть по вертолЄту"
---------------------------------------------------------------------------------------------------------------------
local overrides
class "evaluator_shoot" ( property_evaluator )
function evaluator_shoot:__init( name, a ) super( nil, name )
	self.a = a
end
function evaluator_shoot:evaluate()
	if not self.a.enabled then
		return false
	end
	overrides = xr_logic.generic_scheme_overrides( self.object )
	if overrides and overrides.heli_hunter then
		if self.a.heli == nil then
			-- поиск вертолета
			self.a.heli = this.get_nearest_heli(self.object:position(), self.a.attack_dist_sqr)
		else
			-- проверка не потер€лс€ ли вертолет.
			if self.a.heli:position():distance_to_sqr(self.object:position()) > self.a.attack_dist_sqr then
				self.a.heli = nil
			end
		end
		return self.a.heli ~= nil
	end
	return false
end

----------------------------------------------------------------------------------------------------------------------
-- ƒействие "стрел€ть по вертолЄту"
----------------------------------------------------------------------------------------------------------------------
class "action_shoot" ( action_base )

function action_shoot:__init( name, a )  super ( nil, name )
	self.a = a
end

function action_shoot:initialize()
	action_base.initialize( self )

end

function action_shoot:execute()
	action_base.execute( self )

	state_mgr.set_state( self.object, "threat_fire", nil, nil,
	                     {look_object = self.a.heli, look_position = self.a.heli:position()} )
end

function action_shoot:finalize()
	action_base.finalize( self )
end

----------------------------------------------------------------------------------------------------------------------

function add_to_binder( npc, ini, scheme, section, storage )
	printf( "DEBUG: add_to_binder: scheme='%s'", scheme )

	local manager = npc:motivation_action_manager()

	manager:add_evaluator( xr_evaluators_id.chugai_heli_hunter_base, evaluator_shoot( "heli_hunter", storage ) )

	local action = this.action_shoot( "action_shoot", storage )
	action:add_precondition( world_property(stalker_ids.property_alive,               true  ) )
	action:add_precondition( world_property(stalker_ids.property_enemy,               false ) )
	action:add_precondition( world_property(xr_evaluators_id.chugai_heli_hunter_base, true  ) )
	action:add_effect      ( world_property(xr_evaluators_id.chugai_heli_hunter_base, false ) )
	manager:add_action( xr_actions_id.chugai_heli_hunter_base, action )

	action = manager:action( xr_actions_id.alife )
	action:add_precondition( world_property( xr_evaluators_id.chugai_heli_hunter_base, false ) )
end

function set_scheme( npc, ini, scheme, section )
	printf( "DEBUG: set_scheme: scheme='%s' section='%s'", scheme, utils.to_str(section) )

	local a = xr_logic.assign_storage_and_bind( npc, ini, scheme, section )

	a.attack_dist_sqr = math.pow( utils.cfg_get_number( ini, section, "dist", npc, false, def_attack_dist ), 2 )
	a.heli = nil
	a.enabled = true
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

