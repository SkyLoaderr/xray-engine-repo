local random_task = nil

local parent_by_story = {
	[003] = "trader",
	[500] = "barman",
	[902] = "ecolog",
	[507] = "dolg",
	[707] = "freedom",
	[006] = "wolf",
	[004] = "shustriy",
	[510] = "drunk_dolg",
	[504] = "hunter",
	[518] = "zastava_commander",
	[506] = "petrenko",
	[607] = "lisiy"
}

local story_by_parent = {
	trader						= 003,
	barman						= 500,
	ecolog						= 902,
	dolg						= 507,
	freedom						= 707,
	wolf	= 006,
	shustriy		= 004,
	drunk_dolg				= 510,
	hunter					= 504,
	zastava_commander	= 518,
	petrenko = 506,
	lisiy					= 607
}

local return_task_by_type = {
	eliminate_lager = "return_for_reward",
	defend_lager = "return_for_reward",
	kill_stalker = "return_for_reward",
	artefact = "return_for_reward_bring",
	monster_part = "return_for_reward_bring",
	find_item = "return_for_reward_bring"}

class "CRandomTask"
function CRandomTask:__init()

	printf("^^^ INIT")

	--' На конструкторе вычитываем LTX и создаем заготовки квестов.
	self.task_ini = ini_file("misc\\task_manager.ltx")
	self.task_phrase_id = 100

	--' Итерируемся по всем настройкам фраз
	if not self.task_ini:section_exist("list") then
		abort("There is no section [list] in task_manager.ltx")
	end
	local n = self.task_ini:line_count("list")
	local id, value = "",""
	local category = ""

	--' начальная установка
	self.task_info = {}
	
	for i=0,n-1 do
		result, id, value	= self.task_ini:r_line("list",i,"","")
		
		if not self.task_ini:section_exist(id) then
			abort("There is no section [%s] in task_manager.ltx", id)
		end		

		self.task_info[id] = {}
		if not self.task_ini:line_exist(id, "type") then
			abort("Task manager error: no type in section [%s]", id)
		end

		self.task_info[id].type			= self.task_ini:r_string(id, "type")			
		self.task_info[id].name			= id
		if self.task_ini:line_exist(id, "parent") then
			self.task_info[id].parent		= self.task_ini:r_string(id, "parent")
		else
			self.task_info[id].parent		= "nil"
		end
		if self.task_ini:line_exist(id, "target") then
			self.task_info[id].target		= self.task_ini:r_string(id, "target")
		end
		if self.task_ini:line_exist(id, "text") then
			self.task_info[id].text			= self.task_ini:r_string(id, "text")
		end
		if self.task_ini:line_exist(id, "description") then
			self.task_info[id].description	= self.task_ini:r_string(id, "description")				
		end
		self.task_info[id].time	= utils.cfg_get_number(self.task_ini, id, "time", nil, false)		
	
		if self.task_ini:line_exist(id, "init_condition") then
			self.task_info[id].init_condition = xr_logic.parse_condlist(db.actor, "task_manager", "init_condition", self.task_ini:r_string(id, "init_condition"))
		end

		local sss = utils.cfg_get_string(self.task_ini, id, "reward_item", nil, false, "")
		if sss ~= nil then
			self.task_info[id].reward_item = parse_names(sss) 
		else
			self.task_info[id].reward_item = sss
		end
		self.task_info[id].reward_money = utils.cfg_get_number(self.task_ini, id, "reward_money", nil, false)		
	
		if self.task_ini:line_exist(id, "community") then
			self.task_info[id].community = self.task_ini:r_string(id, "community")
		end		

		self.task_info[id].reward_rank = utils.cfg_get_number(self.task_ini, id, "reward_rank", nil, false, 0)
		self.task_info[id].reward_reputation = utils.cfg_get_number(self.task_ini, id, "reward_reputation", nil, false)
		self.task_info[id].reward_relation = parse_key_value(utils.cfg_get_string(self.task_ini, id, "reward_relation", nil, false, ""))
	
		if self.task_ini:line_exist(id, "condlist") then
			self.task_info[id].condlist = xr_logic.parse_condlist(db.actor, "task_manager", "condlist", self.task_ini:r_string(id, "condlist"))
		end		
	
		self.task_info[id].need_return = utils.cfg_get_bool(self.task_ini, id, "need_return", nil, false, true)

		self.task_info[id].init_phrase_id = self:get_id()
		self.task_info[id].desc_phrase_id = self:get_id()
		self.task_info[id].yes_phrase_id = self:get_id()
		self.task_info[id].no_phrase_id = self:get_id()

		--' По умолчанию квест доступен для выдачи
		self.task_info[id].enabled = true
		--' Доступен ли квест по своим свойствам. По умолчанию всегда недоступен.
		--' Этот параметр зависит от наличия целей для квестов и того срабатывает ли прекондишн квеста
		self.task_info[id].enabled_props = false

		--' Статус квеста, может быть: "normal", "selected", "completed", "refused", "failed", "rewarded"
		self.task_info[id].status = "normal"
	end

	--' Создание дополнительных ассоциативных таблиц для облегчения поиска
	self.task_id_by_type = {}
	self.task_id_by_parent = {}
	self.task_id_by_yes_phrase_id = {}
	self.task_id_by_init_phrase_id = {}
	self.active_task_by_type = {}
	self.task_id_self_inited = {}
	for k,v in pairs(self.task_info) do
		--' По типу квеста
		if self.task_id_by_type[v.type] == nil then
			self.task_id_by_type[v.type] = {}
		end
		table.insert(self.task_id_by_type[v.type], k)

		--' По типу вендора
		if self.task_id_by_parent[v.parent] == nil then
			self.task_id_by_parent[v.parent] = {}
		end
		table.insert(self.task_id_by_parent[v.parent], k)

		--' По id фразы согласия на квест
		self.task_id_by_yes_phrase_id[v.yes_phrase_id] = k
		--' По id фразы выдачи квеста.
		self.task_id_by_init_phrase_id[v.init_phrase_id] = k
		--' По самовыдаваемости
		if v.init_condition ~= nil then
			table.insert(self.task_id_self_inited, k)
		end
	end
end
--' Сохранение
function CRandomTask:save(p)
	printf("^^^ SAVE")
	--' Считаем количество записей
	local i = 0
	for k,v in pairs(self.task_info) do
		i = i + 1
	end
	p:w_u8(i)
	for k,v in pairs(self.task_info) do
		p:w_stringZ(k) 
		p:w_bool(v.enabled)	
		p:w_bool(v.enabled_props)
		p:w_stringZ(v.status)
		p:w_u32(v.selected_target or -1)
	end

	--' Та же самая процедура с активными тасками
	i = 0
	for k,v in pairs(self.active_task_by_type) do
		i = i + 1
	end
	p:w_u8(i)
	for k,v in pairs(self.active_task_by_type) do
		p:w_stringZ(k) 
		p:w_stringZ(v)
	end
end
--' Загрузка
function CRandomTask:load(p)
	printf("^^^ LOAD")
	--' Считаем количество записей
	local i = p:r_u8()
	for k = 1,i do
		local id = p:r_stringZ() 
		self.task_info[id].enabled = p:r_bool()
		self.task_info[id].enabled_props = p:r_bool()
		self.task_info[id].status = p:r_stringZ()

		local selected_target = p:r_u32()
		if selected_target ~= -1 then
			self.task_info[id].selected_target = selected_target
		end
	end

	--' Та же самая процедура с активными тасками
	local i = p:r_u8()	
	for k = 1,i do
		local id = p:r_stringZ()
		self.active_task_by_type[id] = p:r_stringZ()	
	end
end
--' Генератор уникальных ID для фраз
function CRandomTask:get_id()
	self.task_phrase_id = self.task_phrase_id + 1
	return self.task_phrase_id
end
--' Возвращает идентификатор вендора, с которым мы говорим
function CRandomTask:get_parent(npc)
	local story_id = npc:story_id()
	if parent_by_story[story_id] == nil then
		abort("Task manager error: wrong parent story_id[%s]", story_id)
	end
	return parent_by_story[story_id]
end
--' Может ли вендор выдать квест
function CRandomTask:parent_can_task(actor, npc, p1, p2, p3)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.task_id_by_parent[parent]) do
		self:check_task_props(v)
		if self.task_info[v].enabled == true and self.task_info[v].enabled_props == true then
			return true
		end
	end
	return false
end
--' Есть ли у игрока хоть одно задание от данного вендора
function CRandomTask:active_parent_task(actor, npc)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.active_task_by_type) do
		if self.task_info[v].parent == parent then
			return true
		end				
	end
	return false
end
--' Есть ли игрока завершенные задания (которые осталось только сдать)
function CRandomTask:have_completed_job(actor, npc)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.active_task_by_type) do
		if self.task_info[v].parent == parent and
		   self.task_info[v].status == "completed"
		then
			return true
		end				
	end
	return false
end
--' Выдача квеста игроку
function CRandomTask:action_give_task(actor, npc, p1, p2)
	local task = CGameTask()
	
	printf("p1 = %s p2 = %s", tostring(p1), tostring(p2))

	local task_desc = self.task_info[self.task_id_by_yes_phrase_id[p2]]
	
	task:load(task_desc.type)
	task:set_title(task_desc.type)
	
	local objective = SGameTaskObjective(task,1)
	objective:set_description(task_desc.name)
	objective:set_article_id(task_desc.description)

	--' Выбираем текущую цель квеста
	if task_desc.target_objects ~= nil then
		self.task_info[self.task_id_by_yes_phrase_id[p2]].selected_target = task_desc.target_objects[math.random(table.getn(task_desc.target_objects))]
	end

	if task_desc.type == "eliminate_lager" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)
	elseif task_desc.type == "defend_lager" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)

		local defend_object = alife():object(task_desc.selected_target)
		local sm_ini = defend_object:spawn_ini()
		self.task_info[self.task_id_by_yes_phrase_id[p2]].defend_target = utils.cfg_get_number(sm_ini, "random_task", "defend_target", nil, true)
	elseif task_desc.type == "kill_stalker" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)
	elseif task_desc.type == "find_item" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)
	end
	objective:add_complete_func("task_manager.task_complete")
	task:add_objective(objective)

	if task_desc.need_return then
		objective = SGameTaskObjective(task,2)
		objective:set_description(return_task_by_type[task_desc.type])

		objective:set_map_hint(return_task_by_type[task_desc.type])
		objective:set_map_location("blue_location")
		objective:set_object_id(alife():story_object(tonumber(story_by_parent[task_desc.parent])).id)
		task:add_objective(objective)
	end

	local time = 0
	if task_desc.time ~= nil then
		time = task_desc.time * 1000
	end
	db.actor:give_task(task,time,false)

	--' дизаблим все остальные задания данного типа, так как игрок не может одновременно обладать двумя заданиями одного типа.
	self.task_info[self.task_id_by_yes_phrase_id[p2]].status = "selected"
	self.active_task_by_type[task_desc.type] = self.task_id_by_yes_phrase_id[p2]
	for k,v in pairs(self.task_info) do
		if v.type == task_desc.type then
			v.enabled = false
		end
	end
end
--' Отказ игроком от квеста
function CRandomTask:action_refuse_task(actor, npc, p1, p2)
	local task_desc = self.task_info[self.task_id_by_yes_phrase_id[p2]]

	--' Делаем доступными все задания данного типа
	self.task_info[self.task_id_by_yes_phrase_id[p2]].status = "refused"
	self.task_info[self.active_task_by_type[task_desc.type]].selected_target = nil
	for k,v in pairs(self.task_info) do
		if v.type == task_desc.type then
			v.enabled = true
		end
	end
end
--' Проверяем, не выполнен ли таск
function CRandomTask:task_complete(p1, p2)
	if db.actor == nil then
		return false
	end

	if p2 == 0 then
		local self_task = self.task_info[self.active_task_by_type[p1]]
		if not self_task.need_return and self_task.status == "completed" then
			return true
		end
		if self_task.status == "rewarded" then
			return true
		end
	end

	if p2 == 1 then
		local sel_task = self.task_info[self.active_task_by_type[p1]]
		if p1 == "eliminate_lager" then
			if alife():object(sel_task.selected_target).gulag:get_population_comed() == 0 then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		elseif p1 == "defend_lager" then
			--' Квест выполнен потому что рейд прекратился
			if xr_gulag.getGulagState(sel_task.defend_target) == 0 then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		elseif p1 == "kill_stalker" then
			if alife():object(sel_task.selected_target):alive() == false then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		elseif p1 == "artefact" then			
			if db.actor:object(sel_task.target) ~= nil then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		elseif p1 == "monster_part" then			
			if db.actor:object(sel_task.target) ~= nil then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		elseif p1 == "find_item" then			
			if db.actor:object(sel_task.target) ~= nil then
				self.task_info[self.active_task_by_type[p1]].status = "completed"
				return true
			end
		end
	end
	
	return false
end
--' Проверяем, не профейлен ли таск
function CRandomTask:task_fail(p1, p2)
	if p2 == 0 then
		local self_task = self.task_info[self.active_task_by_type[p1]]	
		if p1 == "defend_lager" then
			if alife():object(self_task.selected_target).gulag:get_population_comed() == 0 then
				self.task_info[self.active_task_by_type[p1]].status = "failed"
				return true
			end
		end
		if self_task.status == "refused" or self_task.status == "failed" then
			return true
		end
	end
	return false
end
--' Обнуление переменных при завершении или провале таска
function CRandomTask:task_callback(p1, p2, state)
	if p2 ~= 0 then
		return
	end

	if self.active_task_by_type[p1] == nil then
		return
	end

	if state == task.completed then
		self.task_info[self.active_task_by_type[p1]].status = "normal"
		self.active_task_by_type[p1] = nil	

	elseif state == task.fail then
		self.task_info[self.active_task_by_type[p1]].status = "normal"
		self.active_task_by_type[p1] = nil	

	end
end
--' Выводит список доступных квестов
function CRandomTask:action_task_show(npc, actor)
	local parent = self:get_parent(npc)	
	for k,v in pairs(self.task_id_by_parent[parent]) do		
		if self:task_avail(actor, npc, nil, nil, self.task_info[v].init_phrase_id) then
			local task_texture, task_rect = get_texture_info("ui_icons_task_"..self.task_info[v].type, "ui_iconsTotal_locations")
			db.actor:give_talk_message(game.translate_string(self.task_info[v].name), task_texture, task_rect,"iconed_trade_info")
		end
	end
end
--' Проверка доступен ли текущий таск для выдачи
function CRandomTask:task_avail(actor, npc, p1, p2, p3)
	self:check_task_props(self.task_id_by_init_phrase_id[p3])
	return self.task_info[self.task_id_by_init_phrase_id[p3]].enabled and self.task_info[self.task_id_by_init_phrase_id[p3]].enabled_props
end
--' Проверка свойств таска
function CRandomTask:check_task_props(task_id)
	--' проверка по таргету
	if self.task_info[task_id].type == "eliminate_lager" then
		if self.task_info[task_id].target_objects == nil then
			self.task_info[task_id].enabled_props = false
			return
		end
		for k,v in pairs(self.task_info[task_id].target_objects) do
			local gulag = alife():object(v).gulag
			if gulag:get_population() > 0 then
				self.task_info[task_id].enabled_props = true
				return 
			end
		end
		self.task_info[task_id].enabled_props = false
		return
	elseif self.task_info[task_id].type == "defend_lager" then
		if self.task_info[task_id].target_objects == nil then
			self.task_info[task_id].enabled_props = false
			return
		end
		for k,v in pairs(self.task_info[task_id].target_objects) do
			local defend_object = alife():object(v)
			local sm_ini = defend_object:spawn_ini()
			local defend_target = utils.cfg_get_number(sm_ini, "random_task", "defend_target", nil, true)
			if xr_gulag.getGulagState(defend_target) == 1 then
				self.task_info[task_id].enabled_props = true
				return
			end
		end
		self.task_info[task_id].enabled_props = false
		return
	elseif self.task_info[task_id].type == "kill_stalker" then
		if self.task_info[task_id].target_objects == nil then
			self.task_info[task_id].enabled_props = false
			return
		end
		for k,v in pairs(self.task_info[task_id].target_objects) do
			local obj = alife():object(v)
			if obj ~= nil and
			   obj:alive() == true 
			then
				self.task_info[task_id].enabled_props = true
				return
			else
				self.task_info[task_id].target_objects[k] = nil
			end
		end
		self.task_info[task_id].enabled_props = false
		return
	elseif self.task_info[task_id].type == "find_item" then
		if self.task_info[task_id].target_objects == nil then
			self.task_info[task_id].enabled_props = false
			return
		end
		for k,v in pairs(self.task_info[task_id].target_objects) do
			local obj = alife():object(v)
			if obj ~= nil then
				self.task_info[task_id].enabled_props = true
				return
			end	
			self.task_info[task_id].enabled_props = false
			return
		end
	else
		self.task_info[task_id].enabled_props = true
		return		
	end
end
--' Проверяем можем ли мы сейчас выдать какой либо самоинициализующийся таск
function CRandomTask:actor_update()
	for k,v in pairs(self.task_id_self_inited) do
		if self.task_info[v].status == "normal" then
			if xr_logic.pick_section_from_condlist(db.actor, db.actor, self.task_info[v].init_condition) ~= nil then
				--' Нужно автоматически выдать квест
				self:action_give_task(db.actor, nil, nil, self.task_info[v].yes_phrase_id)
			end
		end
	end
end
--' Проверяется является ли текущий таск выданным игроку
function CRandomTask:active_task(actor, npc, p1, p2, p3)
	return self.task_info[self.task_id_by_init_phrase_id[p3]].status == "selected"
end
--' Создается диалог актера, в котором будут выдаваться задания.
function CRandomTask:init_task_dialog(dlg, parent)
	local phr = dlg:AddPhrase("tm_seek_new_job",0,-1,-10000)
	local phrase_script = phr:GetPhraseScript()

	phr = dlg:AddPhrase("tm_"..parent.."_list_job",1,0,-10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_show")
	phrase_script:AddPrecondition("task_manager.precondition_vendor_can_task")
		
	phr = dlg:AddPhrase("tm_"..parent.."_has_no_job",2,0,-10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddPrecondition("task_manager.precondition_vendor_cannot_task")
	
	for k,v in pairs(self.task_id_by_parent[parent]) do
		phr = dlg:AddPhrase(self.task_info[v].name, self.task_info[v].init_phrase_id, 1, -10000)		
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddPrecondition("task_manager.precondition_task_avail")

		phr = dlg:AddPhrase(self.task_info[v].text, self.task_info[v].desc_phrase_id, self.task_info[v].init_phrase_id, -10000)
		
		phr = dlg:AddPhrase("tm_seek_job_yes", self.task_info[v].yes_phrase_id, self.task_info[v].desc_phrase_id, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("task_manager.action_give_task")

		phr = dlg:AddPhrase("tm_seek_job_no", self.task_info[v].no_phrase_id, self.task_info[v].desc_phrase_id, -10000)
	end

	dlg:AddPhrase("tm_seek_job_abandon",3,1,-10000)
end
--' Функция, в которой будет выдаваться вещевая награда за выполненные квесты
function CRandomTask:task_reward(npc, actor, p1, p2)
	local parent = self:get_parent(npc)	
	for k,v in pairs(self.active_task_by_type) do	
		local task_desc = self.task_info[v]
		if task_desc.status == "completed" and task_desc.parent == parent then
			--' Забираем у игрока квестовый предмет.
			if v.type == "artefact" then
				task_desc.relocate_item_section(npc, task_desc.selected_target, "out")
			elseif v.type == "monster_part" then
				task_desc.relocate_item_section(npc, task_desc.selected_target, "out")
			elseif v.type == "find_item" then
				task_desc.relocate_item_section(npc, task_desc.selected_target, "out")
			end

			self.task_info[v].status = "rewarded"
			
			if task_desc.reward_money ~= nil then
				dialogs.relocate_money(npc, task_desc.reward_money, "in")
			end
			
			if task_desc.reward_item ~= nil then
				for kk,vv in pairs(task_desc.reward_item) do
					dialogs.relocate_item_section(npc, vv, "in")
				end
			end

			if task_desc.reward_reputation ~= nil then
				db.actor:change_character_reputation(db.actor:character_reputation() + task_desc.reward_reputation)
			end

			if task_desc.reward_relation ~= nil then
				for kk,vv in pairs(task_desc.reward_relation) do
					relation_registry.change_community_goodwill (kk, db.actor:id(), tonumber(vv))
				end
			end

			if task_desc.reward_rank ~= nil then
				actor_stats.add_points("quests", task_desc.name, 1, task_desc.reward_rank)
				db.actor:set_character_rank(db.actor:character_rank() + task_desc.reward_rank)
			end
		end	
	end
end
--' Функция, в которой будет выдаваться вещевая награда за выполненные сторилайновые квесты
function CRandomTask:task_reward_storyline(task)
	local task_desc = self.task_info[task:get_id()]
	if task_desc == nil or task_desc.type ~= "storyline" then
		return
	end

	if task_desc.reward_reputation ~= nil then
		db.actor:change_character_reputation(db.actor:character_reputation() + task_desc.reward_reputation)
	end

	if task_desc.reward_relation ~= nil then
		for kk,vv in pairs(task_desc.reward_relation) do
			relation_registry.change_community_goodwill (kk, db.actor:id(), tonumber(vv))
		end
	end

	if task_desc.reward_rank ~= nil then
		actor_stats.add_points("quests", task_desc.name, 1, task_desc.reward_rank)
		db.actor:set_character_rank(db.actor:character_rank() + task_desc.reward_rank)
	end
end
--' Создается диалог актера, в котором будут приниматься задания
function CRandomTask:init_reward_dialog(dlg, parent)
	local phr = dlg:AddPhrase("tm_reward_job",0,-1,-10000)
	local phrase_script = phr:GetPhraseScript()

	phr = dlg:AddPhrase("tm_"..parent.."_job_complete", 1, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_reward")
	phrase_script:AddPrecondition("task_manager.precondition_have_completed_job")
			
	phr = dlg:AddPhrase("tm_"..parent.."_job_ask", 2, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddPrecondition("task_manager.precondition_dont_have_completed_job")

	
	-- Список возможных квестов трейдера.
	for k,v in pairs(self.task_id_by_parent[parent]) do
		phr = dlg:AddPhrase(self.task_info[v].name, self.task_info[v].init_phrase_id, 2, -10000)
		phrase_script = phr:GetPhraseScript()		
		phrase_script:AddPrecondition("task_manager.precondition_active_task")
		
		phr = dlg:AddPhrase("tm_"..parent.."_job_what", self.task_info[v].desc_phrase_id, self.task_info[v].init_phrase_id, -10000)
		
		phr = dlg:AddPhrase("tm_job_refuse", self.task_info[v].yes_phrase_id, self.task_info[v].desc_phrase_id, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("task_manager.action_refuse_task")
			
		phr = dlg:AddPhrase("tm_job_nothing", self.task_info[v].no_phrase_id, self.task_info[v].desc_phrase_id,-10000)
	end

end
--' Регистрация целей для квестов.
function CRandomTask:register_target(obj)
	if IsStalker(obj) then
		--' Возможно регистрируется цель для квеста "убить сталкера"
		for k,v in pairs(self.task_id_by_type["kill_stalker"]) do	
			if obj.alive ~= nil and obj:alive() == true and
				obj:profile_name() == self.task_info[v].target 
			then
				if self.task_info[v].target_objects == nil then
					self.task_info[v].target_objects = {}
				end
				table.insert(self.task_info[v].target_objects, obj.id)
			end
		end

	elseif obj:clsid() == clsid.smart_terrain then
		--' Возможно регистрируется цель для квеста "вынести лагерь"
		for k,v in pairs(self.task_id_by_type["eliminate_lager"]) do
			if obj:name() == self.task_info[v].target then
				if self.task_info[v].target_objects == nil then
					self.task_info[v].target_objects = {}
				end
				table.insert(self.task_info[v].target_objects, obj.id)
			end
		end
		--' Либо регистрируется цель для квеста "защитить лагерь"
		for k,v in pairs(self.task_id_by_type["defend_lager"]) do
			if obj:name() == self.task_info[v].target then
				--' Проверка что в кастом дате указано от кого защищать
				local sm_ini = obj:spawn_ini()
				local defend_target = utils.cfg_get_number(sm_ini, "random_task", "defend_target", nil, true)
				if self.task_info[v].target_objects == nil then
					self.task_info[v].target_objects = {}
				end
				table.insert(self.task_info[v].target_objects, obj.id)
			end
		end

	else
		--' Возможно регистрируется цель для квеста "найти предмет"
		for k,v in pairs(self.task_id_by_type["find_item"]) do
			if obj:section_name() == self.task_info[v].target then
				if self.task_info[v].target_objects == nil then
					self.task_info[v].target_objects = {}
				end
				table.insert(self.task_info[v].target_objects, obj.id)
			end				
		end
	end
end


function get_random_task()
	if random_task == nil then
		random_task = CRandomTask()
	end
	return random_task
end


function init_trader_task_dialog(dlg)
	get_random_task():init_task_dialog(dlg, "trader")
end
function init_barman_task_dialog(dlg)
	get_random_task():init_task_dialog(dlg, "barman")
end
function init_ecolog_task_dialog(dlg)
	get_random_task():init_task_dialog(dlg, "ecolog")
end
function init_dolg_task_dialog(dlg)
	get_random_task():init_task_dialog(dlg, "dolg")
end
function init_freedom_task_dialog(dlg)
	get_random_task():init_task_dialog(dlg, "freedom")
end

function init_trader_reward_dialog(dlg)
	get_random_task():init_reward_dialog(dlg, "trader")
end
function init_barman_reward_dialog(dlg)
	get_random_task():init_reward_dialog(dlg, "barman")
end
function init_ecolog_reward_dialog(dlg)
	get_random_task():init_reward_dialog(dlg, "ecolog")
end
function init_dolg_reward_dialog(dlg)
	get_random_task():init_reward_dialog(dlg, "dolg")
end
function init_freedom_reward_dialog(dlg)
	get_random_task():init_reward_dialog(dlg, "freedom")
end

function has_active_vendor_task(actor, npc)
	return get_random_task():active_parent_task(actor, npc)
end
function precondition_task_avail(actor, npc, p1, p2, p3)
	return get_random_task():task_avail(actor, npc, p1, p2, p3)
end
function precondition_active_task(actor, npc, p1, p2, p3)
	return get_random_task():active_task(actor, npc, p1, p2, p3)
end

function precondition_vendor_can_task(npc, actor, p1, p2, p3)
	return get_random_task():parent_can_task(actor, npc, p1, p2, p3)
end
function precondition_vendor_cannot_task(npc, actor, p1, p2, p3)
	return not get_random_task():parent_can_task(actor, npc, p1, p2, p3)
end
function precondition_have_completed_job(npc, actor, p1, p2, p3)
	return get_random_task():have_completed_job(actor, npc)
end
function precondition_dont_have_completed_job(npc, actor, p1, p2, p3)
	return not get_random_task():have_completed_job(actor, npc)
end

function action_task_show(npc, actor)
	get_random_task():action_task_show(npc, actor)
end
function action_give_task(actor, npc, p1, p2)
	get_random_task():action_give_task(actor, npc, p1, p2)
end
function action_refuse_task(npc, actor, p1, p2)
	get_random_task():action_refuse_task(npc, actor, p1, p2)
end
function action_task_reward(actor, npc, p1, p2)
	get_random_task():task_reward(actor, npc, p1, p2)
end
function reward_by_task(task)	
	get_random_task():task_reward_storyline(task)
end

function task_complete(p1, p2)
	return get_random_task():task_complete(p1, p2)
end
function task_fail(p1, p2)
	return get_random_task():task_fail(p1, p2)
end
function task_callback(p1, p2, state)
	return get_random_task():task_callback(p1, p2, state)
end

function actor_update()
	get_random_task():actor_update()
end


function save(p)
	get_random_task():save(p)
end
function load(p)
	get_random_task():load(p)
end
function clear_task_manager()
	random_task	 = nil
end