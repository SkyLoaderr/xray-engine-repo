local task_ini = ini_file("misc\\task_manager.ltx")

local k,v,kk,vv = 0,0,0,0 -- инициализация итераторов
	
local task_trader_id = 0
local task_barman_id = 0
local task_ecolog_id = 0
local task_dolg_id = 0
local task_freedom_id = 0

local task_table_filled = false
local task_info = {
			trader  = {},
			barman  = {},
			ecolog  = {},
			dolg    = {},
			freedom = {}}

local task_by_phrase = {}  -- таблица соответствий ID фраз заданиям.
local active_task = {} -- таблица активных заданий

local parent_by_story = {
	[001] = "trader",
	[500] = "barman",
	[902] = "ecolog",
	[507] = "dolg",
	[707] = "freedom"}

local story_by_parent = {
	trader = 003,
	barman = 500,
	ecolog = 902,
	dolg = 507,
	freedom = 707}

local return_task_by_type = {
	eliminate_lager = "return_for_reward",
	kill_stalker = "return_for_reward",
	artefact = "return_for_reward_bring",
	monster_part = "return_for_reward_bring",
	find_tem = "return_for_reward_bring"}

function get_id(type)
	if type == "trader" then
		task_trader_id = task_trader_id + 1
		return task_trader_id
	elseif type == "barman" then
		task_barman_id = task_barman_id + 1
		return task_barman_id
	elseif type == "ecolog" then
		task_ecolog_id = task_ecolog_id + 1
		return task_ecolog_id
	elseif type == "dolg" then
		task_dolg_id = task_dolg_id + 1
		return task_dolg_id
	elseif type == "freedom" then
		task_freedom_id = task_freedom_id + 1
		return task_freedom_id
	else
		abort("Task manager error: unknown GET_ID() type")
	end
end

-- Необходимо сформировать набор предикатов  table[string_id] = predicate()
function fill_phrase_table()
	-- Итерируемся по всем настройкам фраз
	if not task_ini:section_exist("list") then
		abort("There is no section [list] in task_manager.ltx")
	end
	local n = task_ini:line_count("list")
	local id, value = "",""
	local category = ""
	
	for i=0,n-1 do
		result, id, value	= task_ini:r_line("list",i,"","")
		
		if not task_ini:section_exist(id) then
			abort("There is no section [%s] in task_manager.ltx", id)
		end		
		-- 2. Необходимо сформировать набор предикатов  table[string_id] = predicate()
		if not task_ini:line_exist(id, "type") then
			abort("Task manager error: no type in section [%s]", id)
		end
		if not task_ini:line_exist(id, "parent") then
			abort("Task manager error: no parent in section [%s]", id)
		end
		if not task_ini:line_exist(id, "target") then
			abort("Task manager error: no target in section [%s]", id)
		end
		if not task_ini:line_exist(id, "text") then
			abort("Task manager error: no text in section [%s]", id)
		end
		if not task_ini:line_exist(id, "description") then
			abort("Task manager error: no description in section [%s]", id)
		end

		type = task_ini:r_string(id, "type")
		parent = task_ini:r_string(id, "parent")		
		if task_info[parent] == nil then
			abort("Task manager error: wrong parent in section [%s]", id)
		end

		local tt = {}
		tt.name = id
		tt.parent = parent
		tt.type = type
		tt.target = task_ini:r_string(id, "target")
		tt.target_objects = {}
		tt.text = task_ini:r_string(id, "text")
		tt.description = task_ini:r_string(id, "description")				
		
		tt.reward_money = utils.cfg_get_number(task_ini, id, "reward_money", nil, false)
		tt.reward_reputation = utils.cfg_get_number(task_ini, id, "reward_reputation", nil, false)
		
		local sss = utils.cfg_get_string(task_ini, id, "reward_item", nil, false, "")
		if sss ~= nil then
			tt.reward_item = parse_names(sss) 
		else
			tt.reward_item = sss
		end
		
		tt.reward_relation = parse_key_value(utils.cfg_get_string(task_ini, id, "reward_relation", nil, false, ""))
		
		if task_ini:line_exist(id, "community") then
			tt.community = task_ini:r_string(id, "community")
		end		
		if task_ini:line_exist(id, "condlist") then
			tt.condlist = xr_logic.parse_condlist(db.actor, "task_manager", "condlist", task_ini:r_string(id, "condlist"))
		end

		table.insert(task_info[parent], tt)
	end
end






-- Создается диалог актера, в котором будут выдаваться задания.
function init_task_dialog(dlg, parent)
	if task_table_filled == false then
		fill_phrase_table()
		task_table_filled = true
	end

	local phr = dlg:AddPhrase("tm_seek_new_job",0,-1,-10000)
	local phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_init")

	phr = dlg:AddPhrase("tm_"..parent.."_list_job",get_id(parent),0,-10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_show")
	phrase_script:AddPrecondition("task_manager.precondition_vendor_can_task")
		
	phr = dlg:AddPhrase("tm_"..parent.."_has_no_job",get_id(parent),0,-10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddPrecondition("task_manager.precondition_vendor_cannot_task")
	
	-- Изначально считаем что каждый сталкер знает ВСЮ информацию. Не забыть потом
	-- вставить инфопоршн, что сталкер сам знает информацию
	for k,v in pairs(task_info[parent]) do
		local phrase_id = get_id(parent)
		phr = dlg:AddPhrase(v.name,phrase_id,1,-10000)		
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddPrecondition("task_manager.precondition_active_task")

		local phrase_id_descr = get_id(parent)
		phr = dlg:AddPhrase(v.text,phrase_id_descr, phrase_id,-10000)
		
		phrase_id = get_id(parent)
		phr = dlg:AddPhrase("tm_seek_job_yes",phrase_id,phrase_id_descr,-10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("task_manager.action_give_task")
		task_by_phrase[phrase_id] = v

		phr = dlg:AddPhrase("tm_seek_job_no",get_id(parent),phrase_id_descr,-10000)
	end

	dlg:AddPhrase("tm_seek_job_abandon",get_id(parent),1,-10000)
end
function init_trader_task_dialog(dlg)
	init_task_dialog(dlg, "trader")
end
function init_barman_task_dialog(dlg)
	init_task_dialog(dlg, "barman")
end
function init_ecolog_task_dialog(dlg)
	init_task_dialog(dlg, "ecolog")
end
function init_dolg_task_dialog(dlg)
	init_task_dialog(dlg, "dolg")
end
function init_freedom_task_dialog(dlg)
	init_task_dialog(dlg, "freedom")
end




local call_count, max_count = 0,0
local show_tbl = {}
local tmp_tbl = {}
function action_task_init(actor, npc)
	local parent = get_parent(npc)
	
	max_count = 0
	tmp_tbl = {}
	show_tbl = {}
	for k,v in pairs(task_info[parent]) do	
		max_count = max_count + 1
		if calculate_predicate(npc, v) == true then
			table.insert(show_tbl, k)
			tmp_tbl[max_count] = true
		end		
	end
end
function action_give_task(actor, npc, p1, p2)
	local task = CGameTask()
	
	local task_desc = task_by_phrase[p2]
	
	task:load(task_desc.type)
	task:set_title(task_desc.type)
	
	local objective = SGameTaskObjective(task,1)
	objective:set_description(task_desc.text)
	objective:set_article_id(task_desc.description)
	if task_desc.type == "eliminate_lager" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)	    
	elseif task_desc.type == "kill_stalker" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)
	elseif task_desc.type == "find_item" then
		objective:set_map_hint(task_desc.text)
		objective:set_map_location("green_location")
		objective:set_object_id(task_desc.selected_target)
	end
	objective:add_complete_func("task_manager.task_complete")
	task:add_objective(objective)

	objective = SGameTaskObjective(task,2)
	objective:set_description(return_task_by_type[task_desc.type])

	objective:set_map_hint(return_task_by_type[task_desc.type])
	objective:set_map_location("blue_location")
	objective:set_object_id(alife():story_object(tonumber(story_by_parent[task_desc.parent])).id)
	
	task:add_objective(objective)
	
	db.actor:give_task(task,false)


	active_task[task_desc.type] = task_desc
end
function action_task_show(npc, actor)
	local parent = get_parent(npc)
	
	for k,v in pairs(show_tbl) do
		db.actor:give_talk_message(task_info[parent][v].name, "ui\\ui_icons_task", Frect():set(350,150,50,50),"iconed_trade_info")
	end
end






-- Создается диалог актера, в котором будут приниматься задания
function init_reward_dialog(dlg, parent)
	if task_table_filled == false then
		fill_phrase_table()
		task_table_filled = true
	end

	local phr = dlg:AddPhrase("tm_reward_job",0,-1,-10000)
	local phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_init")

	phr = dlg:AddPhrase("tm_"..parent.."_job_complete",get_id(parent),0,-10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_task_reward")
	phrase_script:AddPrecondition("task_manager.precondition_have_completed_job")
			
	local phrase_ask = get_id(parent)
	phr = dlg:AddPhrase("tm_"..parent.."_job_ask",phrase_ask,0,-10000)	
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("task_manager.action_has_active_task_init")
	phrase_script:AddPrecondition("task_manager.precondition_dont_have_completed_job")
	
	-- Список возможных квестов трейдера.
	for k,v in pairs(task_info[parent]) do
		local phrase_id = get_id(parent)
		
		phr = dlg:AddPhrase(v.name,phrase_id,phrase_ask,-10000)
		phrase_script = phr:GetPhraseScript()		
		phrase_script:AddPrecondition("task_manager.precondition_active_task")
		
		local phrase_reply = get_id(parent)
		phr = dlg:AddPhrase("tm_"..parent.."_job_what",phrase_reply,phrase_id,-10000)
		
		local refuse_id = get_id(parent)
		phr = dlg:AddPhrase("tm_job_refuse",refuse_id,phrase_reply,-10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("task_manager.action_refuse_task")
		task_by_phrase[refuse_id] = v
			
		phr = dlg:AddPhrase("tm_job_nothing",get_id(parent),phrase_reply,-10000)
	end
end
function init_trader_reward_dialog(dlg)
	init_reward_dialog(dlg, "trader")
end
function init_barman_reward_dialog(dlg)
	init_reward_dialog(dlg, "barman")
end
function init_ecolog_reward_dialog(dlg)
	init_reward_dialog(dlg, "ecolog")
end
function init_dolg_reward_dialog(dlg)
	init_reward_dialog(dlg, "dolg")
end
function init_freedom_reward_dialog(dlg)
	init_reward_dialog(dlg, "freedom")
end


function action_has_active_task_init(npc, actor)
	local parent = get_parent(npc)
	
	max_count = 0
	show_tbl = {}
	tmp_tbl = {}
	for k,v in pairs(task_info[parent]) do	
		max_count = max_count + 1
		if active_task[v.type] ~= nil then		
			table.insert(show_tbl, k)
			tmp_tbl[max_count] = true
		end		
	end
end
function action_task_reward(npc, actor)
	local parent = get_parent(npc)
		
	for k,v in pairs(active_task) do	
		if v.completed == true and v.parent == parent then
			if v.type == "artefact" then
				dialogs.relocate_item(npc, db.actor:object(v.target), "out")
			elseif v.type == "monster_part" then
				dialogs.relocate_item(npc, db.actor:object(v.target), "out")
			elseif v.type == "find_item" then
				dialogs.relocate_item(npc, db.actor:object(v.target), "out")
			end

			active_task[v.type].full_completed = true

			if v.reward_money ~= nil then
				dialogs.relocate_money(npc, v.reward_money, "in")
			end

			if v.reward_reputation ~= nil then
				db.actor:change_character_reputation(db.actor:character_reputation() + v.reward_reputation)
			end
			
			if v.reward_item ~= nil then
				for k,v in pairs(v.reward_item) do
					if npc:object(v) ~= nil then
						dialogs.relocate_item(npc, npc:object(v), "in")
					else
						break
					end
				end
			end

			if v.reward_relation ~= nil then
				for k,v in pairs(v.reward_relation) do
					relation_registry.change_community_goodwill (k, db.actor:id(), tonumber(v))
				end
			end



							
			-- устанавливаем время последнего обновления задания
			for kk,vv in pairs(task_info[parent]) do
				if vv.name == v.name then
					vv.last_time = game.get_game_time()
					return
				end
			end			
		end	
	end
end
function precondition_active_task(actor, npc)
	call_count = call_count + 1
	if call_count < max_count then
		-- При повторном вызове прекондишна (счетчик вызовов не равен количеству сработанных предикатов) 
		-- всегда возвращаем FALSE, кроме случая, что счетчик равен ранее запомненному порядковому номеру вызова.
		return tmp_tbl[call_count] == true
	elseif call_count >= max_count then
		-- Как только счетчик дошел до конца - обнуляем все счетчики. Выбор произведен.
		local return_value = tmp_tbl[call_count] == true
		tmp_tbl = {}
		call_count, max_count = 0,0
		return return_value
	end
end
function action_refuse_task(actor, npc, p1, p2)
	local parent = get_parent(npc)
	local task_desc = task_by_phrase[p2]

	active_task[task_desc.type].full_completed = false

	-- устанавливаем время последнего отказа от задания
	for k,v in pairs(task_info[parent]) do
		if v.name == task_desc.name then
			v.last_time = game.get_game_time()
			return
		end
	end
end
function has_active_vendor_task(actor, npc)
	local parent = get_parent(npc)
	
	for k,v in pairs(active_task) do
		if v.parent == parent and
		   v.full_completed == nil
		then
			return true
		end
	end	
	return false
end
function precondition_have_completed_job(npc,actor)
	local parent = get_parent(npc)
	for k,v in pairs(active_task) do
		if v.parent == parent and v.completed == true then
			if v.type == "eliminate_lager" then
				return true
			elseif v.type == "kill_stalker" then
				return true
			elseif v.type == "artefact" then
				if db.actor:object(v.target) ~= nil then
					return true
				end
			elseif v.type == "monster_part" then
				if db.actor:object(v.target) ~= nil then
					return true
				end
			elseif v.type == "find_item" then
				if db.actor:object(v.target) ~= nil then
					return true
				end
			end			
		end
	end	
	return false
end
function precondition_dont_have_completed_job(npc,actor)
	return not precondition_have_completed_job(npc,actor)
end








function get_parent(npc)
	local story_id = npc:story_id()
	if parent_by_story[story_id] == nil then
		abort("Task manager error: wrong parent story_id[%s]", story_id)
	end
	return parent_by_story[story_id]
end
function precondition_vendor_can_task(npc, actor)
	return table.getn(show_tbl) > 0
end
function precondition_vendor_cannot_task(npc, actor)
	return table.getn(show_tbl) == 0
end




function calculate_predicate(npc, tbl)
	local parent = get_parent(npc)
	local aa = alife()

	if tbl.parent ~= nil then
		if tbl.parent ~= parent then return false end
	end
	if tbl.community ~= nil then
		if tbl.community ~= db.actor:character_community() then return false end
	end
	if tbl.condlist ~= nil then
		if xr_logic.pick_section_from_condlist(db.actor, db.actor, tbl.condlist) ~= "true" then return false end
	end


	-- Проверка что квест еще не выдан
	if active_task[tbl.type] ~= nil then
		return false
	end
	
	-- Проверка по времени последнего выполнения/проваливания
	if tbl.last_time ~= nil and game.get_game_time():diffSec(tbl.last_time) < 18000 then
		return false
	end

	-- проверка по таргету
	if tbl.type == "eliminate_lager" then
		for k,v in pairs(tbl.target_objects) do
			local gulag = aa:object(v).gulag
			if gulag:get_population() == 0 then
				tbl.selected_target = v
				return true
			end
		end
	elseif tbl.type == "kill_stalker" then
		for k,v in pairs(tbl.target_objects) do
			local obj = aa:object(v)
			if obj ~= nil and
			   obj:alive() == true 
			then
				tbl.selected_target = v
				return true
			else
				tbl.target_objects[k] = nil
				return false
			end
		end
		return false
	elseif tbl.type == "find_item" then
		local obj = aa:object(tbl.target)
		if obj == nil then
			return false
		end	
	end
	

	return true
end





function task_complete(p1, p2)
	local aa = alife()
	if aa == nil then
		return
	end

	if p2 == 0 then
		if active_task[p1].full_completed == true then
			active_task[p1].full_completed = nil
			active_task[p1].completed = nil
			active_task[p1].selected_target = nil
			active_task[p1] = nil
			return true
		end
		return false
	end

	if p2 == 1 then
		if p1 == "eliminate_lager" then
			if aa:story_object(tonumber(active_task[p1].selected_target)).gulag:get_population() == 0 then
				active_task[p1].completed = true
				return true
			end
		elseif p1 == "kill_stalker" then
			if aa:object(active_task[p1].selected_target):alive() == false then
				active_task[p1].completed = true
				return true
			end
		elseif p1 == "artefact" then			
			if db.actor:object(active_task[p1].target) ~= nil then
				active_task[p1].completed = true
				return true
			end
		elseif p1 == "monster_part" then			
			if db.actor:object(active_task[p1].target) ~= nil then
				active_task[p1].completed = true
				return true
			end
		elseif p1 == "find_item" then			
			if db.actor:object(active_task[p1].target) ~= nil then
				active_task[p1].completed = true
				return true
			end
		end
	end
	
	return false
end
function task_fail(p1, p2)
	if active_task[p1].full_completed == false then
		active_task[p1].full_completed = nil
		active_task[p1].completed = nil
		active_task[p1].selected_target = nil
		active_task[p1] = nil
		return true
	end
	return false
end


function register_target(object)
	if task_table_filled == false then
		fill_phrase_table()
		task_table_filled = true
	end
	
	for k,v in pairs(task_info) do
		for kk,vv in pairs(v) do
			if vv.type == "kill_stalker" then
				if object.alive ~= nil and object:alive() == true and
				   object:section_name() == vv.target 
				then
					table.insert(vv.target_objects, object.id)
				end
			elseif vv.type == "eliminate_lager" then
				if object:name() == vv.target 
				then
					table.insert(vv.target_objects, object.id)
				end			
			elseif vv.type == "find_item" then
				if object:section_name() == vv.target 
				then
					table.insert(vv.target_objects, object.id)
				end			
			end
		end
	end
end