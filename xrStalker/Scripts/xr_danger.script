----------------------------------------------------------------------------------------------------------------------
--'	Схема кемпер. Чудак с бальшой пушкой ходит и отстреливает живность.
--'	автор: Диденко Руслан (Stohe)
--'	TODO: 
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
--' Условие завершения скрипта
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_danger:evaluate()
	-- проверка на активную схему
	active_scheme = db.storage[self.object:id()].active_scheme
	if active_scheme == nil then
		if xr_wounded.is_wounded(self.object) then
			return true
		end
		if xr_wounded.is_heavy_wounded_by_id(self.object:id()) then
			return true
		end
		if xr_meet.is_meet(self.object)	then
			return true
		end
		--printf("DANGER [%s] [FALSE] alive", self.object:name())
		return false		
	end

	best_danger = self.object:best_danger()
	db.storage[self.object:id()].enemy = best_danger:object()
	
	-- отсеиваем по настройке combat_ignore/danger
	local overrides = xr_logic.generic_scheme_overrides(self.object)
	if overrides and
	   overrides.combat_ignore and
	   active_scheme ~= nil and
	   xr_logic.pick_section_from_condlist(db.actor, self.object, overrides.combat_ignore.condlist ) ~= nil
	then
		return true
	end


	-- проверка на денжер.
	if best_danger == nil then
		return true
	end

	if self.object:best_enemy() then
		return true
	end
	
	-- инерция возврата
	if self.danger_time and
	   time_global() - self.danger_time < 10000 then
	   return false
	end

	if time_global() - best_danger:time() >= 5000 then
		return true
	end

	danger_distance_sqr = best_danger:position():distance_to_sqr(self.object:position())	
	if danger_distance_sqr > 100 then
		return true
	end
--	printf("danger_distance_sqr [%s]", tostring(danger_distance_sqr))			
--	printf("danger_name [%s]", tostring(best_danger:object():name()))
	
	if xr_wounded.is_heavy_wounded_by_id(self.object:id()) then
		return true
	end
	
	if active_scheme == "camper" then
		if best_danger:type() == danger_object.grenade then
			self.danger_time = time_global()
			--printf("DANGER [%s] [FALSE] camper", self.object:name())
			return false
		else
			return true	
		end
	else
		self.danger_time = time_global()
		--printf("DANGER [%s] [FALSE] other", self.object:name())
		return false
	end
	--printf("DANGER [%s] [FALSE] default", self.object:name())
	return false
end


----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)
  		local operators	= {}
	  	local properties  = {}
		
	   	local manager = object:motivation_action_manager()

		properties["danger"]	= xr_evaluators_id.danger
		
		manager:add_evaluator (properties["danger"], this.evaluator_danger("script_danger", storage))

		action = manager:action (stalker_ids.action_danger_planner)
		action:add_precondition (world_property(properties["danger"],	false))
		action:add_effect		(world_property(properties["danger"],	true))
end
function set_danger(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end