----------------------------------------------------------------------------------------------------------------------
--'	Схема кемпер. Чудак с бальшой пушкой ходит и отстреливает живность.
--'	автор: Диденко Руслан (Stohe)
--'	TODO: 
----------------------------------------------------------------------------------------------------------------------
--function printf()
--end

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
--' Условие завершения скрипта
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_danger:evaluate()
	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end

	-- проверка на активную схему
	active_scheme = db.storage[self.object:id()].active_scheme
	printf("DANGER [%s] active scheme [%s]", self.object:name(), tostring(active_scheme))
	if active_scheme == nil then
		if self.mgr:evaluator(xr_evaluators_id.sidor_wounded_base):evaluate() then
			printf("DANGER [%s] [TRUE] alive wounded", self.object:name())
			return true
		end
		if self.mgr:evaluator(xr_evaluators_id.stohe_meet_base + 1):evaluate() then
			printf("DANGER [%s] [TRUE] alive meet", self.object:name())
			return true
		end
		printf("DANGER [%s] [FALSE] alive", self.object:name())
		return false		
	end

	best_danger = self.object:best_danger()
	-- проверка на денжер.
	if best_danger == nil then
		printf("DANGER [%s] [TRUE] no danger", self.object:name())
		return true
	end

	-- Проверка, не находится ли данжер в списке запрещенных.
	local bd_type = best_danger:type()	
	if bd_type == danger_object.grenade then
		if self.a.ignore_types["grenade"] == true then
			printf("DANGER [%s] [TRUE] ignore grenade", self.object:name())
			return true			
		end
	elseif bd_type == danger_object.entity_corpse then
		if self.a.ignore_types["corpse"] == true then
			printf("DANGER [%s] [TRUE] ignore corpse", self.object:name())
			return true			
		end
	elseif bd_type == danger_object.entity_attacked then
		if self.a.ignore_types["hit"] == true then
			printf("DANGER [%s] [TRUE] ignore hit", self.object:name())
			return true			
		end	
	elseif bd_type == danger_object.enemy_sound or
	       bd_type == danger_object.attack_sound then
		if self.a.ignore_types["sound"] == true then
			printf("DANGER [%s] [TRUE] ignore sound", self.object:name())
			return true			
		end	
	end
    
	




	db.storage[self.object:id()].enemy = best_danger:object()
	
	-- отсеиваем по настройке combat_ignore/danger
	local overrides = xr_logic.generic_scheme_overrides(self.object)
	if overrides and
	   overrides.combat_ignore and
	   active_scheme ~= nil and
	   xr_logic.pick_section_from_condlist(db.actor, self.object, overrides.combat_ignore.condlist ) ~= nil
	then
		printf("DANGER [%s]->[%s] [TRUE] ignore_danger", self.object:name(), best_danger:object():name())
		return true
	end



	if self.object:best_enemy() then
		printf("DANGER [%s]->[%s] [TRUE] enemy", self.object:name(), best_danger:object():name())
		return true
	end
	
	-- инерция возврата. Только не для кемпера.
	if self.danger_time and
	   time_global() - self.danger_time < 10000 then
	   printf("DANGER [%s]->[%s] [FALSE] inertion time", self.object:name(), best_danger:object():name())
	   return false
	end

	if time_global() - best_danger:time() >= 5000 then
		printf("DANGER [%s]->[%s] [TRUE] extra time", self.object:name(), best_danger:object():name())
		return true
	end

	danger_distance_sqr = best_danger:position():distance_to_sqr(self.object:position())	
	if danger_distance_sqr > self.a.ignore_distance*self.a.ignore_distance then
		printf("DANGER [%s]->[%s] [TRUE] extra dist [%s]", self.object:name(), best_danger:object():name(), danger_distance_sqr)
		return true
	end
--	printf("danger_distance_sqr [%s]", tostring(danger_distance_sqr))			
--	printf("danger_name [%s]", tostring(best_danger:object():name()))
	
	if xr_wounded.is_heavy_wounded_by_id(self.object:id()) then
		printf("DANGER [%s]->[%s] [TRUE] heavy_wounded", self.object:name(), best_danger:object():name())
		return true
	end
	
	if active_scheme == "camper" then
		if best_danger:type() == danger_object.grenade then
			self.danger_time = time_global()
			printf("DANGER [%s]->[%s] [FALSE] camper", self.object:name(), best_danger:object():name())
			return false
		else
			return true	
		end
	else
		self.danger_time = time_global()
		printf("DANGER [%s]->[%s] [FALSE] other", self.object:name(), best_danger:object():name())
		return false
	end
	printf("DANGER [%s]->[%s] [FALSE] default", self.object:name(), best_danger:object():name())
	return false
end


----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)
  		local operators	= {}
	  	local properties  = {}
		
	   	local manager = object:motivation_action_manager()

		properties["danger"]	= xr_evaluators_id.danger
		
		manager:add_evaluator (properties["danger"], this.evaluator_danger("script_danger", storage))

		action = manager:action (stalker_ids.action_danger_planner)
		action:add_precondition (world_property(properties["danger"],	false))
		action:add_effect		(world_property(properties["danger"],	true))
end
function set_danger(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function reset_danger(npc, scheme, st, section)
	local danger_section
	if scheme ~= nil and scheme ~= "nil" then
		danger_section = utils.cfg_get_string(st.ini, section, "danger", npc, false, "")
	end
	
	printf("DANGER SECTION [%s]", utils.to_str(danger_section))
	st.danger.ignore_types = {}
	if danger_section then
		st.danger.ignore_distance = utils.cfg_get_number(st.ini, danger_section, "ignore_distance", npc, false)
		local t = parse_names(utils.cfg_get_string(st.ini, danger_section, "ignore_types", npc, false, "", ""))
		for k,v in t do
			st.danger.ignore_types[v] = true
		end
	end
	if st.danger.ignore_distance == nil then
		st.danger.ignore_distance = 10
	end
end