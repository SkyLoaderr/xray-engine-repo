-- Created by: Andrey Fidrya (af@svitonline.com) aka Zmey

local state_moving = 1
local state_standing = 2

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_assassin" (property_evaluator)

function evaluator_need_assassin:__init(storage) super()
  	self.st = storage
end

function evaluator_need_assassin:evaluate()
	--printf("assassin [%s] best_target = ", self.object:name()--[[,
	--	if_then_else(self.object:best_target(), self.object:best_target():name(), "none")]])
	--]]
	return self.st.enabled == true
end

----------------------------------------------------------------------------------------------------------------------
class "action_assassin_activity" (action_base)

function action_assassin_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
end

function action_assassin_activity:initialize()
	--printf("_bp: action_assassin_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self:reset_scheme()
end

function action_assassin_activity:get_target()
	if self.st.target == "actor" then
		return level.actor()
	else
		return level.object(self.st.target)
	end
end

function action_assassin_activity:new_shoot_angle_change_time()
	return device():time_global() + math.random(2000) + 500
end

function action_assassin_activity:reset_scheme()
	self.object:set_path_type(game_object.level_path)
	self.object:set_detail_path_type(move.line)
	self.object:set_body_state(move.standing)
        self.object:set_movement_type(move.stand)
	self.object:set_sight(look.danger, nil, 0)
	self.object:set_mental_state(anim.danger)

	self.object:set_item(object.idle, self.object:best_weapon())

	xr_reactions.add_rule(self.object, "ignore")

	self.object:clear_animations()

	self.move_expiration_time = 0
	
	self.shoot_angle_change_time = self:new_shoot_angle_change_time()
	self.shoot_angle = 30

	self.shall_shoot = 0
	self.shoot_expiration_time = device():time_global() + 2000
	
	self.state = state_standing
end	

function action_assassin_activity:execute()
	action_base.execute(self)
	
	if not self.target then
		self.target = self:get_target()
		if not self.target then
			--printf("_bp: ???")
			return
		end
	end
	if not self.target:alive() then
		--printf("_bp: DEAD")
		self.st.enabled = false
		return
	end

	if device():time_global() >= self.shoot_expiration_time then
		if self.shall_shoot == 0 then
			self.shall_shoot = 1
			self.shoot_expiration_time = device():time_global() + 5000
		else
			self.shall_shoot = 0
			self.shoot_expiration_time = device():time_global() + 3000
		end
	end
	
	if self.shall_shoot == 0 then 
		--printf("NO SHOOT")
		self.object:set_item(object.idle, self.object:best_weapon())
	else
		--printf("SHOOT")
		self.object:set_item(object.fire1, self.object:best_weapon())
	end

	if self.state == state_standing or device():time_global() >= self.move_expiration_time then
		local see_target = self.object:see(self.target)
		if distance_between(self.target, self.object) > 7 or not see_target then
			--printf("MOVING")
			self.object:set_path_type(game_object.level_path)
			self.object:set_detail_path_type(move.line)
			self.object:set_desired_direction(self.target:direction())
			self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
			self.object:set_movement_type(if_then_else(see_target, move.run, move.walk))
			self.state = state_moving
			self.move_expiration_time = device():time_global() + 500
		end
	end
		
	if self.state == state_moving and distance_between(self.target, self.object) <= 5 and
			self.object:see(self.target) then
		--printf("STANDING")
		self.object:set_movement_type(move.stand)
		self.state = state_standing
	end
	
	if device():time_global() >= self.shoot_angle_change_time then
		if self.shoot_angle == 30 then
			self.shoot_angle = -30
		else
			self.shoot_angle = 30
		end
		self.shoot_angle_change_time = self:new_shoot_angle_change_time()
	end
	utils.stalker_look_at_stalker_angle(self.object, self.target, self.shoot_angle)
end

function action_assassin_activity:finalize()
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--assassin binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini)
	printf("xr_assassin: add_to_binder: _bp1: %s", npc:name())
	if char_ini == nil or char_ini:section_exist ("assassin") == true then
		printf("xr_assassin: add_to_binder: _bp2")
  		local operators	= {}
	  	local properties  = {}

	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
		properties["state_end"] = xr_evaluators_id.state_change
	 	properties["need_assassin"] = xr_evaluators_id.zmey_assassin_base + 1

	 	operators["action_assassin"] = xr_actions_id.zmey_assassin_base + 1
	 	operators["action_assassin_2"] = xr_actions_id.zmey_assassin_base + 2

	   	-- // evaluators
		manager:add_evaluator(properties["need_assassin"], this.evaluator_need_assassin(xr_motivator.storage[npc:id()].assassin))

		local new_action = this.action_assassin_activity(npc, "action_assassin_activity", xr_motivator.storage[npc:id()].assassin)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(properties["need_assassin"], true))
		new_action:add_precondition(world_property(properties["event"], false))
		new_action:add_precondition(world_property(properties["state_end"], true))
	   	new_action:add_effect(world_property(properties["need_assassin"], false))
		manager:add_action(operators["action_assassin"], new_action)

		local st = xr_motivator.storage[npc:id()].assassin
		st.action = new_action

	  	new_action = manager:action(stalker_ids.action_puzzle_solver)
	  	new_action:add_precondition(world_property(properties["need_assassin"], false))

		if char_ini ~= nil then
			xr_assassin.set_assassin(npc)
		end
	end
end

-- ¬ключение схемы
--
function set_assassin(object, activated_by_script, enabled, target)
	local char_ini = object:spawn_ini()
	local st = xr_motivator.storage[object:id()].assassin

	if not activated_by_script then
		local script_controlled = utils.conf_get_bool(char_ini, "assassin", "script_controlled", nil, object, false)
		if script_controlled then
			printf("assassin %s is script_controlled", object:name())
			st.enabled = false
			return
		end
	end
	
	st.enabled = utils.conf_get_bool(char_ini, "assassin", "enabled", enabled, object, true)
	st.target = utils.conf_get_string(char_ini, "assassin", "target", target, object, true)

	printf("set_assassin: _bp1: %s", object:name())
	if st.action ~= nil then
		printf("set_assassin: _bp2: reset")
		st.action.reset_scheme(st.action)
	end
	xr_motivator.checkStorage(object)
end

