module("StateEat")
module("StateWalk")

local s_rest	= 5
local s_eat		= 6
local s_walk	= 7

class "CStateRest"
function CStateRest:__init(_data, _mem, sWalk)
	self.data	= _data
	self.memory = _mem
	self.stateEat	= stateeat.CStateEat(self.data, self.memory)
	
	if(sWalk) then
		self.stateWalk	= sWalk(self.data, self.memory)
	else
		self.stateWalk	= statewalk.CStateWalk(self.data, self.memory)
	end
	//написать код, который читает из кастом даты следующие : может ли монстр кушать
	self.can_eat	= true
	self.curState	= nil
end

function CStateRest:initialize()
end

function CStateRest:execute()
	self:select_state()
	self.curState:execute()
end

function CStateRest:select_state()
	if(self.data.npc.satiety < 0.3) then
		if(self.memory.corpse ~= nil) then 
			self:set_state(s_eat)
			return
		end			
		self:set_state(s_walk)
	else
		if(self.curState and self.curState:id() ~= s_eat) then
			self:set_state(s_walk)
		elseif(self.data.npc.satiety < 0.9 and self.memory.corpse) then			//Еще не наелись
			self:set_state(s_eat)
		else	
			self:set_state(s_walk)
		end
	end
end

function CStateRest:set_state(new_state)
	if(self.curState) then
		if(self.curState:id() == new_state) then  return  end
		self.curState:finalize()
	end
	
	if(new_state == s_eat) then
		self.curState	= self.stateEat
	elseif(new_state == s_walk) then
		self.curState	= self.stateWalk
	else
		printf("Eroor %d")
	end

	//if(new_state == s_eat) then
	//	printf("corpse start id", self.memory.corpse:id())
	//end
	self.curState:initialize()
end

function CStateRest:id()
	return s_rest
end

function CStateRest:finalize()
	if(self.curState) then
		self.curState:finalize()
		self.curState	= nil
	end
end

//' Класс для монстров, которые биндятся
class "CStateRestBind" (CStateRest)
function CStateRestBind:__init(_data, _mem, sWalk) super(_data, _mem)
	if(sWalk) then
		self.stateWalk	= sWalk
	else
		self.stateWalk	= statewalk.CStateWalk(self.data, self.memory)
	end
	//написать код, который читает из кастом даты следующие : может ли монстр кушать
	self.can_eat	= true
	self.curState	= nil
end

function CStateRestBind:set_data(_data, _mem)
	self.data	= _data
	self.memory = _mem
	
	self.stateEat:set_data(_data, _mem)
	self.stateWalk:set_data(_data, _mem)
end

//-----------------------------------------------------------------------------------------
//  Состояние отдыха, в котором монстр только спит в указанной точке
//-----------------------------------------------------------------------------------------

class "CStateRestSleep"
function CStateRestSleep:__init(_data, _mem, _sleep_point)
	self.data			= _data
	self.memory			= _mem
	self.sleep_point	= _sleep_point
end

function CStateRestSleep:set_data(_data, _mem)			// это не правильно, но по другому ни как
	self.data	= _data
	self.memory = _mem
end

function CStateRestSleep:initialize()
	reset_action(self.data.npc, self.data.scr_name)
end

function CStateRestSleep:execute()
	if(self.data.npc:action() == nil) then
		assert(self.sleep_point ~= nil)
		
		action(self.data.npc, move(move.walk_fwd, self.sleep_point), sound(sound.idle), cond(cond.move_end))
		action(self.data.npc, anim(anim.stand_idle, 0), cond(cond.time_end, 300))
		action(self.data.npc, anim(anim.lie_idle, 0), cond(cond.time_end, 2000))
		action(self.data.npc, anim(anim.sleep, 0), cond(cond.time_end, 6000000))
	end
end

function CStateRestSleep:id()
	return s_rest
end

function CStateRestSleep:finalize()
end
