class "WeatherManager"
function WeatherManager:__init()
	--printf					("WeatherManager:WeatherManager()")
	self.weather_change_day = 0
	self.update_time = 0
	self.update_level = ""
	-- Загрузить кондлист с погодой.
	local weather = utils.cfg_get_string(ini_file("game.ltx"), level.name(), "weathers", db.actor, false, "", "default")
	if weather == "default" then
		-- сетим дефолтовую погоду
		self.weather_list = xr_logic.parse_condlist(db.actor, level.name(), "weather", "default")
		level.set_weather("default",true)
		printf("WEATHER: 'default'")		
		return
	end
	self.weather_list = xr_logic.parse_condlist(db.actor, level.name(), "weather", weather)
	self:select_weather(true)
end

function WeatherManager:select_weather(now)
	self.weather_change_day = level.get_time_days()
	self.update_level = level.name()
	local weather = xr_logic.pick_section_from_condlist(db.actor, db.actor, self.weather_list)
	printf("WEATHER: '%s'", weather)
	level.set_weather(weather,now);
end

function WeatherManager:load(F)
	self.update_level 		= F:r_stringZ();
	self.update_time 		= F:r_u32();
end

function WeatherManager:save(F)
	F:r_stringZ				(self.update_level);
	F:r_u32					(self.update_time);
end

function WeatherManager:update()
	if self.update_time <= time_global() then
		printf("weather_update day [%s]", level.get_time_days())
		
		if self.update_level ~= level.name() then
			self:select_weather(true)
		end
		
		if self.weather_change_day ~= level.get_time_days() then
			self:select_weather(false)
		end
		self.update_time = self.update_time + 10000
	end
end