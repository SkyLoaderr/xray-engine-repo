----------------------------------------------------------------------------------------------------------------------
--	Схема встречи двух сталкеров
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

local sounds = {}
---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
--' Возвращает есть ли у нас контакт с другим сталкером
class "evaluator_contact" (property_evaluator)
function evaluator_contact:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_contact:evaluate()
	if self.a.enabled == false then return false end

	local overrides = xr_logic.generic_scheme_overrides(self.object)
	if overrides ~= nil and
		overrides.meet_enabled ~= true
	then
		return false
	end
	
	local actor = level.actor()

	if actor then
		if actor:alive() and 
		   self.object:see(actor) and
		   self.object:position():distance_to(actor:position()) < self.a.distance
		then
			self.a.actor = actor
		else
			self.a.actor = nil
		end
	else
		self.a.actor = nil
	end	

	if self.a.actor ~= nil and self.a.over == false then
		xr_reactions.add_rule(self.object, "ignore")
		return true
	else
		xr_reactions.remove_rule(self.object, "ignore")
		return false
	end
end
--' имеет ли клиент оружие
class "evaluator_weapon" (property_evaluator)
function evaluator_weapon:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_weapon:evaluate()
	--' Если рядом с нами нейтрал и он вооружен
	if self.a.actor then
		if self.a.actor:alive() and
		   self.object:see(self.a.actor) and
		   self.object:relation(self.a.actor) == game_object.neutral 
--		   and
--		   (self.object:character_community() ~= "dolg" and
--		    self.object:character_community() ~= "freedom" and
--		    self.object:character_community() ~= "killer")
		then 
			return isWeapon(self.a.actor:active_item())
		end
	end
	return false
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
--' Приглашение к тороговле
class "action_meet_wait" (action_base)
function action_meet_wait:__init (npc_name,action_name, storage, char_ini) super (nil, action_name)
	self.char_ini = char_ini
	self.a = storage

	self.sound_w = { rnd = 80,
				   maxidle = 2, 
				   sumidle = 8,
				   themes = { "weather", "state", "wait" } }
end
function action_meet_wait:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    

	self.object:set_body_state(move.standing)
	self.object:set_movement_type(move.stand)
	self.object:set_mental_state(anim.free)

   	xr_state.change_state(self.object,xr_state.stand)
   	self.object:set_item(object.deactivate, self.object:best_weapon())
	
   	self.a.Buyer = nil
end
function action_meet_wait:execute ()
	if xr_state.finish_state(self.object) == true then
		self.object:enable_talk()
	else
		return
	end
	
	-- нужно остановиться и посмотреть в сторону актора
	local dir = self.a.actor:position():sub(self.object:position())

	self.object:set_sight(look.direction, dir, 0)

	-- Анимации
	xr_state.anim_update("idle", self.object)

	-- Звуки
	if self.object:active_sound_count() == 0 then
		xr_sound.sound_update(self.object, self.sound_w)		
	end
	action_base.execute (self)
end
function action_meet_wait:finalize ()
	self.object:disable_talk()
	xr_state.anim_update(nil, self.object)
	action_base.finalize (self)
end

--' Типа спрячь пушку, чувак
class "action_weapon" (action_base)
function action_weapon:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage

	self.sound_e = { rnd = 100,
				   maxidle = 3, 
				   sumidle = 5,
				   themes = { "threat_weap" } }
end
function action_weapon:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    

	self.object:set_body_state(move.standing)
	self.object:set_movement_type(move.stand)
	self.object:set_mental_state(anim.danger)

	self.object:clear_animations()
	stop_play_sound(self.object)
end
function action_weapon:execute ()
   	self.object:set_item(object.idle, self.object:best_weapon())
	
	-- нужно остановиться и посмотреть в сторону актора
	local pos = self.a.actor:position()

	local dir = self.a.actor:position():sub(self.object:position())
	self.object:set_sight(look.direction, dir, true)

	if self.object:active_sound_count() == 0 then
		xr_sound.sound_update(self.object, self.sound_e)		
	end	
	xr_meet.attack(self.object, self.a)
	action_base.execute (self)
end
function action_weapon:finalize ()
	action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------------------------------------
function attack(npc, st)
	sound_f = { rnd = 100,
			   maxidle = 3, 
			   sumidle = 5,
			   themes = { "talk_abuse" } }					

	-- если актер ближе какого-то радиуса - открывать огонь
	if npc:position():distance_to(st.actor:position()) < st.shoot_distance then
		if npc:active_sound_count() == 0 then
			xr_sound.sound_update(npc, sound_f)		
		end
		--'npc:set_relation(game_object.enemy, st.actor) FIXME
	end
end
function disable_meet(npc)
	if npc ~= nil and
	   is_object_online(npc:id()) == true 
	then
		db.storage[npc:id()].meet.enabled = false
	end
end
function enable_meet(npc)
	if npc ~= nil and
	   is_object_online(npc:id()) == true 
	then
		db.storage[npc:id()].meet.enabled = true
	end
end
----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, char_ini)
	local operators		= {}
	local properties	= {}

	local manager = object:motivation_action_manager()

	properties["event"] 		= xr_evaluators_id.reaction
	properties["contact"]		= xr_evaluators_id.stohe_meet_base + 1         
	properties["weapon"]		= xr_evaluators_id.stohe_meet_base + 2
	properties["need_punch"]	= xr_evaluators_id.zmey_punch_base + 1

	operators["wait_trade"]			= xr_actions_id.stohe_meet_base + 1
	operators["weapon"]				= xr_actions_id.stohe_meet_base + 2

	-- Evaluators
	manager:add_evaluator (properties["contact"], 		evaluator_contact	("meet_contact", db.storage[object:id()].meet, "meet_contact"))
	manager:add_evaluator (properties["weapon"], 		evaluator_weapon	("meet_weapon", db.storage[object:id()].meet, "meet_weapon"))

	-- Actions
	local action = action_meet_wait (object:name(),"action_meet_wait", db.storage[object:id()].meet, char_ini)
	action:add_precondition		(world_property(stalker_ids.property_alive, true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["contact"], 		true))
	action:add_precondition		(world_property(properties["weapon"], 		false))
	action:add_effect 			(world_property(properties["contact"], 		false))
	manager:add_action (operators["wait_trade"], action)

	action = action_weapon (object:name(),"action_weapon", db.storage[object:id()].meet)
	action:add_precondition		(world_property(stalker_ids.property_alive, true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["contact"], 		true))
	action:add_precondition		(world_property(properties["weapon"], 		true))
	action:add_effect 		(world_property(properties["weapon"], 			false))
	manager:add_action (operators["weapon"], action)


	action = manager:action (xr_actions_id.alife)	
	action:add_precondition		(world_property(properties["contact"],		false))

    if char_ini ~= nil and char_ini:section_exist("meet") == true then
        if char_ini:line_exist("meet", "enabled") == true then
                db.storage[object:id()].meet.enabled = char_ini:r_bool("meet", "enabled")
        end
        if char_ini:line_exist("meet", "noweap") == true then
                db.storage[object:id()].meet.noweap = char_ini:r_bool("meet", "noweap")
        end
    end
end

function override_meet(npc, flag)
	db.storage[npc:id()].meet.over = flag
end

--' ВНИМАНИЕ: Эта функция вызывается и для сталкеров, и для монстров!
function dialog_manager_reset(npc, stype)
	printf("*DIALOGS*: dialog_manager_reset: npc:name='%s'", npc:name())
	if stype == modules.stype_stalker or stype == modules.stype_mobile then
		--' Смена стартового диалога
		local overrides = xr_logic.generic_scheme_overrides(npc)
		if overrides ~= nil then
			if overrides.meet_talk_enabled then
--				printf("*DIALOGS*: Enable talk", overrides.meet_dialog)
				npc:enable_talk()
			else
--				printf("*DIALOGS*: Disable talk", overrides.meet_dialog)
				npc:disable_talk()
			end

			if overrides.meet_dialog then
--				printf("*DIALOGS*: Set start dialog %s", overrides.meet_dialog)
				npc:set_start_dialog(overrides.meet_dialog)
			else
--				printf("*DIALOGS*: Restore start dialog")
				npc:restore_default_start_dialog()
			end
		else
--			printf("*DIALOGS*: SCHEME HAS NO OVERRIDES: Restore start dialog")
			npc:restore_default_start_dialog()
--			printf("*DIALOGS*: SCHEME HAS NO OVERRIDES: Disable talk", overrides.meet_dialog)
			npc:disable_talk()
		end
	end
end

--' Считывание доступных диалогов игрока.
function set_actor_dialogs(npc, ini, name, dialog_section)
	printf("*ACTOR_DIALOGS*")
	if dialog_section == nil then return end
	printf("*ACTOR_DIALOGS*: set_actor_dialogs: npc_name='%s' section='%s'", npc:name(), dialog_section)
	
	local actor_dialogs_string = utils.cfg_get_string(ini, dialog_section, "id", npc, false, "")
	if actor_dialogs_string ~= nil then
		printf("*ACTOR_DIALOGS*: actor_dialogs=%s", actor_dialogs_string)
		--' Создаем в массиве запись где будут храниться считанные диалоги.
		db.storage[npc:id()].actor_dialogs = parse_names(actor_dialogs_string)
	else
		printf("*ACTOR_DIALOGS*: actor_dialogs=nil")
	end
	
	local actor_disable = utils.cfg_get_string(ini, dialog_section, "disable", npc, false, "")
	if actor_disable ~= nil then
		printf("*ACTOR_DIALOGS*: actor_disable=%s", actor_disable)
		--' Создаем в массиве запись где будут храниться считанные диалоги.
		db.storage[npc:id()].actor_disable = parse_names(actor_disable)
	else
		printf("*ACTOR_DIALOGS*: actor_disable=nil")
	end
end

function disable_scheme(npc, scheme)
	db.storage[npc:id()].actor_dialogs = nil
	db.storage[npc:id()].actor_disable = nil
end

