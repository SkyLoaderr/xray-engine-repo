----------------------------------------------------------------------------------------------------------------------
--	—хема встречи двух сталкеров
--	автор: ƒиденко –услан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

local sounds = {}

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- ¬озвращает есть ли у нас контакт с другим сталкером
class "evaluator_contact" (property_evaluator)
function evaluator_contact:__init(storage) super()
	self.a = storage
end
function evaluator_contact:evaluate()
	local nearest = nil

	if self.a.enabled == false then return false end

	local vtable = self.object:memory_visible_objects ()
	if vtable == nil then return false end
	
	for a in vtable do
        	local vo = a:object ()
		local id = vo:clsid ()
		if (id == clsid.stalker or id == clsid.actor) and	-- если видим сталкера или актера
		    a.visible == true and				-- и видим в данный момент
		    vo:alive() == true and				-- и он живой
		    self.object:squad()	~= vo:squad() and		-- он в другом скваде
		    self.object:position():distance_to(vo:position()) < self.a.distance then 	-- он ближе заданного предела		
			-- ¬ставить проверку на приоритеты - нейтрал более приоритетен, чем дружественный, приоритет от рассто€ни€
			if nearest == nil or
			   (self.object:relation(vo) == game_object.neutral and 
			    distance_between(self.object, nearest) > distance_between(self.object, vo) )
			then
				nearest = vo
			end			
		end
	end

	local tt = false

	if nearest == nil then 
		tt = false
	else
		if self.a.nearest == nil then
			self.a.nearest = nearest
			self.a.done = false			
		else
			if self.a.nearest:id() == nearest:id() and self.a.done == true then 
				tt = false 
			else
				self.a.nearest = nearest
				self.a.done = false
				tt = self.a.nearest ~= nil
			end
		end
	end


--	if tt then
--		printf("[EVA] Meet: Contact? TRUE")
--	else
--		printf("[EVA] Meet: Contact? FALSE")
--	end
	return tt
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- ќбработка контакта
class "action_contact" (action_base)
function action_contact:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage
end
function action_contact:initialize()
	printf("[ACT] Start: Contact process")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    

	self.timer = { 	begin = nil,         -- врем€ до реакции
			idle = nil,
			maxidle = 1000,
			sumidle = 1000 }

	self.sound_f = {idle = 0,
		     begin = nil,
		     maxidle = 1, 
		     sumidle = 1,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["friend"], id = 0},
					{pack = sounds["friend"], id = 1} }}

	self.sound_s = {idle = 0,
		     begin = nil,
		     maxidle = 3, 
		     sumidle = 2,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["neutral"], id = 14},
					{pack = sounds["neutral"], id = 15}, 
					{pack = sounds["neutral"], id = 16}, 
					{pack = sounds["neutral"], id = 17}, 
					{pack = sounds["neutral"], id = 18}, 
 					{pack = sounds["neutral"], id = 19} }}
	self.sound_n = {idle = 0,
		     begin = nil,
		     maxidle = 5, 
		     sumidle = 5,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["neutral"], id = 19},
					{pack = sounds["neutral"], id = 20}, 
					{pack = sounds["neutral"], id = 21}, 
					{pack = sounds["neutral"], id = 22}, 
					{pack = sounds["neutral"], id = 23} }}


	self.timer.idle = math.random(self.timer.maxidle) + self.timer.sumidle
	self.timer.begin = device():time_global()
	self.object:set_item(object.idle, self.object:best_weapon())
end
function action_contact:execute ()
	if device():time_global() - self.timer.begin > self.timer.idle then
                if self.object:relation(self.a.nearest) == game_object.friend then
			-- что мы делаем, если видим друга
			globals.set_sound(self.object, self.sound_f, true)
			self.a.done = true

		elseif self.object:relation(self.a.nearest) == game_object.neutral then
			-- что мы делаем, если видим нейтрала
			-- угрожаем ему автоматом и просим убратьс€
			self.object:set_mental_state(anim.danger)
			self.object:set_movement_type(move.walk)

			local d = distance_between(self.object, self.a.nearest)
			self.object:set_path_type(game_object.level_path)

			-- медленно отходим от него
	      		local pos = self.a.nearest:position()
			local spos = self.object:position()

			local dir = vector():sub(spos,pos)

   			local pp = level.vertex_in_direction(self.object:level_vertex_id(), dir, 2.0)

			if pp ~= self.object:level_vertex_id() then
				self.object:set_dest_level_vertex_id(pp)
			end

			pos.y = pos.y + 0.8
      			self.object:set_sight(look.fire_point, pos, 0)
			if d < self.a.shoot_distance then             			
	      			self.object:set_item(object.fire1, self.object:best_weapon())
				-- и громко ругаемс€ матом
				globals.set_sound(self.object, self.sound_s, false)
			else
				-- предлагаем культурно разойтись
				globals.set_sound(self.object, self.sound_n, false)
			end
		end
	end       
	action_base.execute (self)
end
function action_contact:finalize ()
	printf("[ACT] Finish: Contact process")
	action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object)

	local operators		= {}
	local properties	= {}

	sounds["neutral"] 		= xr_sounds_id.stohe_meet_base + 1
	sounds["friend"] 		= xr_sounds_id.stohe_meet_base + 2

	object:add_sound("script_replics\\stalker_1\\talk\\stalker_talk_", 30, snd_type.talk, 2, 1, sounds["neutral"])
	object:add_sound("script_replics\\stalker_1\\talk\\stalker_talk_", 30, snd_type.talk, 2, 1, sounds["friend"])

	local manager = object:motivation_action_manager()

	properties["contact"]		= xr_evaluators_id.stohe_meet_base + 1         

	operators["contact"]		= xr_actions_id.stohe_meet_base + 1

	-- Evaluators
	manager:add_evaluator (properties["contact"], 		this.evaluator_contact		(xr_motivator.storage[object:id()].meet))

	-- Actions
	local action = this.action_contact (object:name(),"action_contact", xr_motivator.storage[object:id()].meet)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["contact"], 		true))
	action:add_effect 		(world_property(properties["contact"], 		false))
	manager:add_action (operators["contact"], action)

	action = manager:action (stalker_ids.action_free_no_alife)	
	action:add_precondition		(world_property(properties["contact"],		false))
end