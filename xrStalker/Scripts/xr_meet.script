----------------------------------------------------------------------------------------------------------------------
--	Схема встречи двух сталкеров
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

local sounds = {}

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Возвращает есть ли у нас контакт с другим сталкером
class "evaluator_contact" (property_evaluator)
function evaluator_contact:__init(storage) super()
	self.a = storage
end
function evaluator_contact:evaluate()
	local nearest = nil

	if self.a.enabled == false then return false end

	local actor = level.actor()

	if actor then
		if actor:alive() and 
		   self.object:see(actor) and
		   self.object:position():distance_to(actor:position()) < self.a.distance
		then
			self.a.actor = actor
		else
			self.a.actor = nil
		end
	else
		self.a.actor = nil
	end	

	local tt = self.a.actor ~= nil


--	if tt then
--		printf("[EVA] Meet: Contact? TRUE")
--	else
--		printf("[EVA] Meet: Contact? FALSE")
--	end
	return tt
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обработка контакта
class "action_contact" (action_base)
function action_contact:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage
end
function action_contact:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    

	self.sound_trend = {idle = 0,
		     begin = nil,
		     maxidle = 1, 
		     sumidle = 0,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["trade"], id = 12},
					{pack = sounds["trade"], id = 13}, 
					{pack = sounds["trade"], id = 14} 	}}
	self.sound_trstart = {idle = 0,
		     begin = nil,
		     maxidle = 1, 
		     sumidle = 0,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["tradeseller_talk"], id = 7},
					{pack = sounds["tradeseller_talk"], id = 8} }}
	self.sound_w = {idle = 0,
		     begin = nil,
		     maxidle = 3, 
		     sumidle = 3,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["trade"], id = 2},
					{pack = sounds["trade"], id = 3}, 
					{pack = sounds["trade"], id = 4} 	}}
	self.sound_e = {idle = 0,
		     begin = nil,
		     maxidle = 5, 
		     sumidle = 1,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["trade"], id = 5},
					{pack = sounds["trade"], id = 6}, 
					{pack = sounds["trade"], id = 7}, 
					{pack = sounds["trade"], id = 8}, 
					{pack = sounds["trade"], id = 9}, 
					{pack = sounds["trade"], id = 10} 	}}
	self.sound_f = {idle = 0,
		     begin = nil,
		     maxidle = 5, 
		     sumidle = 1,
   		     rnd = 100,
		     lastsound = nil,
		 	sounds = {      {pack = sounds["tradeseller_talk"], id = 14},
					{pack = sounds["tradeseller_talk"], id = 15}, 
					{pack = sounds["tradeseller_talk"], id = 16}, 
					{pack = sounds["tradeseller_talk"], id = 17}, 
					{pack = sounds["tradeseller_talk"], id = 18} 	}}
	self.anim = {	idle = 0,
			begin = nil,
			maxidle = 1,
			sumidle = 0,
			rnd = 100,
			anim_active = { {name = "torg_1", hand = true},
					{name = "torg_2", hand = true},
					{name = "torg_3", hand = true},
					{name = "torg_4", hand = true}} }

	self.talking = nil

	self.object:set_body_state(move.standing)
	self.object:set_movement_type(move.stand)
end
function action_contact:execute ()
	local weap = self.a.actor:active_item()
	local weap_id
	if weap ~= nil then
		weap_id = weap:clsid()
	end
	local ww = self.object:active_item()
	local ww_id
	if ww ~= nil then
		ww_id = ww:clsid()
	end
	
	-- нужно остановиться и посмотреть в сторону актора
	local pos = self.a.actor:position()

	if isWeapon(weap_id) then
		if isWeapon(ww_id) == false then
			self.object:set_mental_state(anim.danger)
			self.object:clear_animations()
			self.object:disable_talk()
		end
      		pos.y = pos.y + 1
      		self.object:set_sight(look.fire_point, pos, 0)

		-- если актер ближе какого-то радиуса - открывать огонь
		if self.object:position():distance_to(self.a.actor:position()) < self.a.shoot_distance then
      			self.object:set_item(object.fire1, self.object:best_weapon())
			if self.object:active_sound_count() == 0 then
				globals.set_sound(self.object, self.sound_f, false)
			end
		else
     			self.object:set_item(object.idle, self.object:best_weapon())
			-- Звуки
			if self.object:active_sound_count() == 0 then
				globals.set_sound(self.object, self.sound_e, false)
			end
		end
	else
		if isWeapon(ww_id) == true then
			self.object:set_mental_state(anim.free)
			self.object:clear_animations()
			self.object:add_animation("torg_0", true)
     			self.object:set_item(object.deactivate, self.object:best_weapon())
			self.object:enable_talk()
		end
		pos.y = pos.y + 1.4
		self.object:set_sight(look.point, pos, 0)

		--болтаем ли мы или еще нет
		if self.object:is_talking() then
			if self.talking == true then
			else
				-- сказать фразу о начале тороговли
				globals.set_sound(self.object, self.sound_trstart, true)
				self.talking = true
			end
		else
			if self.talking == true then
				-- сказать фразу о конце тороговли
				globals.set_sound(self.object, self.sound_trend, true)
				self.talking = false
			else
			end
		end

	        -- Анимации
		if self.object:animation_count() <= 1 then
			xr_meet.set_anim(self.object, self.anim)
		end
	
		-- Звуки
		if self.object:active_sound_count() == 0 then
			globals.set_sound(self.object, self.sound_w, false)
		end
	end

	action_base.execute (self)
end
function action_contact:finalize ()
	action_base.finalize (self)
end


----------------------------------------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------------------------------------
-- Проигрыш анимашек
function set_anim(npc, anim)
	if anim.begin == nil or
	   (device():time_global()/1000 - anim.begin) > anim.idle 
	then
		anim.begin = device():time_global()/1000
		anim.idle = math.random(anim.maxidle) + anim.sumidle

		if math.random(100) < anim.rnd then
			local r = math.random(table.getn(anim.anim_active))
			npc:add_animation(anim.anim_active[r].name,anim.anim_active[r].hand)
		end
	end		
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object)

	local operators		= {}
	local properties	= {}

	sounds["trade"] 			= xr_sounds_id.stohe_tradeseller_base + 1
	sounds["tradeseller_talk"] 		= xr_sounds_id.stohe_tradeseller_base + 2

	object:add_sound("script_replics\\stalker_1\\trade\\stalker_trade_", 30, snd_type.talk, 2, 1, sounds["trade"])
	object:add_sound("script_replics\\stalker_1\\talk\\stalker_talk_", 30, snd_type.talk, 2, 1, sounds["tradeseller_talk"])

	local manager = object:motivation_action_manager()

	properties["contact"]		= xr_evaluators_id.stohe_meet_base + 1         

	operators["contact"]		= xr_actions_id.stohe_meet_base + 1

	-- Evaluators
	manager:add_evaluator (properties["contact"], 		this.evaluator_contact		(xr_motivator.storage[object:id()].meet))

	-- Actions
	local action = this.action_contact (object:name(),"action_contact", xr_motivator.storage[object:id()].meet)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["contact"], 		true))
	action:add_effect 		(world_property(properties["contact"], 		false))
	manager:add_action (operators["contact"], action)

	action = manager:action (stalker_ids.action_free_no_alife)	
	action:add_precondition		(world_property(properties["contact"],		false))
end