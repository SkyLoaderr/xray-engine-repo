---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Константа
class "evaluator_allow_death" (property_evaluator)
function evaluator_allow_death:__init(name, storage) super (nil, name)
  self.a = storage
end
function evaluator_allow_death:evaluate ()
    return self.a.logic == nil
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обычное поведение
class "action_process_death" (action_base)
function action_process_death:__init (npc_name,action_name,storage) super (nil, action_name)
    self.a = storage
end
function action_process_death:initialize()
    action_base.initialize(self)
    self.object:set_node_evaluator()
    self.object:set_path_evaluator()
    self.object:set_desired_position()
    self.object:set_desired_direction()        
end
function action_process_death:execute()
	xr_logic.try_switch_to_another_section(self.object, self.a)
	self.a.logic = nil
	action_base.execute(self)
end
function action_process_death:finalize()
   	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
  	local operators    = {}
  	local properties  = {}
  	
  	local manager = npc:motivation_action_manager()

  	properties["allow_death"]   	= xr_evaluators_id.death + 1

  	operators["death"]   	= xr_actions_id.death + 1

  	manager:add_evaluator (properties["allow_death"],   this.evaluator_allow_death("evaluator_allow_death",storage))

  	local action = this.action_process_death(npc, "action_process_death", storage)
  	action:add_precondition(world_property(properties["allow_death"], false))
 	action:add_effect(world_property(properties["allow_death"], true))
  	manager:add_action(operators["death"], action)

  	action = manager:action(stalker_ids.action_death_planner)
  	action:add_precondition(world_property(properties["allow_death"], true))
end

function set_death_checker(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)
end