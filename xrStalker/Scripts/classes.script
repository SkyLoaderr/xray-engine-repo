----------------------------------------------------------------------------------------------------
-- класс AnimationSet 

--флаги для Animation Set
-- 0 - последовательное проигрывание анимаций
-- 1 - случайная анимация

--флаги для добавленых анимаций
-- 0 - проиграть один раз и забыть
-- 1 - возможен повтор

class "AnimationSet"

function AnimationSet:__init (flags)
	self.flags = flags
	self.current_animation = 0
	self.anims_list = {}
end

function AnimationSet:add_animation (name, flag)
	printf ("Add animation %s", name)
	table.insert (self.anims_list, anim (name, flag))
end

function AnimationSet:get_animation ()
	local size = table.getn (self.anims_list)
	if size == 0 then return nil end
	if self.flags == 0 then
	   self.current_animation = self.current_animation  + 1
	   if self.current_animation > size then self.current_animation = 1 end
   	   return self.anims_list[self.current_animation]
	   end
	self.current_animation = math.random (1, size  + 1)
 	return self.anims_list[self.current_animation]
end

----------------------------------------------------------------------------------------------------
-- класс ActionSet
class "ActionSet"


function ActionSet:__init ()
	self.actions = {}
	self.current_action = 0
end

function ActionSet:add_action (act)
	local size = table.getn (self.actions)
	if act == nil then return -1 end
	table.insert (self.actions, act)
	return size + 1
end

function ActionSet:set_action (npc, num_act)
	if npc == nil then return end
	if num_act ~= -1 then npc:command (self.actions[num_act])	
	else
	   for a = 1, table.getn (self.actions), 1 do
		   npc:command (self.actions[a])
	   end	
	end
end


----------------------------------------------------------------------------------------------------
class "SinglePatrol"

function SinglePatrol:__init (npc, script_name, path_name, ...)
	self.npc = npc
	self.script_name = script_name
	self.started = false
	self.path_name = path_name
	self.current_state = 0
	self.anims = arg
end

function SinglePatrol:callback (obj, action_type, index)

  	local ptr = patrol (obj:patrol ())

	printf ("Path : %s, index : %d", obj:patrol (), index) 

	-- При выполнении action-а движение прерывается, что генерит callback с index-ом -1.
	-- Просто игнорировать такие callback-и.
	if index < 0 then
		return
	end

	for anim_num = 1, self.anims.n do
		if ptr:flag(index, anim_num) then
			action_first (obj, move (move.standing, move.stand, move.line, ptr),
				self.anims[anim_num]:get_animation (), cond (cond.anim_end))
			return
		end
	end
end

function SinglePatrol:process ()

	if self.started == false then
	   self.npc:script (true, self.script_name)
	   action (self.npc, move (move.standing, move.walk, move.line, patrol (self.path_name)),
			   look (look.search), anim (anim.free), cond (cond.time_end, 10000000))
	   self.started = true
	   self.npc:set_callback (self, "callback", game_object.movement)
	   return 
	   end
end

function SinglePatrol:finish ()
	self.npc:script (false, self.script_name)
end


----------------------------------------------------------------------------------------------------
class "Guardian"

function Guardian:__init (npc, script_name, path_name, anims_check)
	self.npc = npc
	self.script_name = script_name
	self.started = false
	self.path_name = path_name
	self.current_state = 0
	self.anims_check = anims_check
end


function Guardian:process ()

	if self.started == false then
	   self.npc:script (true, self.script_name)
	   action (self.npc, --move (move.standing, move.stand, move.line, patrol (self.path_name)),
			   look (look.search), anim (anim.free), cond (cond.anim_end))
	   self.started = true
	   return 
	   end
	if self.npc:action () then return end
	reset_action (self.npc, self.script_name)
    action (self.npc, --move (move.standing, move.stand, move.line, patrol (self.path_name)),
 		    look (look.search), self.anims_check:get_animation (), cond (cond.anim_end))
end

function Guardian:finish ()
	self.npc:script (false, self.script_name)
end
