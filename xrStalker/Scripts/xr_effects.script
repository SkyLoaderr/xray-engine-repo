
-- Кто-то из участников сценки вступил в бой - теперь нужно пообижать всех на всех
function gar_dm_bandits_fight(actor, npc)
	local novice = utils.obj_by_sid(104)
	if not novice or not novice:alive() then
		return
	end

	local ignore_actor = distance_between(actor, novice) > 10

	local bandit1 = utils.obj_by_sid(101)
	if bandit1 then
		novice:set_relation(game_object.enemy, bandit1)
		bandit1:set_relation(game_object.enemy, novice)
		if not ignore_actor then
			bandit1:set_relation(game_object.enemy, actor)
		end
	end

	local bandit2 = utils.obj_by_sid(102)
	if bandit2 then
		novice:set_relation(game_object.enemy, bandit2)
		bandit2:set_relation(game_object.enemy, novice)
		if not ignore_actor then
			bandit2:set_relation(game_object.enemy, actor)
		end
	end

	local bandit3 = utils.obj_by_sid(103)
	if bandit3 then
		novice:set_relation(game_object.enemy, bandit3)
		bandit3:set_relation(game_object.enemy, novice)
		if not ignore_actor then
			bandit3:set_relation(game_object.enemy, actor)
		end
	end
end

function gar_dm_bandit_demand(actor, npc)
	printf("_bp: gar_dm_bandit_demand: actor=%s", actor:name())

	if actor:has_info("gar_dm_bandit1_demand") or
	   actor:has_info("gar_dm_bandit2_demand") or
	   actor:has_info("gar_dm_bandit3_demand") then
		return
	end
	local r = math.random(3)
	if r == 1 then
		actor:give_info_portion("gar_dm_bandit1_demand")
	elseif r == 2 then
		actor:give_info_portion("gar_dm_bandit2_demand")
	else
		actor:give_info_portion("gar_dm_bandit3_demand")
	end
end
	
function actor_friend(actor, npc)
	printf("_bp: xr_effects: actor_friend(): npc='%s': time=%d", npc:name(), device():time_global())
	npc:set_relation(game_object.friend, actor)
end

function actor_neutral(actor, npc)
	npc:set_relation(game_object.neutral, actor)
end

function actor_enemy(actor, npc)
	npc:set_relation(game_object.enemy, actor)
end


-- Вызов этой функции отключит обработчик [combat] боя для персонажа.
-- Используется в случаях, когда все необходимые действия, такие как переключение на другую секцию,
-- уже выполнены, и повторно выполнять их во время боя нельзя (а условия секции [combat] проверяются на каждом
-- апдейте, когда персонаж в бою, если, конечно, не отключены вызовом этой функции).
function disable_combat_handler(actor, npc)
	if db.storage[npc:id()].combat then
		db.storage[npc:id()].combat.enabled = false
	end
	
	if db.storage[npc:id()].mob_combat then
		db.storage[npc:id()].mob_combat.enabled = false
	end
end

-- Вызов этой функции отключит обработчик [combat_ignore] перехвата боя для персонажа.
function disable_combat_ignore_handler(actor, npc)
	if db.storage[npc:id()].combat_ignore then
		db.storage[npc:id()].combat_ignore.enabled = false
	end
end

function log_bp1(actor, npc)
	printf("xr_effects: log_bp1 (actor='%s', npc='%s'", actor:name(), npc:name())
end

-- FIXME: ЭТО НЕ СОХРАНЯЕТСЯ !!!
--local counter = 0
--local need_monsters = 0
function garbage_monster_death(actor, npc)
    
    local st = db.storage[npc:id ()]
    if st.death.killer == -1 then return end
    
    if db.actor == nil then return end
    
    if db.storage[db.actor:id ()] == nil then
       db.storage[db.actor:id ()] = {}
    end    
    
    if db.storage[db.actor:id ()].gar_rush_killed == nil then
       db.storage[db.actor:id ()].gar_rush_killed = 0
       db.storage[db.actor:id ()].gar_rush_killed_by_actor = 0
    end    
    
    -- remove from spawner 
    --xr_spawner.remove_from_list (npc:id ())
    db.storage[db.actor:id ()].gar_rush_killed = db.storage[db.actor:id ()].gar_rush_killed + 1
    -- no actor kill monster - simple remove
    if actor == nil or actor:id () ~= st.death.killer then 
       return 
    end
    
    db.storage[db.actor:id ()].gar_rush_killed_by_actor = db.storage[db.actor:id ()].gar_rush_killed_by_actor + 1
    
    printf ("Monster %s killed by actor", npc:name ())
    
    --counter = counter + 1
    --printf ("Monsters killed by actor %d", counter)
    --need_monsters = need_monsters + 1
    
    -- check for set gulag to normal mode
    if db.storage[db.actor:id ()].gar_rush_killed > 10 then
       -- set gulag to normal state
       if actor:has_info ("gar_monsters_rush_wave1") then
          actor:disable_info_portion ("gar_monsters_rush_wave1") 
          --printf ("Return GULAG to start state")
       end   
    end
    if db.storage[db.actor:id ()].gar_rush_killed_by_actor >= 10 then
       actor:give_info_portion ("gar_dolg_help_kill_rush")
       actor:give_info_portion ("gar_dolg_access_rostok")
    end   
    if db.storage[db.actor:id ()].gar_rush_killed_by_actor >= 15 then
       actor:give_info_portion ("gar_dolg_help_kill_rush_good")
       xr_gulag.setGulagRelation ("gar_dolg", game_object.friend, actor)
    end   
    if db.storage[db.actor:id ()].gar_rush_killed_by_actor >= 20 then
       actor:give_info_portion ("gar_dolg_help_kill_rush_perfect")
    end    
    
end

-- При смерти кровососа дать ему небольшой пинок в сторону вейпоинта, чтобы он упал
-- с обрыва
function val_bs_victim_dead(actor, npc)
	printf("_bp: val_bs_victim_dead: npc='%s'", npc:name())
	local h = hit()
	h.power = 100
	h.direction = utils.vector_copy_by_val(patrol("val_bs_hit_direction"):point(0)):sub(npc:position())
	h.bone = "bip01_spine1"
	h.draftsman = npc 
	h.impulse = 2000
	h.type = hit.wound
	npc:hit(h)
end

-- При смерти пленного дать ему небольшой пинок в сторону вейпоинта, чтобы он упал
-- в пропасть
function val_sacrifice_victim_dead(actor, npc)
	printf("_bp: val_sacrifice_victim_dead: npc='%s'", npc:name())
	local h = hit()
	h.power = 100
	h.direction = utils.vector_copy_by_val(patrol("val_sacrifice_fall_direction"):point(0)):sub(npc:position())
	h.bone = "bip01_spine1"
	h.draftsman = npc 
	h.impulse = 2000
	h.type = hit.wound
	npc:hit(h)
end

function val_suicide_kill_self(actor, npc)
	local snd_obj = sound_object([[Weapons\walther_shoot]])
	if snd_obj ~= nil then
		snd_obj:play_at_pos(db.actor, npc:position(), sound_object.s3d)
	end

	--[[
	snd_obj = sound_object([[ambient\random\rnd_fallscream]])
	if snd_obj ~= nil then
		snd_obj:play_at_pos(db.actor, npc:position(), sound_object.s3d)
	end
	--]]

	--[[
	action(
		npc,
		particle("nature\\fog_stormy","bip01_head",particle_params(vector():set(0,0,0.3),vector():set(0,0,0),vector():set(1,0,0)),false),
		cond	(cond.time_end, time_infinite)
	)
	--]]

	printf("_bp: val_suicide_kill_self: npc='%s'", npc:name())
	local h = hit()
	h.power = 1000
	h.direction = vector_rotate_y(npc:direction(), 90)
	h.bone = "bip01_head"
	h.draftsman = npc 
	h.impulse = 200 --350
	h.type = hit.wound
	npc:hit(h)
end

function val_sacrifice_force_guards_kill_victim(actor, npc)
	local guard1 = utils.obj_by_sid(404)
	if guard1 then
		npc:set_relation(game_object.enemy, guard1)
		guard1:set_relation(game_object.enemy, npc)
	end
	
	local guard2 = utils.obj_by_sid(405)
	if guard2 then
		npc:set_relation(game_object.enemy, guard2)
		guard2:set_relation(game_object.enemy, npc)
	end
end

function test_hit_in_actor_dir(actor, npc)
--
	-- TODO: реагировать только на смерть от пули (last hit = пуля)
	-- TODO: сделать общей схемой с настройкой через пути
	local actor_pos = utils.vector_copy_by_val(actor:position())
	local npc_pos = npc:position()

	if actor_pos.y >= npc_pos.y - 3.0 then
		-- Если игрок несущественно ниже, или выше - не давать толчек
		return
	end

	printf("_bp: test_hit_in_actor_dir")
	local h = hit()
	h.power = 100
	actor_pos.y = npc_pos.y + 1.0
	h.direction = actor_pos:sub(npc_pos)
	h.bone = "bip01_spine1"
	h.draftsman = npc 
	h.impulse = 2000
	h.type = hit.wound
	npc:hit(h)
--]]
	
--[[
	local actor_pos = utils.vector_copy_by_val(actor:position())
	local npc_pos = npc:position()

	--if actor_pos.y >= npc_pos.y - 3.0 then
		-- Если игрок несущественно ниже, или выше - не давать толчек
	--	return
	--end
	actor_pos.y = npc_pos.y + 1.0
	local pshell = npc:get_physics_shell()
	local dir = actor_pos:sub(npc_pos)
	local constant = 20000
	pshell:apply_force (constant * dir.x, constant * dir.y, constant * dir.z)
--]]
end

function military_sniper_dead (actor, npc)

    local st = db.storage[npc:id ()]
    if st.death.killer == -1 then return end
    if actor == nil or actor:id () ~= st.death.killer then 
       return 
    end
    
    db.actor:give_info_portion ("mil_sniper_dead")
    if db.actor:has_info ("mil_sniper_get_job") then
       level_tasks.set_task_state (task.completed, "mil_kill_sniper", 1)
    end   
       
end

function military_dolg_dead (actor, npc)
    -- если нет актера, то вылетаем с грохотом и треском
    if db.actor == nil then return end
    -- если данные не существуют, то создадим
    if db.storage[db.actor:id ()] == nil then
       db.storage[db.actor:id ()] = {}
    end    
    
    if db.storage[db.actor:id ()].mil_dolg_killed == nil then
       db.storage[db.actor:id ()].mil_dolg_killed = 0
       db.storage[db.actor:id ()].mil_dolg_killed_by_actor = false
    end    
    -- проапдейтим количество мертвых долговцев
    db.storage[db.actor:id ()].mil_dolg_killed = db.storage[db.actor:id ()].mil_dolg_killed + 1

    --printf ("!!! DOLG STALKER IS DEAD, KILLED %d STALKERS !!!", db.storage[db.actor:id ()].mil_dolg["killed"])

    -- взведем флажок, что мужика замочили мы (нужно для Свободы) 
    local st = db.storage[npc:id ()]
    if st.death.killer == -1 then return end
    if actor:id () == st.death.killer then 
       db.storage[db.actor:id ()].mil_dolg_killed_by_actor = true
    end
    
    -- если все умерли и была задача мочить снайпера, но сообщать не кому, то
    -- ставим задачу, как не выполненую
    if db.storage[db.actor:id ()].mil_dolg_killed == 8 then
       if db.actor:has_info ("mil_sniper_get_job") and db.actor:dont_has_info ("mil_sniper_job_complete") then 
          level_tasks.set_task_state (task.fail, "mil_kill_sniper", 0)
          level_tasks.set_task_state (task.fail, "mil_kill_sniper", 2)
          db.actor:disable_info_portion ("mil_sniper_get_job")
       end
       --printf ("!!! DOLG IS DEAD !!!")
       db.actor:give_info_portion ("mil_dolg_dead")
       if db.actor:has_info ("mil_leader_quest1_start") then
          level_tasks.set_task_state (task.completed, "mil_lukash_job", 2)
          db.actor:give_info_portion ("mil_leader_quest1_complete")
          if db.actor:dont_has_info ("mil_freedom_attack") then
             level_tasks.set_task_state (task.fail, "mil_lukash_job", 1)
             level_tasks.remove_location (702, "mil_max_location")
          end   
       else
          db.actor:give_info_portion ("mil_max_dolg_killed")  
       end        
    end   
    
end

function search_gulag_job(actor, npc)
	local st = xr_gulag.isUnderFraction (npc)
	if st ~= nil then
		xr_gulag.resetJob(st, npc)
	end
end


--------------------------------------------------------- 
-- BAR-ROSTOK
--------------------------------------------------------- 

function bar_freedom_spam(actor, npc)
	local t = math.random(1,4)
	news_manager.send_tip(actor, "bar_freedom_spam_"..t, nil, "freedom")
end
function bar_ecolog_spam(actor, npc)
	local t = math.random(1,4)
	news_manager.send_tip(actor, "bar_ecolog_spam_"..t, nil, "ecolog")
end
function bar_freedom_angry_actor(actor,npc)
	if actor:has_info("bar_resque_research_gain") and
	   (actor:dont_has_info("bar_get_research_start") or
	   actor:has_info("bar_get_research_fail"))
	then
		npc:set_relation(game_object.enemy, actor)
	end
end
function bar_check_heli_scene(actor,npc)
	if not db.actor then return end
	
	local t = db.zone_by_name["bar_heli_crush_spam"]
		
	if db.actor:has_info("bar_get_research_done") or
	   db.actor:has_info("bar_get_research_fail") or
	   db.actor:has_info("bar_get_research_dead") or
	   db.actor:has_info("bar_resque_research_done") or
	   db.actor:has_info("bar_resque_research_fail") or
	   db.actor:has_info("bar_resque_research_dead")
	then		
		if t and t:position():distance_to(db.actor:position()) > 150
		then
--			printf("pseudodogs")
			db.actor:disable_info_portion("bar_heli_scene_stay_online")
			db.actor:give_info_portion("bar_spawn_heli_psevdodogs")						
		end
	else
--		printf("crushes")
		db.actor:give_info_portion("bar_heli_scene_stay_online")
	end
end

function bar_arena_introduce(actor, npc)
	if db.actor:has_info("bar_arena_pseudodog_choosen") then
		news_manager.send_tip(actor, "bar_arena_fight_pseudodog", nil, "arena", 7000)
	elseif db.actor:has_info("bar_arena_snork_choosen") then
		news_manager.send_tip(actor, "bar_arena_fight_snork", nil, "arena", 7000)
	elseif db.actor:has_info("bar_arena_bloodsucker_choosen") then
		news_manager.send_tip(actor, "bar_arena_fight_bloodsucker", nil, "arena", 7000)
	elseif db.actor:has_info("bar_arena_burer_choosen") then
		news_manager.send_tip(actor, "bar_arena_fight_burer", nil, "arena", 7000)
	elseif db.actor:has_info("bar_arena_savage_choosen") then
		news_manager.send_tip(actor, "bar_arena_fight_savage", nil, "arena", 7000)
	end
end

function bar_arena_fight_begin(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_begin", nil, "arena")
end
function bar_arena_fight_10(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_10", nil, "arena")
end
function bar_arena_fight_20(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_20", nil, "arena")
end
function bar_arena_fight_30(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_30", nil, "arena")
end
function bar_arena_fight_40(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_40", nil, "arena")
end
function bar_arena_fight_50(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_50", nil, "arena")
end
function bar_arena_fight_60(actor, npc)
	news_manager.send_tip(actor, "bar_arena_fight_60", nil, "arena")
end

function bar_arena_after_fight(actor, npc)
	if db.actor:has_info("bar_arena_20_p") then
		if db.actor:dont_has_info("bar_arena_fight_60") then
			db.actor:give_info_portion("bar_arena_actor_victory")
			news_manager.send_tip(actor, "bar_arena_fight_victory", nil, "arena")
		else
			db.actor:give_info_portion("bar_arena_actor_lose")
			news_manager.send_tip(actor, "bar_arena_fight_lose", nil, "arena")
		end
	elseif db.actor:has_info("bar_arena_50_p") then
		if db.actor:dont_has_info("bar_arena_fight_30") then
			db.actor:give_info_portion("bar_arena_actor_victory")
			news_manager.send_tip(actor, "bar_arena_fight_victory", nil, "arena")
		else
			db.actor:give_info_portion("bar_arena_actor_lose")
			news_manager.send_tip(actor, "bar_arena_fight_lose", nil, "arena")
		end
	elseif db.actor:has_info("bar_arena_100_p") then
		if db.actor:dont_has_info("bar_arena_fight_10") then
			db.actor:give_info_portion("bar_arena_actor_victory")
			news_manager.send_tip(actor, "bar_arena_fight_victory", nil, "arena")
		else
			db.actor:give_info_portion("bar_arena_actor_lose")
			news_manager.send_tip(actor, "bar_arena_fight_lose", nil, "arena")
		end
	end
end
function bar_arena_actor_afraid(actor, npc)
	news_manager.send_tip(actor, "bar_arena_actor_afraid", nil, "arena")
	db.actor:give_info_portion("bar_arena_reset")
end






function military_max_dead (actor, npc)
    if db.actor:has_info ("mil_max_job") then
       level_tasks.set_task_state (task.fail, "mil_mad_job", 0)
       level_tasks.set_task_state (task.fail, "mil_mad_job", 2)
       level_tasks.remove_location (707, "mil_lukash_location")
    end   
    
    if db.actor:has_info ("mil_lukash_get_job") then
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 0)
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 1)
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 2)
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 3)
       level_tasks.remove_location (708, "mil_dolg_location")
    end
    
    if db.actor:has_info ("mil_max_lukash_call") then
       level_tasks.remove_location (707, "mil_lukash_location")
    end    
    
    level_tasks.remove_location (702, "mil_max_location")
end

function military_lukash_dead (actor, npc)
    if db.actor:has_info ("mil_lukash_get_job") then
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 0)
       level_tasks.set_task_state (task.fail, "mil_lukash_job", 3)
       level_tasks.remove_location (707, "mil_lukash_location")
       level_tasks.remove_location (702, "mil_max_location")
    end
end

function mil_courier_death (actor, npc)
    if db.actor:dont_has_info ("mil_khutor_visited") then
       level_tasks.set_task_state (task.fail, "mil_courier_job", 1)
    end    
end

function val_suicide_stalker_died(actor, npc)
	if not db.actor:has_info_portion("val_suicide_artefact_given") then
		db.actor:set_task_state(task.fail, "val_suicide_find_lost_stalker", 0)
	end
end


function mil_bomb_explode (actor, npc)
    printf ("WALL EXPLODED")
end

-- GARBAGE
function meet_seriy_fail(actor, npc)
	if db.actor then
		if db.actor:dont_has_info("garbage_meetstalker_done") and 
		   db.actor:dont_has_info("garbage_meetstalker_die") and
		   db.actor:has_info("garbage_meetstalker_start")
		then
			db.actor:give_info_portion("garbage_meetstalker_die")
			level_tasks.set_task_state(task.fail, "garbage_meet_stalker", 0)
		end
	end
end

function gar_send_dolg_warning()
	if db.actor then
		if xr_gulag.getGulagPopulation("gar_dolg") > 0 then
			news_manager.send_tip(db.actor, "gar_dolg_warning", 0, "dolg")
		end
	end
end