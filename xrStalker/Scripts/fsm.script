--------------------------------------------------
-- Класс LUA реализующий Finite State Machine
-- для управления персонажами
--------------------------------------------------
class 'FSM'

-- 	инициализация путем задания объекта Non-Player Character
function FSM:__init(npc_obj)
	-- указатель на подконтрольный NPC
	self.npc = npc_obj
	-- матрица, задающая граф переходов состояний
	-- реализуется как двумерная таблица
	transition_matrix = {}
	-- номер текущего состояния
	self.current_state = 0

	log	("scripted FSM for NPC initialized")
end

-- 	добавление указателя на булеву
-- 	функцию условия перехода
function FSM:add_transition(cond_func, from_state_num, to_state_num)
	local transition_vector = self.transition_matrix[from_state_num] 
	
	if transition_vector == nil then
		transition_vector = {[to_state_num] = cond_func}
	else
		transition_vector[to_state_num] = cond_func
	end
end

-- запускает на выполнение функцию проверки и перехода
-- в  новое состояние 
function FSM:check_condition(to_state_num, cond_func)
	if cond_func() == true then
		self.current_state = to_state_num
	end
end

-- запуск бесконечного цикла FSM
function FSM:run()
	while true do
		local transition_vector = self.transition_matrix[self.current_state]
		transition_vector.foreach(transition_vector, 
								  self.check_condition)
	end
end


function main()
	log	("script don't want to work!")
	local stalker1	= get_level_object("m_stalker_e0001")

	local fsm1 = FSM(stalker1)
	log	("and?!")

	wait()
end

