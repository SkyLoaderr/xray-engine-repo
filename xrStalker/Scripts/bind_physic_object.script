----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Разработчик: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Доработки: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

module("xr_motivator")
module("xr_logic")
module("modules")

function init(obj)
	db.storage[obj:id()] = { }

	----------------------------------------------------------------------------------------
	-- Старые схемы
	----------------------------------------------------------------------------------------

	local ini = obj:spawn_ini()
	if ini and ini:section_exist("animation") then
		obj:bind_object(handing_lamp_binder(obj))
		return
	end

	----------------------------------------------------------------------------------------
	-- Новые схемы
	----------------------------------------------------------------------------------------

	local new_binder = generic_physics_binder(obj)
	obj:bind_object(new_binder)
end

---------------------------------------------------------------------------------------------
class "generic_physics_binder" (object_binder)
function generic_physics_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function generic_physics_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_physics_binder:reinit()
	object_binder.reinit(self)

	--printf("generic_physics_binder:reinit()")

	--printf("_bp: generic_physics_binder: %s", self.object:name())
	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
end

function generic_physics_binder:update(delta)
	object_binder.update(self, delta)

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)
	end

	if self.st.active_section ~= nil then
		xr_logic.non_goap_update_actions_event(self.object, self.st[self.st.active_scheme], delta)
	end
end

function generic_physics_binder:net_destroy()
	object_binder.net_destroy(self)
end

function generic_physics_binder:net_save_relevant()
	--printf("generic_physics_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_physics_binder:save(packet)
	--printf("generic_physics_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function generic_physics_binder:load(reader)
	self.loaded = true

	--printf("generic_physics_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end



--------------------------------------------------------------------------------
class "handing_lamp_binder" (object_binder)
function handing_lamp_binder:__init(obj) super(obj)
	printf("Binding lamp")
	self.type		= "low"
	self.time		= 0
	self.rnd		= 0
	self.dir_x_axis = -1
	self.dir_y_axis = -1
	self.joint	= nil
end

function handing_lamp_binder:reload(section)
	object_binder.reload(self, section)
	
	//'Читаем данные из кастом даты. Если неправильные данные, то ставим type = "low"
	local ini	= self.object:spawn_ini()
	if(ini:line_exist("animation", "type")) then
		self.type = ini:r_string("animation", "type")
		printf("read animation type: %s", self.type)
	end
	
	if(self.type ~= "low" and self.type ~= "midle" and self.type ~= "hight") then
		printf("WRONG TUNING HANDING LAMP")
		self.type	= "low"
	end
	
	self.time	= device():time_global()
	self.dir_x_axis = 1
	self.dir_z_axis	= 1
	self.joint		= nil
end

function handing_lamp_binder:update(delta)
	object_binder.update(self, delta)

	if(self.joint == nil) then
		self.joint	= self.object:get_physics_shell():get_joint_by_bone_name("provod")
	end	
	
	if(device():time_global() > self.time) then
		self.joint:set_max_force_and_velocity(0.5 + math.random(), 0.1 * self.dir_x_axis, 0)
		self.joint:set_max_force_and_velocity(0.5 + math.random(), 0.1 * self.dir_z_axis, 2)
		self.dir_x_axis  = self.dir_x_axis * (-1)
		self.dir_z_axis = self.dir_z_axis * (-1)
		self.time    = device():time_global() + math.random(800, 1000)
	end				
end
