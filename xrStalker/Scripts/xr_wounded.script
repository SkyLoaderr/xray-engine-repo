
------------------------------------------------------------------------------------------
-- misc functions
------------------------------------------------------------------------------------------
function send_sos (npc)
    local act = db.actor
    if act == nil or  act:alive () == false or npc:relation (act) == game_object.enemy then
       return 
    end
        
    if distance_between (npc, act) > 200.0  then
       return 
    end
    
    if act ~= nil then
--		news_manager.send_help (act)    
	end
end
------------------------------------------------------------------------------------------
-- Property's
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
class "evaluator_enable" (property_evaluator) 
------------
function evaluator_enable:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_enable:evaluate ()
    return true 
end    
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
class "evaluator_medikit" (property_evaluator)
------------
function evaluator_medikit:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_medikit:evaluate ()
    return self.object:object ("medkit") ~= nil or self.object:object ("bandage") ~= nil
end
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
class "evaluator_wound" (property_evaluator) 
------------
function evaluator_wound:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_wound:evaluate ()
	local overrides = xr_logic.generic_scheme_overrides (self.object)
	if overrides ~= nil and overrides.wounded_enabled == false then
  	   return false
	end
	
	self.wound = self.a.enabled and this.is_wounded(self.object, self.a.hp_max)
    this.process_map_spot(self.object, self.wound, self.a)
	
    return self.wound
end
------------------------------------------------------------------------------------------

class "evaluator_final" (property_evaluator) 
------------
function evaluator_final:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_final:evaluate ()
    if self.object.health < self.a.hp_max and self.a.ignore_time == 0 then 
       self.a.final = false 
    end
    return self.a.final
end
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
class "evaluator_cover" (property_evaluator) 
------------
function evaluator_cover:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_cover:evaluate ()
	if not (self.a.enabled and this.is_wounded(self.object, self.a.hp_max)) then
		self.a.cover = false
	end
    return self.a.cover
end
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
class "evaluator_friend" (property_evaluator) 
------------
function evaluator_friend:__init (name, storage) super (nil, name)
    self.a = storage
end
------------
function evaluator_friend:evaluate ()

	local vtable = self.object:not_yet_visible_objects ()
	if vtable == nil then return false end
	
	local dist = 100000.0
	local npc = nil
	
	for v in vtable do
		local vo = v:object ()
		if v.value > 0.25 * self.object:visibility_threshold () then
		   local type = object_type (vo)
		   if type == "stalker" then
		      if dist > distance_between (self.object, vo) then
		         dist = distance_between (self.object, vo)
		         npc = vo
		      end   
		   end    
        end
	end
	
	if npc == nil then return false end
	self.a.npc = npc
	if self.object:relation (npc) == game_object.enemy then return false end
	return true
		
end
------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------
class "action_cover" (action_base)
------------
function action_cover:__init (name, storage) super (nil, name)
    self.a = storage
    self.pos = vector ():set (0, 0, 0)
    self.vid = -1
    self.stage = 0
    self.dir = vector ():set (0, 0, 0)
end
------------
function action_cover:initialize ()
    action_base.initialize (self)
    
    local pt = self.object:safe_cover (self.object:position (), 20, 0)
    if pt == nil or self.object.health < self.a.hp_min then
       self.pos = self.object:position ()
       self.vid = self.object:level_vertex_id ()
    else
       self.pos = pt:position ()
       self.vid = pt:level_vertex_id ()    
    end    
    
    if self.object:accessible (self.vid) == false then
       local vtemp = vector ():set (0, 0, 0); 
       self.vid, vtemp = self.object:accessible_nearest (self.pos, vtemp)
       self.pos = vtemp
    end    

    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      (self.pos)
    self.object:set_desired_direction     ()
    self.object:set_detail_path_type      (move.line)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.vid)
    
    state_mgr.set_state(self.object, "walk")
end
------------
function action_cover:execute ()
    action_base.execute (self)
    if self.object:level_vertex_id () == self.vid and self.pos:distance_to (self.object:position ()) < 1.0 then
		self.a.cover = true
    end    
end    
------------
function action_cover:finalize ()
    action_base.finalize (self)
end    
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
class "action_idle" (action_base)
------------
function action_idle:__init (name, storage) super (nil, name)
    self.a = storage
   	self.sounds = 
   	            { rnd = 100,
				  maxidle = 5, 
				  sumidle = 2,
				  themes = { "help" } 
				}
    self.send_time = 0;
    self.actor = nil	
end
------------
function action_idle:initialize ()
    action_base.initialize (self)

    state_mgr.set_state(self.object, "wounded")
    xr_meet.override_meet (self.object, true)
    self.send_time = device ():time_global ()    
end
------------
function action_idle:execute ()
    action_base.execute (self)
    if self.object:is_talking () == false then
       xr_sound.sound_update(self.object, self.sounds)		
    end   
    
    if device ():time_global () - self.send_time > 15000 then    
       if self.object:is_talking () == false then
          this.send_sos (self.object)
       end   
       self.send_time = device ():time_global ()
    end   
end    
------------
function action_idle:finalize ()
    action_base.finalize (self) 
    xr_meet.override_meet (self.object, false)
end    
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
class "action_help" (action_base)
------------
function action_help:__init (name, storage) super (nil, name)
    self.a = storage
    self.first = false
   	self.sounds = 
   	            { rnd = 100,
				  maxidle = 5, 
				  sumidle = 2,
				  themes = { "help_see" } 
				}
    self.send_time = 0
    self.actor = nil
    self.first_sound = true
end
------------
function action_help:initialize ()
    action_base.initialize (self)
    
    self.object:enable_talk ()
    
    xr_meet.override_meet (self.object, true)
    self.send_time = device ():time_global ()
    
    if self.a.replace_theme == true then
       printf ("WOUNDED : clear default theme. Object %s", self.object:name ()) 
       self.sounds.themes = {}
    end
        
    local found = false
    if self.a.theme ~= nil then
       for a = 1, table.getn (self.sounds.themes), 1 do
           if self.sounds.themes[a] == self.a.theme then
              found = true
           end
       end
       if found == false then         
          table.insert (self.sounds.themes, self.a.theme)
          printf ("Additional theme %s added", self.a.theme)
       end   
    end
    
    state_mgr.set_state(self.object, "help_me")
    self.first_sound = true
end
------------
function action_help:execute ()
    action_base.execute (self)
       
--    if distance_between (self.object, self.a.npc) < 5 then
       -- ÂÑÒÀÂÈÒÜ ÌÀÕÀÍÈÅ ÐÓÊÎÉ ÑÈÄÎÐÎÂÈ×À
--       state_mgr.set_state(self.object, "help_me")
--    else
--       state_mgr.set_state(self.object, "wounded")
--    end
    if self.object:is_talking () == false then
       if self.object:active_sound_count() == 0 and self.first_sound == true then 
	      xr_sound.sound_update(self.object, self.sounds, true)
	      self.first_sound = false
	   else    
	      xr_sound.sound_update(self.object, self.sounds)
	   end   
	end   
	
    if device ():time_global () - self.send_time > 15000 then    
       if self.object:is_talking () == false then
          this.send_sos (self.object) 
       end   
       self.send_time = device ():time_global ()
    end   
    
end    
------------
function action_help:finalize ()
    action_base.finalize (self)
    xr_meet.override_meet (self.object, false)
end    
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
class "action_stand" (action_base)
------------
function action_stand:__init (name, storage) super (nil, name)
    self.a = storage
    self.first = false
   	self.sounds = 
   	            { rnd = 100,
				  maxidle = 5, 
				  sumidle = 2,
				  themes = { "help_stalker_thanx" } 
				}
end
------------
function action_stand:initialize ()
    action_base.initialize (self)
    self.stage = 0
    xr_meet.override_meet (self.object, true)
    if self.a.on_medikit ~= nil and actor then
       xr_logic.pick_section_from_condlist (db.actor, self.object, self.a.on_medikit.condlist) 
    end   
    
    if self.object:object ("medkit") ~= nil then
       self.object:eat (self.object:object ("medkit"))
    elseif self.object:object ("bandage") ~= nil then
       self.object:eat (self.object:object ("bandage"))
    end   
end
------------
function action_stand:execute ()
    action_base.execute (self)
    
    if self.stage == 0 then
       xr_sound.sound_update (self.object, self.sounds, true)
       return
    end
    
    if self.stage == 1 then
       self.stage = 2
    end    
    
    if self.object:is_talking () == true then
    end   
end    
------------
function action_stand:finalize ()   
    xr_meet.override_meet (self.object, false)
    --self.object:restore_default_start_dialog ()
    action_base.finalize (self)
    self.a.sit = false
end    
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
class "action_enemy" (action_base)
------------
function action_enemy:__init (name, storage) super (nil, name)
    self.a = storage
    self.first = false
   	self.sounds = 
   	            { rnd = 100,
				  maxidle = 5, 
				  sumidle = 2,
				  themes = { "help_see" } 
				}
    self.send_time = 0
    self.actor = nil
end
------------
function action_enemy:initialize ()
    action_base.initialize (self)
    
    xr_meet.override_meet (self.object, true)    
    self.send_time = device ():time_global ()    
end
------------
function action_enemy:execute ()
    action_base.execute (self)

    local enemy = self.object:best_enemy ()
    state_mgr.set_state(self.object, "hide", nil,nil, {look_object = enemy})
	
	if enemy and distance_between(self.object, enemy) < 20 and self.object:see(enemy) == true then
		if enemy:alive() == true then 
			state_mgr.set_state(self.object, "hide_fire", nil,nil, {look_object = enemy})
		else   
			state_mgr.set_state(self.object, "hide", nil,nil, {look_object = enemy, look_position = enemy:position()})
		end	
    end

	if self.object:active_sound_count() == 0 then
		xr_sound.sound_update(self.object, self.sounds)		
	end     
    
    if device ():time_global () - self.send_time > 15000 then    
       this.send_sos (self.object) 
       self.send_time = device ():time_global ()
    end   
end    
------------
function action_enemy:finalize ()
    action_base.finalize (self)
    xr_meet.override_meet (self.object, false)
end    
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
class "action_medkit" (action_base)
------------
function action_medkit:__init (name, storage) super (nil, name)
end
------------
function action_medkit:initialize ()
    action_base.initialize (self)
end
------------
function action_medkit:execute ()
    action_base.execute (self)
    if self.object:object ("medkit") ~= nil then
       self.object:eat (self.object:object ("medkit"))
    elseif self.object:object ("bandage") ~= nil then
       self.object:eat (self.object:object ("bandage"))
    end
end
------------
function action_medkit:finalize ()    
    action_base.finalize (self)
end    
    

------------------------------------------------------------------------------------------
function process_map_spot(npc, wound, st)
	if wound and npc:alive() and st.cover then
		this.show_yourself(npc)
	else
		this.hide_yourself(npc)
	end
end
function show_yourself(npc)
	if npc and not level.map_has_object_spot(npc:id(), "general_wounded_location") then
		level.map_add_object_spot(npc:id(), "general_wounded_location", "")
	end		
end
function hide_yourself(npc)
	if npc and level.map_has_object_spot(npc:id(), "general_wounded_location") then
		level.map_remove_object_spot(npc:id(), "general_wounded_location")
	end		
end

------------------------------------------------------------------------------------------
function add_to_binder (object, ini, scheme, section, st)

    local operators     = {}
    local properties    = {}
    
    properties["enable"]        =   xr_evaluators_id.sidor_wounded_base + 0
    properties["wound"]         =   xr_evaluators_id.sidor_wounded_base + 1
    properties["sit"]           =   xr_evaluators_id.sidor_wounded_base + 2
    properties["friend"]        =   xr_evaluators_id.sidor_wounded_base + 3
    properties["cover"]         =   xr_evaluators_id.sidor_wounded_base + 4
    properties["medikit"]       =   xr_evaluators_id.sidor_wounded_base + 5
	properties["contact"]		=   xr_evaluators_id.stohe_meet_base + 1         
    
    operators["cover"]          =   xr_actions_id.sidor_act_wounded_base + 0
    operators["sit"]            =   xr_actions_id.sidor_act_wounded_base + 1
    operators["idle"]           =   xr_actions_id.sidor_act_wounded_base + 2
    operators["help"]           =   xr_actions_id.sidor_act_wounded_base + 3
    operators["friend"]         =   xr_actions_id.sidor_act_wounded_base + 4
    operators["enemy"]          =   xr_actions_id.sidor_act_wounded_base + 5
    operators["clear"]          =   xr_actions_id.sidor_act_wounded_base + 6
    operators["stand"]          =   xr_actions_id.sidor_act_wounded_base + 7
    operators["medkit"]         =   xr_actions_id.sidor_act_wounded_base + 8
    
    
    local manager = object:motivation_action_manager ()
    manager:add_evaluator (properties["enable"],    this.evaluator_enable       ("wounded_enabled", st))
    manager:add_evaluator (properties["wound"],     this.evaluator_wound        ("wounded_wound", st))
    manager:add_evaluator (properties["friend"],    this.evaluator_friend       ("wounded_see_friend", st))
    manager:add_evaluator (properties["cover"],     this.evaluator_cover        ("wounded_in_cover", st))
    manager:add_evaluator (properties["medikit"],   this.evaluator_medikit      ("wounded_medikit", st))

    local action = this.action_cover ("wounded_action_cover", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["medikit"],         false))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["cover"],           false))
	action:add_precondition (world_property(properties["contact"],	        false))
    action:add_effect       (world_property (properties["cover"],           true))
   	manager:add_action      (operators["cover"], action)
   
    action = this.action_idle ("wounded_action_idle", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["medikit"],         false))
    action:add_precondition (world_property (properties["cover"],           true))
    action:add_precondition (world_property (properties["friend"],          false))
    action:add_effect       (world_property (properties["medikit"],         true))
   	manager:add_action      (operators["idle"], action)

    action = this.action_help ("wounded_action_help", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["medikit"],         false))
    action:add_precondition (world_property (properties["cover"],           true))
    action:add_precondition (world_property (properties["friend"],          true))
    action:add_effect       (world_property (properties["medikit"],         true))
   	manager:add_action      (operators["help"], action)

    action = this.action_stand ("wounded_action_stand", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["medikit"],         true))
    action:add_precondition (world_property (properties["cover"],           true))
    action:add_effect       (world_property (properties["wound"],           false))
   	manager:add_action      (operators["stand"], action)

    action = this.action_enemy ("wounded_action_enemy", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (stalker_ids.property_enemy,    true))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["cover"],           true))
    action:add_effect       (world_property (stalker_ids.property_enemy,    false))
   	manager:add_action      (operators["enemy"], action)
   	
   	action = this.action_medkit ("wounded_action_medkit", st)
    action:add_precondition (world_property (stalker_ids.property_alive,    true))
    action:add_precondition (world_property (properties["enable"],          true))
    action:add_precondition (world_property (properties["wound"],           true))
    action:add_precondition (world_property (properties["medikit"],         true))
    action:add_effect       (world_property (properties["wound"],           false))
   	manager:add_action      (operators["medkit"], action)
    
    action = manager:action (xr_actions_id.alife)
    action:add_precondition (world_property (properties["wound"],  false))
    
    action = manager:action (stalker_ids.action_combat_planner)
    action:add_precondition (world_property (properties["cover"],           false))

end
------------
function set_wounded (object, ini, scheme, section)

	local st = xr_logic.assign_storage_and_bind (object, ini, scheme, section)
    	
    st.on_medikit = xr_logic.cfg_get_condlist (ini, section, "on_medikit", object)
    st.dialog  = utils.cfg_get_string (ini, section, "dialog", object, false, "")
    st.on_sit_info = xr_logic.cfg_get_condlist (ini, section, "on_sit", object)
    st.hp_min = utils.cfg_get_number (ini, section, "hp_min", object, false, 10)
    st.hp_max = utils.cfg_get_number (ini, section, "hp_max", object, false, 20)
    st.theme = utils.cfg_get_string (ini, section, "help_theme", object, false, "")
    st.replace_theme = utils.cfg_get_bool (ini, section, "replace_default_theme", object, false, false)
    if st.theme == "" then st.theme = nil end
   
    if st.replace_theme == true and st.theme == nil then
       abort ("WOUNDED SCHEME IS NOT WORKING WITHOUT EMPTY THEMES LIST !!! Object %s", npc:name ()) 
    end
           
    if st.hp_min >= st.hp_max then
       abort ("WOUNDED SCHEME IS NOT WORKING WHILE hp_min MORE OR EQUAL THAN hp_max !!! Object %s", npc:name ())
    end
    st.hp_min = st.hp_min / 100.0
    st.hp_max = st.hp_max / 100.0
    st.sit = false
    st.cover = false
    st.ignore_time = 0

    st.enabled = true -- added by Zmey
end

function is_wounded(npc, hp_max)
    return npc.health < hp_max
end

-- added by Zmey
function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end