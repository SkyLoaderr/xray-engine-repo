--[[------------------------------------------------------------------------------------------------------------------
Схема "Разведчик" (управляет разведчиком, который водит за собой follower'ов)
Чугай Саша

Сделать:
--------------------------------------------------------------------------------------------------------------------]]

local leader_move = 0
local leader_stop = 1

-- rotate vector around Y axis
function vector_rotate_y( v, angle )
    angle = angle * 0.017453292519943295769236907684886
    local c = math.cos( angle )
    local s = math.sin( angle )
    return vector():set( v.x * c - v.z * s, v.y, v.x * s + v.z * c )
end

function set_soldier_positions( scout, a, around )
    local size = table.getn( a.followers )
    if size == 0 then
        return
    end

    local dir = scout:direction()
    dir.y = 0.0
    dir:normalize ()

    local step
    local angle = 90.0
    local vec0 = vector():set( 0, 0, 0 )

    if around then
        step = 360.0 / size
    else
        step = 180.0 / size
    end

    for i, v in ipairs( a.followers ) do
        if i == 1 then
            angle = angle + step * 0.5
        else
            angle = angle + step
        end

        local vec = this.vector_rotate_y( dir, angle )

        v.direction = vec

        if around then
            v.look_dir = vec
            v.distance = 5
        else
            v.look_dir = vec0
            v.distance = 3
        end
    end
end

function set_command( a, command )
    for i, v in ipairs( a.followers ) do
        v.leader_command = command
        v.mental_state   = anim.danger
    end
end

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "схема разведчика активна"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_scout" (property_evaluator)

function evaluator_scout:__init( name, storage ) super ()
    self.a = storage
end

function evaluator_scout:evaluate ()
    --printf( "s1" )
    local b = self.a.enabled == true
--    if b then sb = "true" else sb = "false" end
--    printf( "s2 "..sb )
    return b
end

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "нахожусь на позиции"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_in_pos" (property_evaluator)

function evaluator_in_pos:__init( name, npc, storage ) super ()
    self.a   = storage
    self.npc = npc
end

function evaluator_in_pos:evaluate ()
--    printf( "p1" )
    local b = self.npc:level_vertex_id() == self.a.pos_vert_id
--    if b then sb = "true" else sb = "false" end
--    printf( sb )
--    printf( "p2" )
    return b
end

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "сработал ли уже запущенный таймер"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_timer" (property_evaluator)

function evaluator_timer:__init( name, storage ) super ()
    self.a = storage
end

function evaluator_timer:evaluate ()
--    printf( "t1" )
    local b = ( self.a.timer ~= nil ) and self.a.timer <= device():time_global()
--    printf( "t2" )
    return b
end

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "перехвачено ли уже событие смерти сталкера?"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_dead_hook" ( property_evaluator )

function evaluator_dead_hook:__init( storage ) super()
    self.a = storage
end

function evaluator_dead_hook:evaluate()
    return self.a.dead_hook
end

---------------------------------------------------------------------------------------------------------------------
-- Действие "идти на позицию"
---------------------------------------------------------------------------------------------------------------------

class "action_go_to_pos" (action_base)

function action_go_to_pos:__init( name, storage ) super( nil, name )
    self.aa = storage
    self.a  = storage.scout
end

function action_go_to_pos:initialize()
    action_base.initialize( self )

    self.object:set_node_evaluator      ()
    self.object:set_path_evaluator      ()
    self.object:set_desired_direction   ()
    self.object:set_sight               ( look.danger, nil, 0 )
    self.object:set_item                ( object.idle, self.object:best_weapon() )
    self.object:set_body_state          ( move.standing )
    self.object:set_movement_type       ( move.walk )
    self.object:set_mental_state        ( anim.danger )
    self.object:set_path_type           ( game_object.level_path )
    self.object:set_detail_path_type    ( move.line )
    self.object:set_dest_level_vertex_id( self.a.pos_vert_id )
    self.object:set_desired_position    ( self.a.pos )

    this.set_command( self.aa, leader_move )

    printf( "go_to_pos initialized" )
end

function action_go_to_pos:execute()
    action_base.execute( self )
    this.set_soldier_positions( self.object, self.aa )
end

function action_go_to_pos:finalize()
    action_base.finalize( self )
    self.object:clear_animations()
end

---------------------------------------------------------------------------------------------------------------------
-- Действие "рассредоточить ведомых"
---------------------------------------------------------------------------------------------------------------------

class "action_look_around" (action_base)

function action_look_around:__init( name, storage ) super( nil, name )
    self.aa = storage
    self.a  = storage.scout
end

function action_look_around:initialize()
    action_base.initialize( self )

    self.object:set_node_evaluator      ()
    self.object:set_path_evaluator      ()
    self.object:set_desired_direction   ()
    self.object:set_sight               ( look.danger, nil, 0 )
    self.object:set_item                ( object.idle, self.object:best_weapon() )
    self.object:set_body_state          ( move.standing )
    self.object:set_movement_type       ( move.stand )
    self.object:set_mental_state        ( anim.danger )

    self.a.timer = device():time_global() + time_infinite

    this.set_command( self.aa, leader_stop )
    this.set_soldier_positions( self.object, self.aa, true )

    printf( "look_around initialized" )
end

function action_look_around:execute()
    action_base.execute( self )
end

function action_look_around:finalize()
    action_base.finalize( self )

    this.set_soldier_positions( self.object, self.aa )
end

---------------------------------------------------------------------------------------------------------------------
-- Действие освобождения сталкера во free_no_alife
---------------------------------------------------------------------------------------------------------------------

class "action_free" (action_base)

function action_free:__init( name, storage ) super( nil, name )
    self.a = storage
end

function action_free:initialize()
    action_base.initialize( self )
    self.a.enabled = false
    printf( "free initialized" )
end

function action_free:execute()
    action_base.execute( self )
end

function action_free:finalize()
    action_base.finalize( self )
end

---------------------------------------------------------------------------------------------------------------------
-- Действие для перехвата смерти сталкера
---------------------------------------------------------------------------------------------------------------------
class "action_dead_hook" ( action_base )

function action_dead_hook:__init( name, storage ) super( nil, name )
    self.aa = storage
    self.a  = storage.scout
end

function action_dead_hook:initialize()
    action_base.initialize( self )

    self.a.dead_hook = true

    -- назначить первого попавшегося живого follower-a новым лидером
    for i, v in ipairs( self.aa.followers ) do
        if v.npc:alive() then
            for ii, vv in ipairs( self.aa.followers ) do
                vv.leader_name = v.npc:name()
                vv.leader      = v.npc
                -- иногда до перехвата смерти командира некоторые успевают выйти из-под схемы follower. Вернуть их.
                vv.enabled     = true
            end

            -- командир теперь scout, а не follower
            xr_motivator.storage[v.npc:id()].scout.enabled = true
            v.enabled = false

            break
        end
    end

    printf( "dead_hook initialized" )
end

function action_dead_hook:execute()
    action_base.execute( self )
end

function action_dead_hook:finalize()
    action_base.finalize( self )
end

----------------------------------------------------------------------------------------------------------------------
-- Настройка GOAP
----------------------------------------------------------------------------------------------------------------------
function add_to_binder( obj )
    local aa = xr_motivator.storage[obj:id()]
    local a  = aa.scout

    if not a.path_name then
        return
    end

    local operators  = {}
    local properties = {}

    local base_id = xr_evaluators_id.chugai_scout_base
    properties["scout"]      = base_id + 0
    properties["in_pos"]     = base_id + 1
    properties["timer"]      = base_id + 2
    properties["dead_hook"]  = base_id + 3

    base_id = xr_actions_id.chugai_scout_base
    operators["go_to_pos"]   = base_id + 0
    operators["look_around"] = base_id + 1
    operators["free"]        = base_id + 2
    operators["dead_hook"]   = base_id + 3

    a.path        = patrol( a.path_name )
    a.pos_vert_id = a.path:level_vertex_id( 0 )
    a.pos         = a.path:point( 0 )

    local manager = obj:motivation_action_manager ()
    manager:add_evaluator( properties["scout"],     this.evaluator_scout ("property_scout", a ) )
    manager:add_evaluator( properties["in_pos"],    this.evaluator_in_pos("property_in_pos", obj, a ) )
    manager:add_evaluator( properties["timer"],     this.evaluator_timer ("property_timer", a ) )
    manager:add_evaluator( properties["dead_hook"], this.evaluator_timer ("property_timer", a ) )
    
    local action = this.action_go_to_pos( "action_go_to_pos", aa )
    action:add_precondition( world_property( stalker_ids.property_alive, true  ) )
    action:add_precondition( world_property( stalker_ids.property_enemy, false ) )
    --action:add_precondition( world_property( properties["in_pos"],       false ) )
    action:add_effect      ( world_property( properties["in_pos"],       true  ) )
    manager:add_action     ( operators["go_to_pos"], action )

    action = this.action_look_around( "action_look_around", aa )
    action:add_precondition( world_property( stalker_ids.property_alive, true  ) )
    action:add_precondition( world_property( stalker_ids.property_enemy, false ) )
    action:add_precondition( world_property( properties["in_pos"],       true  ) )
    --action:add_precondition( world_property( properties["timer"],        false ) )
    action:add_effect      ( world_property( properties["timer"],        true  ) )
    manager:add_action     ( operators["look_around"], action )

    action = this.action_free( "action_free", a )
    action:add_precondition( world_property( stalker_ids.property_alive, true  ) )
    action:add_precondition( world_property( stalker_ids.property_enemy, false ) )
    action:add_precondition( world_property( properties["timer"],        true  ) )
    action:add_effect      ( world_property( properties["scout"],        false ) )
    manager:add_action     ( operators["free"], action )

    action = manager:action( stalker_ids.action_free_no_alife )
    action:add_precondition( world_property (properties["scout"], false ) )
    
    action = this.action_dead_hook( "action_dead_hook", aa )
    action:add_effect( world_property( properties["dead_hook"], true ) )
    manager:add_action( operators["dead_hook"], action )

    action = manager:action( stalker_ids.action_dead )
    action:add_precondition( world_property( properties["dead_hook"], true ) )
end
