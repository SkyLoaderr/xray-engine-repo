----------------------------------------------------------------------------------------------------
-- Remark
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

local state_none = 0
local state_initial = 1
local state_going_to_plr = 2
local state_rotating = 3
local state_standing = 4

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_remark" (property_evaluator)

function evaluator_need_remark:__init(storage) super()
  	self.st = storage
end

function evaluator_need_remark:evaluate()
  	return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------------------------
class "action_remark_activity" (action_base)

function action_remark_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
end

function action_remark_activity:initialize()
	--printf("_bp: action_remark_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self:reset_scheme()
end


function action_remark_activity:reset_scheme()
	self.object:clear_animations()
	
	self.state = state_initial

	self.reset_time = device():time_global()
	self.snd_started = false
	self.target = nil

	self.st.signals = {}
	self.sound_end_signalled = false
	self.move_end_signalled = false
end	

function action_remark_activity:signal_arrival()
	if not self.move_end_signalled then
		self.move_end_signalled = true
		self.st.signals["move_end"] = true
		printf("xr_remark: signalling move_end")
	end
end

function action_remark_activity:activate_sound()
	if self.snd_started then
		return
	end
	self.snd_started = true

	local snd = {}
	snd.rnd = snd_prob
	snd.maxidle = 1
	snd.sumidle = -1
	snd.themes = parse_names(self.st.snd)
	xr_sound.sound_update(self.object, snd, true)
end

function action_remark_activity:update_anim()
	if self.st.anim then
		xr_state.anim_update(self.st.anim, self.object)
	end
end

function action_remark_activity:if_actor_far_go_to_actor()
	if not self.st.no_move then
		if distance_between(self.object, self.target) >= 4 then
			self.object:set_movement_type(move.run)
			self.object:set_desired_direction(self.target:direction())
			self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
			self.state = state_going_to_plr
		end
	end
end
	
function action_remark_activity:step()
	-- Scheme finalization conditions:
	if not self.sound_end_signalled and self.snd_started and self.object:active_sound_count() == 0 then
		self.sound_end_signalled = true
		self.st.signals["sound_end"] = true
		printf("xr_remark: signalling sound_end")
	end

	-- Try to switch to another scheme:
	xr_logic.try_switch_to_another_section(self.object, self.st)

	if not self.target then
		if self.st.target == "actor" then
			self.target = level.actor()
		else
			self.target = level.object(self.st.target)
		end
		if not self.target or not self.target:alive() then
			return
		end
	end

	-- Для всех состояний нужно выбрать режим оружия:
	if self.st.no_wpn then
		self.object:set_item(object.idle, nil)
	else
		self.object:set_item(object.idle, self.object:best_weapon())
	end

	if distance_between(self.object, self.target) < 3 then
		self:signal_arrival()
	end
	
	-- Начальное состояние
	if self.state == state_initial then
		xr_state.anim_update(nil, self.object)
		if self.st.no_move then
			self.object:set_movement_type(move.stand)
			self.object:set_mental_state(anim.danger)
			self.object:set_body_state(move.standing)
			if self.st.no_rotate then
				-- Можно включать и звук и анимацию
				if self.st.snd then
					self:activate_sound()
				end
				self:update_anim()
				self.state = state_standing
				return
			else
				-- Сперва повернемся, а затем включим анимацию
				self.expiration_time = device():time_global() + move_mgr.rotation_start_time
				self.state = state_rotating
			end
		else
			-- Побежали к игроку
			self.object:set_path_type(game_object.level_path)
			self.object:set_desired_direction(self.target:direction())
			self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
			self.object:set_movement_type(move.run)
			self.object:set_mental_state(anim.danger)
			self.object:set_body_state(move.standing)
			self.state = state_going_to_plr
		end
		-- Если бежим к сталкеру, или стоим на месте, но не запрещено вращение - посмотреть на сталкера:
		utils.stalker_look_at_stalker(self.object, self.target)
		return
	end

	if self.state == state_going_to_plr then
		utils.stalker_look_at_stalker(self.object, self.target)

		-- Пробовать включать звук, когда мы близко, или долго не можем добраться до игрока:
		if self.st.snd and
		   (self.st.snd_dist < distance_between(self.object, self.target) or
		    self.st.snd_timeout <= device():time_global() - self.reset_time) then
			self:activate_sound()
		end

		if self.st.arrival_timeout <= device():time_global() - self.reset_time then
			self.object:set_movement_type(move.stand)
			self.st.no_move = true -- Не получается пробежать к актеру - больше и не пытаться
			self:signal_arrival()
			if self.st.no_rotate then
				self.state = state_standing
			else
				self.state = state_rotating
			end
		else
			self.object:set_movement_type(move.run)
			self.object:set_desired_direction(self.target:direction())
			self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
		end
		return
	end

	if self.state == state_rotating then
		utils.stalker_look_at_stalker(self.object, self.target)
		if not self.st.no_move or not self.st.anim then
			if self.st.snd then
				self:activate_sound()
			end
			self:if_actor_far_go_to_actor()
		elseif ((self.expiration_time and device():time_global() >= self.expiration_time and
		        not self.object:is_body_turning())
		       or utils.no_need_to_rotate(self.object, self.target:position())) then
			-- Повернулись в сторону игрока - включить анимацию и звук
			self:update_anim()
			if self.st.snd then
				self:activate_sound()
			end
			self.state = state_standing
		end
		return
	end

	if self.state == state_standing then
		if self.st.snd then
			self:activate_sound()
		end
		self:update_anim()
		self:if_actor_far_go_to_actor()
		return
	end	
end
	
function action_remark_activity:execute()
	action_base.execute(self)

	local old_state
	repeat
		old_state = self.state
		self:step()
	until old_state == self.state

end

function action_remark_activity:finalize()
	self.object:clear_animations()
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--remark binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
		printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)
  		local operators	= {}
	  	local properties  = {}
		
	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
	 	properties["need_remark"] = xr_evaluators_id.zmey_remark_base + 1

	 	operators["action_remark"] = xr_actions_id.zmey_remark_base + 1

	   	-- // evaluators
		manager:add_evaluator(properties["need_remark"], this.evaluator_need_remark(storage))

		local new_action = this.action_remark_activity(npc, "action_remark_activity", storage)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(properties["need_remark"], true))
		new_action:add_precondition(world_property(properties["event"], false))
	   	new_action:add_effect(world_property(properties["need_remark"], false))
		manager:add_action(operators["action_remark"], new_action)

		-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
		xr_logic.subscribe_action_for_events(npc, new_action)

	  	new_action = manager:action(xr_actions_id.alife)
	  	new_action:add_precondition(world_property(properties["need_remark"], false))
end

-- Включение схемы
-- 
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда для синхронизации
--
function set_scheme(npc, ini, scheme, section, gulag_name)
	printf("DEBUG: set_scheme: scheme='%s', section='%s'", scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	printf("DEBUG: set_scheme: storage assigned")

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.no_rotate = utils.cfg_get_bool         (ini, section,   "no_rotate",       npc, false)
	st.no_wpn = utils.cfg_get_bool            (ini, section,   "no_wpn",          npc, false)
	st.snd = utils.cfg_get_string             (ini, section,   "snd",             npc, false, "")
	st.snd_dist = utils.cfg_get_number        (ini, section,   "snd_dist",        npc, false,     5)
	st.snd_timeout = utils.cfg_get_number     (ini, section,   "snd_timeout",     npc, false,     4000)
	st.arrival_timeout = utils.cfg_get_number (ini, section,   "arrival_timeout", npc, false,     5000)
	st.anim = utils.cfg_get_string            (ini, section,   "anim",            npc, false, "")
	st.no_move = utils.cfg_get_bool           (ini, section,   "no_move",         npc, false,     st.anim ~= nil)
	st.dlg = utils.cfg_get_string             (ini, section,   "dlg",             npc, false, "")
	st.target = utils.cfg_get_string          (ini, section,   "target",          npc, false, "", "actor")

	if not st.no_move and st.anim then
		utils.abort("object '%s': section '%s': anim field specified, when no_move is false",
			npc:name(), section)
	end
end

