----------------------------------------------------------------------------------------------------
-- Remark
----------------------------------------------------------------------------------------------------
-- –азработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

local state_none = 0
local state_initial = 1
local state_going_to_plr = 2
local state_standing = 4

local body_state_free = 0
local body_state_danger = 1

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_remark" (property_evaluator)

function evaluator_need_remark:__init(storage, name) super(nil, name)
  	self.st = storage
end

function evaluator_need_remark:evaluate()
	--printf("_bp: evaluator_need_remark [%s]: evaluate(): %s",
	--	self.object:name(), if_then_else(xr_logic.is_active(self.object, self.st), "true", "false"))
  	return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------------------------
class "action_remark_activity" (action_base)

function action_remark_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
	self.was_reset = false
end

function action_remark_activity:initialize()
	printf("_bp: action_remark_activity [%s]: initialize", self.object:name())

	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self:reset_scheme()
end

function action_remark_activity:activate_scheme()
        self.was_reset = false
end

function action_remark_activity:reset_scheme()
	self.was_reset = true

	printf("_bp: action_remark_activity [%s]: reset_scheme", self.object:name())

	--self.object:clear_animations()
	
	self.state = state_initial

	self.reset_time = time_global()
	
	self.snd_scheduled = false
	self.snd_start_time = nil
	self.snd_started = false
	
	self.target = nil

	self.st.signals = {}
	self.sound_end_signalled = false
	self.move_end_signalled = false
	self.action_end_signalled = false
	self.anim_end_signalled = false
end	

function action_remark_activity:signal_arrival()
	if not self.move_end_signalled then
		self.move_end_signalled = true
		self.st.signals["move_end"] = true
		printf("xr_remark: signalling move_end")
		self:signal_action_end()
	end
end

function action_remark_activity:activate_sound()
	if self.snd_scheduled or not self.st.snd then
		return
	end
	printf("_bp: %s: action_remark_activity:activate_sound(): activating sound", self.object:name())

	self.snd_start_time = time_global()
	self.snd_scheduled = true				

	printf("_bp1 [%s]: num_snd = %d", self.object:name(), self.object:active_sound_count())
	xr_sound.set_sound_play(self.object, self.st.snd)
	printf("_bp2 [%s]: num_snd = %d", self.object:name(), self.object:active_sound_count())
end

function action_remark_activity:if_actor_far_go_to_actor()
	if not self.st.no_move then
		if distance_between(self.object, self.target) >= 4 then
			self:go_to_target()
			self.state = state_going_to_plr
		end
	end
end

function action_remark_activity:get_sug_body_state()
	if self.st.no_danger or self.object:relation(self.target) == game_object.friend then
		return body_state_free --"guard"
	else
		return body_state_danger --"threat"
	end
end

function action_remark_activity:signal_action_end()
	printf("_bp_ signal_action_end [%s, %s, %s, [%s or %s]]",
		utils.to_str(not self.action_end_signalled),
		utils.to_str(self.move_end_signalled),
		utils.to_str(self.sound_end_signalled),
		utils.to_str(not self.st.anim),
		utils.to_str(self.anim_end_signalled))
	if not self.action_end_signalled and
	   (self.st.no_move or self.move_end_signalled) and
	   (not self.st.snd or self.sound_end_signalled) and
	   (not self.st.anim or self.anim_end_signalled) then
		self.action_end_signalled = true
		self.st.signals["action_end"] = true
		printf("xr_remark: signalling action_end")
	end
end

function action_remark_activity:time_callback()
	self:activate_sound()
	if not self.anim_end_signalled then
		self.anim_end_signalled = true
		self.st.signals["anim_end"] = true
		printf("xr_remark: signalling anim_end")
		if self.st.anim then
			self:signal_action_end()
		end
	end
end

function action_remark_activity:turn_end_callback()
	if self.st.snd then
		printf("_bp: action_remark_activity:step(): calling activate_sound from state_initial")
		if not self.st.snd_anim_sync then
			self:activate_sound()
		end
	end
end

function action_remark_activity:stand_still()
	local sug_body_state = self:get_sug_body_state()
	local look_tbl
	if self.st.no_rotate then
		look_tbl = nil
	else
		look_tbl = { look_object = self.target }
	end
	local cb = { obj = self, func = self.time_callback, turn_end_func = self.turn_end_callback }
	
	if self.st.anim then
		state_mgr.set_state(self.object, self.st.anim, cb, 0, look_tbl, { animation = true })
	else
		state_mgr.set_state(self.object,
			if_then_else(sug_body_state == body_state_free, "guard", "threat"),
			cb,
			0,
			look_tbl,
			{ animation = true }
		)
	end
end

function action_remark_activity:update_destination()
	self.object:set_path_type(game_object.level_path)
	self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
end

function action_remark_activity:go_to_target()
	local sug_body_state = self:get_sug_body_state()

	self:update_destination()
	state_mgr.set_state(self.object,
		if_then_else(sug_body_state == body_state_free, "run", "assault"),
		nil,
		nil,
		{ look_object = self.target })
end
	
function action_remark_activity:step()
	-- Scheme finalization conditions:
	if not self.sound_end_signalled and self.snd_started and self.object:active_sound_count() == 0 then
		self.sound_end_signalled = true
		self.st.signals["sound_end"] = true
		printf("xr_remark [%s]: signalling sound_end", self.object:name())
		self:signal_action_end()
	end

	-- Try to switch to another scheme:
	local actor = db.actor
	if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
		return
	end

	if self.st.target == "actor" then
		self.target = actor
	else
		self.target = level_object_by_sid(self.st.target_sid)
	end
	if not self.target or not self.target:alive() then
		return
	end

	-- Ќачальное состо€ние
	if self.state == state_initial then
		if self.st.no_move then
			self:stand_still()
			self.state = state_standing
		else
			-- ѕобежали к игроку
			self.object:set_path_type(game_object.level_path)
			self.object:set_desired_direction(self.target:direction())
			--printf("xr_remark <target>: %s:%s", utils.to_str(self.target), utils.to_str(self.target:level_vertex_id()))
			self.object:set_dest_level_vertex_id(self.target:level_vertex_id())
			self:go_to_target()
			self.state = state_going_to_plr
		end
		return
	end

	if self.state == state_going_to_plr then
		-- ѕробовать включать звук, когда мы близко, или долго не можем добратьс€ до игрока:
		if self.st.snd and
		   (distance_between(self.object, self.target) <= self.st.snd_dist or
		    time_global() - self.reset_time >= self.st.snd_timeout) then
			printf("_bp: action_remark_activity:step(): calling activate_sound from state_going_to_plr")
			if not self.st.snd_anim_sync then
				self:activate_sound()
			end
		end

		if distance_between(self.object, self.target) < 3 or
		   self.st.arrival_timeout <= time_global() - self.reset_time then
			self:stand_still()
			self.st.no_move = true -- Ќе получаетс€ пробежать к актеру - больше и не пытатьс€
			self:signal_arrival()
			self.state = state_standing
		else
			self:update_destination()
		end
		return
	end

	if self.state == state_standing then
		if self.st.snd then
			printf("_bp: action_remark_activity:step(): calling activate_sound from state_standing")
			if not self.st.snd_anim_sync then
				self:activate_sound()
			end
		end
		self:if_actor_far_go_to_actor()
		return
	end	
end
	
function action_remark_activity:execute()
	action_base.execute(self)

	if not self.was_reset then
		self:reset_scheme()
	end

	--printf("_bp: action_remark_activity [%s]: execute", self.object:name())

	local old_state
	repeat
		old_state = self.state
		self:step()
	until old_state == self.state

	--printf("_bp3 [%s]: num_snd = %d", self.object:name(), self.object:active_sound_count())
	if self.snd_scheduled then -- запросили запуск звука на этом апдейте
		if time_global() - self.snd_start_time > 1000 then
			-- нужно, чтобы прошел как минимум 1 апдейт, но не меньше 1-й секунды, прежде чем считать, что звук
			-- стартовал и ждать его окончани€
			self.snd_started = true
		end
	end
end

function action_remark_activity:finalize()
	xr_sound.set_sound(self.object, nil)
	
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--remark binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
		printf("DEBUG: add_to_binder [%s]: scheme='%s', section='%s'", npc:name(), scheme, section)
  		local operators	= {}
	  	local properties  = {}
		
	   	local manager = npc:motivation_action_manager()

		properties["event"]			= xr_evaluators_id.reaction
	 	properties["need_remark"]	= xr_evaluators_id.zmey_remark_base + 1
		properties["danger"]		= xr_evaluators_id.danger
		
	 	operators["action_remark"] = xr_actions_id.zmey_remark_base + 1

	   	-- // evaluators
		manager:add_evaluator(properties["need_remark"], this.evaluator_need_remark(storage, "remark_need_remark"))

		local new_action = this.action_remark_activity(npc, "action_remark_activity", storage)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(properties["danger"], true))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(properties["need_remark"], true))
		xr_motivator.addCommonPrecondition(new_action)
	   	new_action:add_effect(world_property(properties["need_remark"], false))
	   	new_action:add_effect(world_property(stalker_ids.property_danger,false))
		manager:add_action(operators["action_remark"], new_action)

		-- «арегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
		xr_logic.subscribe_action_for_events(npc, storage, new_action)

	  	new_action = manager:action(xr_actions_id.alife)
	  	new_action:add_precondition(world_property(properties["need_remark"], false))
end

-- ¬ключение схемы
-- 
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда дл€ синхронизации
--
function set_scheme(npc, ini, scheme, section, gulag_name)
	printf("DEBUG: set_scheme: scheme='%s', section='%s'", scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	printf("DEBUG: set_scheme: storage assigned")

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.no_rotate = utils.cfg_get_bool         (ini, section,   "no_rotate",       npc, false)
	st.no_wpn = utils.cfg_get_bool            (ini, section,   "no_wpn",          npc, false)
	st.snd_anim_sync = utils.cfg_get_bool     (ini, section,   "snd_anim_sync",       npc, false)
	if st.no_wpn then
		abort("object '%s': xr_remark.set_scheme: no_wpn field is deprecated", npc:name())
	end
	st.snd = utils.cfg_get_string             (ini, section,   "snd",             npc, false, "", nil)
	st.snd_dist = utils.cfg_get_number        (ini, section,   "snd_dist",        npc, false,     5)
	st.snd_timeout = utils.cfg_get_number     (ini, section,   "snd_timeout",     npc, false,     4000)
	st.arrival_timeout = utils.cfg_get_number (ini, section,   "arrival_timeout", npc, false,     5000)
	st.anim = utils.cfg_get_string            (ini, section,   "anim",            npc, false, "")
	st.no_move = utils.cfg_get_bool           (ini, section,   "no_move",         npc, false,     st.anim ~= nil)
	st.target = utils.cfg_get_string          (ini, section,   "target",          npc, false, "", "actor")
	if st.target ~= actor then
		st.target_sid = tonumber(st.target)
	end
	st.no_danger = utils.cfg_get_bool         (ini, section,   "no_danger",       npc, false)

	if not st.no_move and st.anim then
		abort("object '%s': section '%s': anim field specified, when no_move is false",
			npc:name(), section)
	end
end

