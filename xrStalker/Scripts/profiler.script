local						Counters = {}
local						Names = {}
local						old_hook_func, old_hook_mask, old_hook_count

local function hook			(context)
	if nil ~= old_hook_func then
		if old_hook_func ~= hook then
--			old_hook_func	(context)
		end
	end
	
	local					f = debug.getinfo(2, "f").func
	if nil == Counters[f] then
		Counters[f]			= 1
		Names[f]			= debug.getinfo(2, "Sn")
	else
		Counters[f]			= Counters[f] + 1
	end
end

function setup_hook			()	
	old_hook_func, 
	old_hook_mask, 
	old_hook_count			= debug.gethook();
	
    debug.sethook			(hook, "c")
end

function clear_hook			()	
    debug.sethook			(old_hook_func,old_hook_mask,old_hook_count)
end

local function getname		(func)
    local					n = Names[func]
    local					loc = string.format("[%s]:%s", n.short_src, n.linedefined)
    if "" ~= n.namewhat then
        return				string.format("%s (%s)", loc, n.name) 
    else
        return				string.format("%s", loc)
    end
end

function stats				()
	clear_hook				()
	
	printf					("profiler statistics")
	
	local					sort_stats = {}
    for func, count in pairs(Counters) do
		local				n = getname(func)
		if (nil == sort_stats[n]) then
			sort_stats[n]	= count
		else 
			sort_stats[n]	= sort_stats[n] + count
		end
    end

	local					out_stats = {}
    for i,j in pairs(sort_stats) do
		table.insert		(out_stats,{name=i,count=j})
    end

    table.sort				(out_stats, function (a,b) return a.count<b.count end)
    
    for n,c in pairs(out_stats) do
		printf				("%8d : %s",c.count,c.name)
    end
    
	setup_hook				()
end
