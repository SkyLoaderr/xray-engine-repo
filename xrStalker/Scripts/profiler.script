local Counters = {}
local Names = {}

local old_hook_func, old_hook_mask, old_hook_count = debug.gethook();

local function hook (context)
		printf("hook-called")
		
		if old_hook_func~=nil then
			old_hook_func(context)
		end
		
		local f = debug.getinfo(2, "f").func
		if Counters[f] == nil then    -- first time `f' is called?
			Counters[f] = 1
			Names[f] = debug.getinfo(2, "Sn")
		else  -- only increment the counter
			Counters[f] = Counters[f] + 1
		end
    end

local function getname (func)
    local n = Names[func]
    if n.what == "C" then
        return n.name
    end
    local loc = string.format("[%s]:%s", n.short_src, n.linedefined)
    if n.namewhat ~= "" then
        return string.format("%s (%s)", loc, n.name)
    else
        return string.format("%s", loc)
    end
end

function main()	
    debug.sethook(hook, "c")	-- turn on the hook
--    while true do
--		coroutine.yield()
--  end
end

function stats()
	printf("profiler statistics:")
    for func, count in pairs(Counters) do
      printf("%s : %d",getname(func), count)
    end
end

-- profiler.main()
-- profiler.stats()
