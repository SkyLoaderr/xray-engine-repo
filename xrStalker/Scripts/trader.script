
local trader_idle   =   0   -- торговец бездельничает
local trader_wait   =   1   -- торговец ждет игрока
local trader_end    =   2   -- окончание торговли

local wait_for_clear = 60000

class "Trader"
----------------------------------------------------------------------------------------------------------------------
function Trader:__init (npc, zone, script_name)
    self.npc = npc
    self.zone = zone
    --self.zone:set_callback (self, "on_enter", true)
    --self.zone:set_callback (self, "on_exit", false)
    --self.npc:set_callback (self, "on_start_trade", true)    
    --self.npc:set_callback (self, "on_end_trade", false)   
    --self.npc:set_trade_callback (self, "on_trade")
    
    self.last_npc = nil
    self.already = false
    self.entered = false
    self.exit_time = 0
    self.current_state = trader_idle
    self.wait_time = 0
    self.script = script_name
    self.current = 
                  {
                  start_anim = nil,
                  process_anim = nil,
                  repeats = 0,
                  end_anim = nil,
                  use_start_end = false,
                  end_current = false
                  }
    self.need_interrupt = false                  
    self.enter_time = 0
    self.process_end = false
    self.next_state = trader_idle
    self.exchange = false
    self.process_trade = false
    self.waiter = nil
    self.first = true
    
    self.npc:script (true, self.script)
    self:set_idle ()
end
----------------------------------------------------------------------------------------------------------------------
function Trader:on_enter (zone, obj)

    self.entered = true      
    self.need_interrupt = true
    self.enter_time = device ():time_global ()
    self.exchange = false
    self.waiter = classes.CWaitTime ()
    self.waiter:initialize (1000)
    self.first = true
    
    if self.last_npc ~= nil then
       self.last_npc = obj
       self.already = true
       return
    end
    
    if self.last_npc:id () == obj:id () then
       self.already = true
       return
    end
    
    self.last_npc = obj
    self.already = false
end
----------------------------------------------------------------------------------------------------------------------
function Trader:on_exit (zone, obj)
    self.entered = false
    self.exit_time = device ():time_global ()
    self.need_interrupt = false
    self.exchange = false
    self.waiter = nil
end
----------------------------------------------------------------------------------------------------------------------
function Trader:process ()

    if self.process_trade == true then return end

    if self.entered == false then
       if self.exit_time ~= 0 and device ():time_global () - self.exit_time > wait_for_clear then
          self.exit_time = 0
          self.last_npc = nil
       end
    end 

    self.current_state = self.next_state
    if self.current_state == trader_idle then 
       self:process_idle ()
    elseif self.current_state == trader_wait then
       self:process_wait ()
    elseif self.current_state == trader_end then
       self:process_end ()        
    end    
        
        
end
----------------------------------------------------------------------------------------------------------------------
function Trader:process_wait ()

    --printf ("Process wait")
    if self.npc:action () then return end 
    
    if self.waiter ~= nil and self.waiter:evaluate () == true then
       if self.first == true then
          self.first = false
          printf ("Privet")
       else
          printf ("Chego stoish ?")
       end
       self.waiter:initialize (math.random (3000, 6000))
    end         
    
    if self.entered == false then
       self:set_idle ()
       return
    end
    
    if self.current.end_current == true then
       self:set_wait ()
       return
    end   

    self:play_queue ()   
    
end
----------------------------------------------------------------------------------------------------------------------
function Trader:process_end ()

    --printf ("Process end")
    if self.npc:action () then return end
    
    if self.waiter ~= nil and self.waiter:evaluate () == true then
       if self.first == true then
          self.first = false
          printf ("Molodec")
       else
          printf ("Chego echso ?")
       end
    end         
    
    
    if self.current.end_current == true then
       self:set_wait ()
       return
    end   

    self:play_queue ()   
    
end
----------------------------------------------------------------------------------------------------------------------
function Trader:process_idle ()

    --printf ("Process idle")
    
    if self.npc:action () then return end    
    
    if self.need_interrupt == true then
       reset_action (self.npc, self.script)  
       if self.current.use_start_end == true then
          action (self.npc, anim (self.current.end_anim), cond (cond.anim_end))
       end
       self.next_state = trader_wait
       return
    end       
    
    if self.current.end_current == true then
       self:set_idle ()
       return
    end   
    
    self:play_queue ()   
    
end
----------------------------------------------------------------------------------------------------------------------
function Trader:set_idle ()
    --printf ("Set idle")
    reset_action (self.npc, self.script)
    local variant = math.random (1, 3)
    if variant == 1 then 
       self.current.start_anim = "idle"
       self.current.process_anim = "idle"
       self.current.repeats = math.random (3, 5)
       self.current.end_anim = "idle"
    elseif variant == 2 then
       self.current.start_anim = "idle_spinka"
       self.current.process_anim = "spinka"
       self.current.repeats = math.random (3, 8)
       self.current.end_anim = "spinka_idle"
    elseif variant == 3 then
       self.current.start_anim = "idle_chitaet"
       self.current.process_anim = "chitaet"
       self.current.repeats = math.random (3, 8)
       self.current.end_anim = "chitaet_idle"
    end   
    self.current.use_start_end = true
    action (self.npc, anim (self.current.start_anim), cond (cond.anim_end))         
    self.current_state = trader_idle
    self.next_state = trader_idle
    self.current.end_current = false
end
----------------------------------------------------------------------------------------------------------------------
function Trader:set_wait ()

    reset_action (self.npc, self.script)
    local variant = math.random (1, 2)
    if variant == 1 then
       self.current.process_anim = "palci"
       self.current.repeats = math.random (1, 5)
    elseif variant == 2 then
       self.current.process_anim = "cheshit"
       self.current.repeats = 1
    end       
    self.current.use_start_end = false
    action (self.npc, anim (self.current.process_anim), cond (cond.anim_free))
    self.current_state = trader_wait
    self.current.end_current = false
end
----------------------------------------------------------------------------------------------------------------------
function Trader:set_trade_end ()
    reset_action (self.npc, self.script)
    local variant = math.random (1, 2)
    if variant == 1 then
       self.current.start_anim = "idle_spinka"
       self.current.process_anim = "spinka"
       self.current.repeats = math.random (1, 8)
       self.current.end_anim = "spinka_idle"
    elseif variant == 2 then
       self.current.start_anim = "idle"
       self.current.process_anim = "palci"
       self.current.repeats = math.random (1, 3)
       self.current.end_anim = "idle"
    end       
    self.current.end_current = false
    self.current.use_start_end = true
    action (self.npc, anim (self.current.process_anim), cond (cond.anim_free))
    self.current_state = trader_wait
end
----------------------------------------------------------------------------------------------------------------------
function Trader:on_start_trade ()
    self.process_trade = true
    self.waiter = nil
end
----------------------------------------------------------------------------------------------------------------------
function Trader:on_end_trade ()
    self.process_trade = false
    self.first = true
end
----------------------------------------------------------------------------------------------------------------------
function Trader:on_trade (obj, type)
    self.exchange = true
    self.next_state = trader_end
    self:set_trade_end ()
end
----------------------------------------------------------------------------------------------------------------------
function Trader:play_queue ()

    --printf ("Play queue called")
    reset_action (self.npc, self.script)
    
    if self.current.repeats == 0 then 
       if self.current.use_start_end == true then
          action (self.npc, anim (self.current.end_anim), cond (cond.anim_end))
       end
       self.current.end_current = true
    else
       self.current.repeats = self.current.repeats - 1
       action (self.npc, anim (self.current.process_anim), cond (cond.anim_end))
    end   
    
end