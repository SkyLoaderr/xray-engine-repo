-----------------------------------------------------------------------------------
-- Monster binding
-----------------------------------------------------------------------------------

function bind(obj)
	printf("_bp: monster.bind: name='%s', id='%d'", obj:name(), obj:id())

	local char_ini = obj:spawn_ini()
	if not char_ini then
		return
	end

	// Для спауна
	xr_spawner.spawn_client(obj)

	local new_binder = generic_object_binder(obj, char_ini)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj, char_ini) super(obj)
	self.ini = char_ini
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()
	object_binder.reinit(self)

	-- У торговца нет поддержки перемещения
	if self.object:clsid() ~= clsid.trader then
		self.object:set_patrol_extrapolate_callback(generic_object_binder.extrapolate_callback, self)
	end

	xr_motivator.storage[self.object:id()] = { }

	self.st = xr_motivator.storage[self.object:id()]

	self.object:set_callback(self, "waypoint_callback", game_object.movement)

	xr_logic.enable_scripts(self.object, self.ini, modules.stype_mobile)
end

function generic_object_binder:update(delta)
	object_binder.update(self, delta)

	if self.st.active_section ~= nil then
		xr_logic.non_goap_update_actions_event(self.object, self.st[self.st.active_scheme], delta)
	end
end

function generic_object_binder:extrapolate_callback()
	local cur_pt = self.object:get_current_point_index()
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: true", cur_pt)
		return true
	end
	printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: false", cur_pt)
	return false
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.non_goap_waypoint_callback_event(self.object, self.st[self.st.active_scheme], action_type, index)
	end
end

function generic_object_binder:net_destroy()
	self.object:clear_callback(game_object.movement)
	object_binder.net_destroy(self)
end 

