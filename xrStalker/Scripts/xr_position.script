----------------------------------------------------------------------------------------------------------------------
--	Схема стояния на точке
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Проверяет находимся ли мы на позиции торговли
class "evaluator_on_position" (property_evaluator)
function evaluator_on_position:__init(storage) super()
	self.a = storage
end
function evaluator_on_position:evaluate()
	local tt
	local dd = self.a.position:position():distance_to(self.object:position())
	tt = dd < self.a.dist
	return tt
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Если мы по какой либо причине не находимся на своем месте - возвращаемся на место
class "action_go_position" (action_base)
function action_go_position:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_go_position:initialize()
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()    
	
	self.object:set_sight(look.path_dir, nil, 0)
	self.object:set_movement_type(move.walk)
	self.object:set_path_type(game_object.level_path)

        self.object:set_dest_level_vertex_id(self.a.position)
	self.object:set_desired_direction()
end
function action_go_position:execute ()
	action_base.execute (self)
end
function action_go_position:finalize ()
	action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
-- Function
----------------------------------------------------------------------------------------------------------------------
function go_position(obj, position)
	xr_motivator.storage[obj:id()].state.position = position
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object)
	local operators		= {}
	local properties	= {}

	local manager = object:motivation_action_manager()

	properties["position"]	= xr_evaluators_id.position

	operators["go_position"] = xr_actions_id.stohe_position + 1

	-- Evaluators
	manager:add_evaluator (properties["position"], 	this.evaluator_on_position		(xr_motivator.storage[object:id()].state))

	-- Actions
	local action = this.action_trade_init (object:name(),"action_go_position", xr_motivator.storage[object:id()].state)
	action:add_precondition		(world_property(stalker_ids.property_alive, 	true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(properties["position"], 	false))
	action:add_effect 		(world_property(properties["position"], 	true))
	manager:add_action (operators["go_position"], action)
	
end