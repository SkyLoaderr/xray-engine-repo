module("game_types")
module("game_phases")
module("game_messages")

module("game_last_ui")
module("game_last_ps")
module("key_bindings")

class "game_cl_LastStanding" (game_cl_mp_script)

function game_cl_LastStanding:__init() super()
end


function game_cl_LastStanding:__finalize()
end

function game_cl_LastStanding:createPlayerState()

   return game_last_ps.game_last_playerState()

end

function game_cl_LastStanding:Init()

end

function game_cl_LastStanding:net_import_state	( P)
	game_cl_mp_script.net_import_state	(self, P)
end

function game_cl_LastStanding:CanBeReady	()
	return true
end

function game_cl_LastStanding:shedule_Update (dt)
	game_cl_mp_script.shedule_Update	(self, dt)

   if self.m_game_ui ~= nil then
      self.m_game_ui:ShowPlayersList(self:Phase()==game_phases.game_phases.GAME_PHASE_PENDING)
   end
end

function game_cl_LastStanding:createGameUI ()
   self.m_game_ui = game_last_ui.ui_game_LastStanding()
   self.m_game_ui:SetClGame(self)
   self.m_game_ui:Init()
   
   self.m_inventory_wnd = CUIInventoryWnd()
   return self.m_game_ui
end

function game_cl_LastStanding:GetMapEntities(ent_container)
   local D = SZoneMapEntityData()

   local players_count = self:GetPlayersCount()
   for it=0,players_count-1 do
       local ps_who = self:GetPlayerByOrderID(it)
        
      local game_object = self:GetObjectByGameID(ps_who.GameID)
      if game_object ~=nil then
         D.pos = game_object:position()
         ent_container:push_back(D)
      end
   end


end

function game_cl_LastStanding:TranslateGameMessage(msg, P)
   if msg == game_messages.game_messages.GAME_EVENT_ROUND_STARTED then
      self:CommonMessageOut("R O U N D  S T A R T E D")
   else
      game_cl_mp_script.TranslateGameMessage(self,msg, P)
   end

end


function game_cl_LastStanding:OnKeyboardPress(key)

	if key_bindings.keys.kWPN_FIRE == key  then
	
		local b_need_to_send_ready = false

		local ps_local	= self:GetLocalPlayer()

      local game_object = self:GetObjectByGameID(ps_local.GameID)
		if game_object == nil then return false end

		local is_actor = game_object:clsid() == clsid.actor
		local is_spectator = game_object:clsid() == clsid.spectator
		

		b_need_to_send_ready =	
		( is_actor and  (ps_local:testFlag(game_player_flags.flags.GAME_PLAYER_FLAG_VERY_VERY_DEAD)) )		or
		( self:Phase() == game_phases.game_phases.GAME_PHASE_PENDING		)								or
		( is_spectator and self:CanBeReady()	)
		
		if b_need_to_send_ready then
				local P = net_packet()
				self:GameEventGen	(P, ps_local.GameID	)
				P:w_u16(game_messages.game_messages.GAME_EVENT_PLAYER_READY);
				self:EventSend	(P)
            return true
		
         else
           return false
      end

	end

   if key_bindings.keys.kINVENTORY == key then
      self:StartStopMenu(self.m_inventory_wnd)
      return true
   end

   if key_bindings.keys.kSCORES == key then
      self.m_game_ui:ShowFragList(true)
      return true
   end

	if (self:Phase() ~= game_phases.game_phases.GAME_PHASE_INPROGRESS) and 
      (key_bindings.keys.kQUIT ~= key) and 
      (key_bindings.keys.kCONSOLE ~= key)  then	
         return  true
      end

	return game_cl_mp_script.OnKeyboardPress(self, key)

end

function game_cl_LastStanding:OnKeyboardRelease(key)
   if key_bindings.keys.kSCORES == key then
      self.m_game_ui:ShowFragList(false)
      return true
   end

	return game_cl_mp_script.OnKeyboardRelease(self, key)
end
