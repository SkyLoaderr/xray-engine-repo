module("game_types")
module("game_phases")
module("game_messages")

module("game_last_ui")
module("game_last_ps")

class "game_cl_LastStanding" (game_cl_mp_script)

function game_cl_LastStanding:__init() super()
end


function game_cl_LastStanding:__finalize()
end

function game_cl_LastStanding:createPlayerState()

   return game_last_ps.game_last_playerState()

end

function game_cl_LastStanding:Init()

end

function game_cl_LastStanding:net_import_state	( P)
	game_cl_mp_script.net_import_state	(self, P)
end

function game_cl_LastStanding:CanBeReady	()
	return true
end

function game_cl_LastStanding:shedule_Update (dt)
	game_cl_mp_script.shedule_Update	(self, dt)
end

function game_cl_LastStanding:createGameUI ()
   self.m_game_ui = game_last_ui.ui_game_LastStanding()
   self.m_game_ui:SetClGame(self)
   self.m_game_ui:Init()
   
   return self.m_game_ui
end

function game_cl_LastStanding:GetMapEntities(ent_container)
   local D = SZoneMapEntityData()

   local players_count = self:GetPlayersCount()
   for it=0,players_count-1 do
       local ps_who = self:GetPlayerByOrderID(it)
      printf("ps_who:GameID=%s",ps_who.GameID)
        
      local game_object = self:GetObjectByGameID(ps_who.GameID)
      if game_object ~=nil then
         D.pos = game_object:position()
         ent_container:push_back(D)
      end
   end


end

function game_cl_LastStanding:TranslateGameMessage(msg, P)
   if msg == game_messages.game_messages.GAME_EVENT_ROUND_STARTED then
      self:CommonMessageOut("R O U N D  S T A R T E D")
   else
      game_cl_mp_script.TranslateGameMessage(self,msg, P)
   end

end


