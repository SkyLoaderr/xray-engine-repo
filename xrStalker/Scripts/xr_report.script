

local timeout = 1000
local dist_for_report = 20
local min_dist_to_report = 1

local operators		= {}
local properties	= {}
	
properties["leader_report"]             = xr_evaluators_id.sidor_report_leader      + 0
properties["timeout_soldier"]           = xr_evaluators_id.sidor_report_soldier     + 0
operators["report_leader"]              = xr_actions_id.sidor_act_report_leader     + 0
operators["report_soldier"]             = xr_actions_id.sidor_act_report_soldier    + 0  


----------------------------------------------------------------------------------------------------------------------
class "evaluator_const" (property_evaluator)
----------------------
function evaluator_const:__init (name) super ()
    self.value = false
end
----------------------
function evaluator_const:evaluate ()
    return self.value
end
----------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
class "evaluator_timeout" (property_evaluator)
----------------------
function evaluator_timeout:__init (name, leader_name) super ()
    self.time = device ():time_global ()
    self.leader_name = leader_name
end
----------------------
function evaluator_timeout:evaluate ()
    local leader = level.object (self.leader_name)
    if (device ():time_global () - self.time) > timeout then
       if leader ~= nil and leader:alive () == true then
          if distance_between (leader, self.object) < dist_for_report then 
             leader:motivation_action_manager ():evaluator (properties["leader_report"]).npc = self.object
             return true
          else   
             leader:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil
             return false
          end   
       end    
    else if leader ~= nil and leader:alive () == true then   
            leader:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil
         end      
    end   
    return false
end
----------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
class "evaluator_report" (property_evaluator)
----------------------
function evaluator_report:__init (name) super ()
    self.npc = nil
end
----------------------
function evaluator_report:evaluate ()
    return self.npc ~= nil
end
----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
class "evaluator_leader" (property_evaluator)
----------------------
function evaluator_leader:__init (name, leader_name) super ()
    self.leader_name = leader_name
end
----------------------
function evaluator_leader:evaluate ()
    local leader = level.object (self.leader_name)
    if leader ~= nil and leader:alive () == true and distance_between (leader, self.object) < dist_for_report then return true end
    return false
end
----------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
class "action_report_soldier" (action_base) 
----------------------
function action_report_soldier:__init (name, leader_name, theme) super (nil, name)
    self.leader_name = leader_name
    self.leader = nil
    self.stage = 0
    self.sub_stage = 0
    self.phrases = {}
    self.current_phrase = 1
    self.time = 0
    self.theme = theme
end
----------------------
function action_report_soldier:initialize ()
    action_base.initialize (self)
    
    self.leader = level.object (self.leader_name)
    self.object:clear_animations () 
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.deactivate , self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.walk)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.leader:level_vertex_id ())
    self.object:set_mental_state          (anim.free)
    self.object:set_sight                 (look.path_dir, nil, 0)
    
    self.stage = 0
    
end
----------------------
function action_report_soldier:execute ()
    action_base.execute (self)

    if self.stage == 0 then 
       self:stage1 ()     
    elseif self.stage == 1 then
       self:stage2 ()    
    elseif self.stage == 2 then
       self:stage3 ()    
    end   
    
end
----------------------
function action_report_soldier:finalize ()
    action_base.finalize (self)
    self.object:clear_animations () 
    self.object:motivation_action_manager ():evaluator (properties["timeout_soldier"]).time = device ():time_global ()
    self.stage = 0
    self.sub_stage = 0
end
----------------------
function action_report_soldier:stage1 ()
    if distance_between (self.object, self.leader) > min_dist_to_report then
       self.object:set_item                     (object.deactivate, self.object:best_weapon ())
       self.object:set_path_type                (game_object.level_path)
       self.object:set_dest_level_vertex_id     (self.leader:level_vertex_id ())
       return
    end   
    local o_pos = self.object:position ()
    local l_pos = self.leader:position ()
    local dir = vector ():set (l_pos.x - o_pos.x, 0, l_pos.z - o_pos.z)
    self.object:set_sight (look.direction, dir, 0)
    self.stage = 1
    self.sub_stage = 0
    self.object:set_movement_type (move.stand)
    self.object:add_animation ("chest_0", false)
    self.object:add_animation ("chest_2", false)
    self.object:add_animation ("chest_1", false)
    self:create_report ()
end
----------------------
function action_report_soldier:stage2 ()
    local size = self.object:animation_count ()
    if self.sub_stage == 0 and size == 1 then
       self.sub_stage = 1
       if self.phrases[self.current_phrase].our == true then
--          self.object:play_sound (self.phrases[self.current_phrase].namespace, 1, 0, 1, 0, self.phrases[self.current_phrase].phrase)
          xr_sounds.play_sound (self.object, 0, self.theme, nil, self.current_phrase)
       else
--          self.leader:play_sound (self.phrases[self.current_phrase].namespace, 1, 0, 1, 0, self.phrases[self.current_phrase].phrase)
          xr_sounds.play_sound (self.leader, 0, self.theme, nil, self.current_phrase)
       end   
       return
    end
    
    if self.sub_stage == 1 then
       if size == 1 then
          self.object:add_animation ("chest_1", false)
       end
       
       if self.phrases[self.current_phrase].our == true then
          if self.object:active_sound_count () ~= 0 then return end
       else
          if self.leader:active_sound_count () ~= 0 then return end 
       end  
       
       self.current_phrase = self.current_phrase + 1
       if self.current_phrase > table.getn (self.phrases) then
          self.sub_stage = 2
          self.object:clear_animations ()
          self.object:add_animation ("chest_2", false)
          self.object:add_animation ("chest_3", false)
          return
       else
          if self.phrases[self.current_phrase].our == true then
             xr_sounds.play_sound (self.object, 0, self.theme, nil, self.current_phrase)
             --self.object:play_sound (self.phrases[self.current_phrase].namespace, 1, 0, 1, 0, self.phrases[self.current_phrase].phrase)
          else
             xr_sounds.play_sound (self.leader, 0, self.theme, nil, self.current_phrase)
--             self.leader:play_sound (self.phrases[self.current_phrase].namespace, 1, 0, 1, 0, self.phrases[self.current_phrase].phrase)
          end   
       end
       return
    end   
    
    if size == 0 then
       self.object:clear_animations () 
       --self.object:set_movement_type (move.walk)
       local dir = self.object:direction ()
       dir.x = -dir.x 
       dir.y = -dir.y
       dir.z = -dir.z
       self.object:set_sight (look.direction, dir, 0) 
       self.stage = 2
       self.time = device ():time_global ()
--       self.leader:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil 
    end    
                
end
function action_report_soldier:stage3 ()
    if device ():time_global () - self.time > 1500 then
       self.object:motivation_action_manager ():evaluator (properties["timeout_soldier"]).time = device ():time_global ()
--       self.leader:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil 
    end   
end
----------------------
function action_report_soldier:create_report ()
    while table.getn (self.phrases) ~= 0 do
          table.remove (self.phrases, 1)
    end
    table.insert (self.phrases, {namespace = report_soldier_start,   phrase = 0,   our = true})
    table.insert (self.phrases, {namespace = report_commander_start, phrase = 0,   our = false})
    table.insert (self.phrases, {namespace = report_soldier,         phrase = 0,   our = true})
    table.insert (self.phrases, {namespace = report_commander,       phrase = 0,   our = false})
    table.insert (self.phrases, {namespace = report_soldier_end,     phrase = 0,   our = true})

    self.object:set_sound_mask (2147483647)
    self.object:set_sound_mask (0)
    
    self.leader:set_sound_mask (2147483647)
    self.leader:set_sound_mask (0)
    
    self.current_phrase = 1
end


----------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
class "action_report_leader" (action_base)
----------------------
function action_report_leader:__init (name) super (nil, name)
    self.npc = nil
    self.stage = 0
end
----------------------
function action_report_leader:initialize ()
    action_base.initialize (self)
    self.object:clear_animations () 
    self.npc = self.object:motivation_action_manager ():evaluator (properties["leader_report"]).npc
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.deactivate, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.walk)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.npc:level_vertex_id ())
    self.object:set_mental_state          (anim.free)
    self.object:set_sight                 (look.path_dir, nil, 0)
    
    self.stage = 0
end
----------------------
function action_report_leader:execute ()
    action_base.execute (self)
    
    if self.stage == 0 then 
       if distance_between (self.object, self.npc) < min_dist_to_report then
          local o_pos = self.object:position ()
          local l_pos = self.npc:position ()
          local dir = vector ():set (l_pos.x - o_pos.x, 0, l_pos.z - o_pos.z)
          self.object:set_sight (look.direction, dir, 0)
       
          self.object:set_movement_type (move.stand)
          self.stage = 1
          self.object:add_animation ("chest_1", false)
          self.object:add_animation ("chest_2", false)
          self.object:add_animation ("chest_1", false)
       else
          self.object:set_item                     (object.deactivate, self.object:best_weapon ())
          self.object:set_path_type                (game_object.level_path)
          self.object:set_dest_level_vertex_id     (self.npc:level_vertex_id ())
       end   
       return 
    end    
    
    local act = self.npc:motivation_action_manager ():action (operators["report_soldier"])
    if act == nil then 
       self.object:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil
       return
    end
    
    if self.stage == 1 then
       if act.stage == 1 and act.sub_stage == 2 then
          self.object:clear_animations ()
          self.object:add_animation ("chest_1", false)
          self.object:add_animation ("chest_2", false)
          self.object:add_animation ("chest_3", false)
          self.stage = 2
       else
          if self.object:animation_count () == 1 then
             self.object:add_animation ("chest_1", false)
          end   
       end  
       return
    end
    
    if self.object:animation_count () == 0 then      
       self.object:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil
    end   
    
end
----------------------
function action_report_leader:finalize ()
    action_base.finalize (self)
    self.object:clear_animations ()
    self.object:motivation_action_manager ():evaluator (properties["leader_report"]).npc = nil
end
----------------------------------------------------------------------------------------------------------------------

function AddScheme (obj, property_id)

	local manager  = obj:motivation_action_manager ()

   	local ini = obj:spawn_ini ()
   	if ini == nil or ini:section_exist ("report") == false then return end
   	
   	if ini:line_exist ("report", "leader_name") == true then
   	   local leader_name = ini:r_string ("report", "leader_name")
       if ini:line_exist ("report", "theme") == false then return end
       local theme = ini:r_string ("report", "theme")
       manager:add_evaluator (properties["timeout_soldier"], this.evaluator_timeout ("evaluator_timeout_soldier", leader_name))
   	   local action = this.action_report_soldier ("action_report_soldier", leader_name, theme)
       action:add_precondition     	(world_property (stalker_ids.property_alive,    true))
   	   action:add_precondition     	(world_property (stalker_ids.property_enemy,    false))
   	   action:add_precondition      (world_property (properties["timeout_soldier"], true))
   	   action:add_effect            (world_property (properties["timeout_soldier"], false))
--   	   action:set_weight            (2)
   	   manager:add_action           (operators["report_soldier"], action)
   	   
   	   action = manager:action (property_id)
   	   action:add_precondition (world_property (properties["timeout_soldier"],  false)) 	   
    else
       if ini:line_exist ("report", "is_leader") == false or ini:r_bool ("report", "is_leader") == false then
          return
       end     
       manager:add_evaluator (properties["leader_report"], this.evaluator_report ("evaluator_leader_report"))
       local action = this.action_report_leader ("action_report_leader")
       action:add_precondition     	(world_property (stalker_ids.property_alive,    true))
   	   action:add_precondition     	(world_property (stalker_ids.property_enemy,    false))
   	   action:add_precondition      (world_property (properties["leader_report"],   true))
   	   action:add_effect            (world_property (properties["leader_report"],   false))
--   	   action:set_weight            (2)
   	   manager:add_action           (operators["report_leader"], action)
   	   
       action = manager:action (property_id)
   	   action:add_precondition (world_property (properties["leader_report"],  false))
   	   
    end       
    
end


