local time_walk 	= 100000
local time_rest 	= 15000         --Сколько анимаций сидения сидим
local novice_speak  = 10000     --Через какое время примерно новичок произносит фразы

local time_to_speak = 15000     --Через какое время примерно зомби произносит фразы

local time_walk2    = 20000     --Время ходьбы для навичка номер2

local walk_speak	= xr_sounds_id.zombe_walk_speak
local stand_speak   = xr_sounds_id.zombe_stand_speak
---------------------------------------------------------------------------------------------------------------------
-- Evaluator
---------------------------------------------------------------------------------------------------------------------
class "enabled_evaluator" (property_evaluator)

function enabled_evaluator:__init (storage) super ()
    self.a = storage
end

function enabled_evaluator:evaluate()
    return  self.a.enabled
end

---------------------------------------------------------------------------------------------------------------------
-- Actions
---------------------------------------------------------------------------------------------------------------------
class "stalker_zombe_action" (action_base)
function stalker_zombe_action:__init (name, storage) super (nil, name)
    self.a = storage
end
---------------------------------------------------------------------------------------------------------------------
function stalker_zombe_action:initialize ()
    action_base.initialize 			(self)
    self.a.time      = device():time_global() + time_to_speak
    self.a.stand     = false                     --Стоим или идем, служит для того, чтоб запомнить, что стоим и говорим.

	self.object:clear_animations	()
	self.object:set_detail_path_type( move.line )
    self.object:set_movement_type   ( move.walk )
    self.object:set_body_state      ( move.standing )
    self.object:set_mental_state	( anim.free )
    self.object:set_patrol_path		( self.a.path, patrol.nearest, patrol.continue, true )
    self.object:set_path_type		( game_object.patrol_path )
    self.object:set_sight			( look.path_dir, nil, 0 )
    self.object:set_item            ( object.idle, self.object:best_weapon() )
end
---------------------------------------------------------------------------------------------------------------------
function stalker_zombe_action:execute ()
    --Ходим, изредка произносим фразы
    action_base.execute 			(self)

    self.object:set_mental_state    ( anim.free )
	self.object:set_item            ( object.idle, self.object:best_weapon() )

    if( device():time_global() > self.a.time ) then
		--Давно уже ничего не говорили
		self:speak()
    end


    if( self.a.stand and self.object:active_sound_count() == 0 ) then
        --Если остановились и проиграли до конца звук, то снова идем
        printf( "eeeennnnnnddddd" )
        self.a.stand = false
        self.object:set_movement_type( move.walk )
    end
end
---------------------------------------------------------------------------------------------------------------------
function stalker_zombe_action:speak()
    if( math.random() > 1.5 ) then
    	self.object:play_sound( stand_speak, 1, 0, 1, 0, math.random( 0, 6 ) )
    else
        self.object:set_movement_type ( move.stand )
        self.object:add_animation( "prisluh_9_2", true )
		self.object:play_sound( stand_speak, 3000, 1000, 1, 0, math.random( 0, 6 ) )
        self.a.stand = true
    end

    self.a.time = device():time_global() + ( 0.8 + math.random() ) * time_to_speak          --Запоминаем время, когда надо сказать следующую фразу( время всегда разное )
end
---------------------------------------------------------------------------------------------------------------------
function stalker_zombe_action:finalize ()
    action_base.finalize (self)
end


----------------------------------------------------------------------------------------------------------------------
--zombi binder
----------------------------------------------------------------------------------------------------------------------
function add_zombe(obj)
    local operators     = {}
    local properties    = {}
    local st            = {
                            path     = nil,         --Путь, по которому ходить
                            curState = 1,
                            time     = 0,
                            stand    = false,
                            enabled  = true
                          }
    --Чтение данных из кастом даты
    local char_ini = obj:spawn_ini()
    if( char_ini:section_exist ("zombe") == true ) then
        if( char_ini:line_exist("zombe", "path") == true ) then
            st.path = char_ini:r_string("zombe", "path")
        else
        	printf( "________Error.    Section zombe/path not found" )
        end
    else
        printf( "________Error.    Section zombe not found" )
    end

    xr_motivator.storage[obj:id()] 		 = { zombe = {} }
    xr_motivator.storage[obj:id()].zombe = st

    printf( "binding stalker zombe" )

    obj:add_sound ( "\script_replics\\zombie\\stalker_zombie\\zombie_phrase_", 20, snd_type.talk, 2, 1, stand_speak )


    properties[ "zombee_alife" ]      = xr_evaluators_id.jon_stalker_zombe
    operators [ "stalker_zombe" ]     = xr_actions_id.jon_stalker_zombe


    local manager  = obj:motivation_action_manager ()
    manager:add_evaluator ( properties[ "zombee_alife" ], const_evaluator( true )  )

    local action = this.stalker_zombe_action ( "stalker_zombe_action", xr_motivator.storage[obj:id()].zombe )

    action:add_precondition         ( world_property ( stalker_ids.property_alive,   true ) )
    action:add_precondition         ( world_property ( stalker_ids.property_enemy,   false ) )
    action:add_precondition         ( world_property ( properties[ "zombee_alife" ], true ) )
    action:add_effect               ( world_property ( properties[ "zombee_alife" ], false ) )
    manager:add_action              ( operators[ "stalker_zombe" ], action)

    action = manager:action (stalker_ids.action_free_no_alife)
    action:add_precondition         ( world_property (properties["zombee_alife"],     false ) )
end

-----------------------===========================------------------------------
--============================================================================--
--------------------------=====================---------------------------------

local walk  	= 1
local sit_down  = 3

---------------------------------------------------------------------------------------------------------------------
-- Actions
---------------------------------------------------------------------------------------------------------------------
--Либо сталкер ходит и ищет что-нибудь, либо сидит и отдыхает
class "stalker_novice_action" (action_base)
function stalker_novice_action:__init (name, storage) super (nil, name)
    self.a 		  	= storage
    self.a.curState = walk
    self.a.time     = device():time_global()
    self.speak_time = self.a.time
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice_action:initialize ()
    action_base.initialize          ( self )
	if( self.a.curState == walk ) then
		self:state_walk( "init" )
    else
		self:state_sit_down( "init" )
		printf( "2" )
    end
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice_action:execute ()
    action_base.execute             ( self )

    if( self.a.curState == walk ) then
		self:state_walk()
        if( device():time_global() > self.a.time + time_walk ) then
			self:state_sit_down( "init" )            	--Init state sit down
			printf( "1" )
        end
    else
        self:state_sit_down()
        if( xr_motivator.storage[self.object:id()].state.body_state == 1 and
		   device():time_global() > self.a.time + time_rest ) then
        	self.a.index = math.random( 1, self.a.rest_w:count() - 1 )              --Выбераем точку, в которой потом будем сидеть.
            self:state_walk( "init" )                   --Init state sit down
        end
    end
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice_action:state_walk( param )
	if( param ) then                        --Init state walk
        printf( "init state walk" )
        self.a.curState = walk
		self.a.time = device():time_global()
    	self.speak_time = self.a.time + (math.random()+0.5) * novice_speak		--Когда произнесу некоторую фразу

        if( xr_motivator.storage[self.object:id()].state.body_state ~= 0 ) then
            xr_state.change_state( self.object, 0 )
            return
        end
        printf( "Walk" )
        self.object:clear_animations()
		self.object:set_desired_direction()
        self.object:set_detail_path_type ( move.line )
	    self.object:set_movement_type    ( move.walk )
	    self.object:set_body_state       ( move.standing )
	    self.object:set_mental_state     ( anim.free )
	    self.object:set_patrol_path      ( self.a.path, patrol.nearest, patrol.continue, true )
	    self.object:set_path_type        ( game_object.patrol_path )
	    self.object:set_sight            ( look.path_dir, nil, 0 )
	    self.object:set_item             ( object.idle, self.object:best_weapon() )

        return
    end

    self.object:set_mental_state    ( anim.free )
    self.object:set_item            ( object.idle, self.object:best_weapon() )

    if( device():time_global() > self.a.time + 3000 ) then
        --Первые 3 секунды идем просто, потом начинаем что-то искать
        self.object:set_sight       ( look.search, nil, 0 )
    end

	if( device():time_global() > self.speak_time ) then
    --Произносим фразу
        self.object:play_sound( walk_speak, 1, 0, 1, 0, math.random( 0, 0 ) )
        self.speak_time = device():time_global() + (math.random()+0.5) * novice_speak      --Когда произнесу следующую фразу
	end
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice_action:state_sit_down( param )
	if( param )	then                        --Init state sit
    	printf( "Init state sit_down === %s", param )
        self.a.curState  = sit_down
        self.object:set_dest_level_vertex_id( self.a.rest_w:level_vertex_id( self.a.index ) )
        self.object:set_path_type 			( game_object.level_path )
		self.object:set_desired_direction	( self.a.rest_w:point( 0 ):sub( self.a.rest_w:point( self.a.index ) ) )   --Отдыхаем в направлении нулевой точкки
        self.object:set_sight				( look.danger, nil, 0 )
    end

    if( xr_motivator.storage[self.object:id()].state.body_state == 1 ) then           --Уже сидим
        if( self.object:animation_count() <= 1 ) then
            self.object:add_animation( "stalker_1_2",   true )
			self.a.time = device():time_global()
        end
    else
    	if( self.object:level_vertex_id() == self.a.rest_w:level_vertex_id( self.a.index ) ) then -- Находимся на той ноде, на которой собрались посидеть
        	self.object:set_movement_type    ( move.stand )
            self.object:set_item             ( object.deactivate, self.object:best_weapon() )
        	xr_state.change_state( self.object, 1 )
            printf( "excanhe state" )
        else
        	--Идем в точку сидения
	        self.object:set_mental_state        ( anim.free )
	        self.object:set_path_type           ( game_object.level_path )
	        self.object:set_movement_type       ( move.walk )
		end
    end

end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice_action:finalize ()
    action_base.finalize (self)
end


----------------------------------------------------------------------------------------------------------------------
--novice binder
----------------------------------------------------------------------------------------------------------------------
function add_novice(obj)

    local operators     = {}
    local properties    = {}
--    local st            = {
--    					    path 	 = nil,			--Путь, по которому ходить
--                            rest	 = nil,         --Места для сидения
--                            curState = 1,
--                            time     = nil,
--                            index    = 0,			--Index точки, к которой идем, чтоб посидеть
--                            enabled  = true
--                          }
--    --Чтение данных из кастом даты
--    local char_ini = obj:spawn_ini()
--    if( char_ini:section_exist ("novice") == true ) then
--        if( char_ini:line_exist("novice", "path") == true ) then
--			st.path = char_ini:r_string("novice", "path")
--        end
--        if( char_ini:line_exist("novice", "rest") == true ) then
--            st.rest_w = patrol( char_ini:r_string("novice", "rest") )
--        end
--    end
--
--    xr_motivator.storage[obj:id()] = { novice = {} }
--    xr_motivator.storage[obj:id()].novice = st

    obj:add_sound ( "script_replics\\stalker_1\\newbie\\newbie_where_artifacts_1", 20, snd_type.talk, 2, 1, walk_speak )
--    obj:add_sound ( "script_replics\\stalker_1\\newbie\\newbie_no_luck_2", 20, snd_type.talk, 2, 1, stand_speak )

    properties["state_end"]     = xr_evaluators_id.state_change
    properties[ "work" ]              = xr_evaluators_id.jon_stalker_novice
    operators [ "stalker_novice" ]    = xr_actions_id.jon_stalker_novice

    local manager  = obj:motivation_action_manager ()
    manager:add_evaluator ( properties[ "work" ], this.enabled_evaluator( xr_motivator.storage[obj:id()].novice ) )

    local action = this.stalker_novice_action ( "stalker_novice_action", xr_motivator.storage[obj:id()].novice )
    action:add_precondition         ( world_property ( stalker_ids.property_alive,   true ) )
    action:add_precondition         ( world_property ( stalker_ids.property_enemy,   false ) )
    action:add_precondition         ( world_property ( properties["state_end"],   	 true ) )
    action:add_precondition         ( world_property ( properties[ "work" ],         true ) )
    action:add_effect               ( world_property ( properties[ "work" ],         false ) )
    manager:add_action              ( operators[ "stalker_novice" ], action)

    action = manager:action (stalker_ids.action_free_no_alife)
    action:add_precondition         ( world_property (properties["work"],  false ) )
end

-----------------------===========================------------------------------
--============================================================================--
--------------------------=====================---------------------------------
--1 - ходим вокруг аномалии
--2 - смотрим на артефакт и говорм фразу
class "stalker_novice2_action" (action_base)
function stalker_novice2_action:__init (name, storage) super (nil, name)
    self.a 	  = storage
    self.time = device():time_global()
    self.look = 1
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:initialize ()
    action_base.initialize          (self)

    self:walk( "init" )
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:execute ()
    --Ходим, изредка произносим фразы и смотрим на артефакт
    action_base.execute             (self)

	if( self.a.curState == 1 ) then          --Walk
    	if( device():time_global() > self.a.time ) then
            if( patrol(self.a.path):point(0):distance_to( self.object:position() ) < 20 ) then
            --Проверям, не далеко ли мы от патрульного пути( от 0 точки )
            	self:action( "init" )
            else
            	self.a.time = device():time_global() + 10000
                printf( "Daleko" )
            end
        else
        	self:walk()
        end    -- device():time_global() > self.a.time
    else       --Look to artefact
        if( device():time_global() > self.a.time ) then
           	self:walk( "init" )
        else
        	self:action()
        end
    end        --self.a.curState == 1

end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:walk( param )

    if( param ) then
        printf( "init walk" )
        self.a.curState 				= 1
        self:new_time					()
        self.look						= 2
        self.time  						= device():time_global()

	    self.object:clear_animations    ()
	    self.object:set_detail_path_type( move.line )
	    self.object:set_movement_type   ( move.walk )
	    self.object:set_body_state      ( move.standing )
	    self.object:set_patrol_path     ( self.a.path, patrol.nearest, patrol.continue, true )
	    self.object:set_path_type       ( game_object.patrol_path )
	    self.object:set_item            ( object.activate, self.object:best_weapon() )
	    self.object:set_sight           ( look.path_dir, nil, 0 )
        self.object:set_sight           ( look.point, patrol( self.a.path ):point( 0 ), 0 )
    end

    self.object:set_item            	( object.activate, self.object:best_weapon() )
    self.object:set_mental_state    	( anim.free )

    --То смотрит вдоль патрульного пути,  то на артефакт
    if( device():time_global() > self.time ) then
    	if( self.look == 1 ) then
            printf( "look to point" )
            self.object:set_sight       ( look.point, patrol( self.a.path ):point(0), 0 )
            self.look = 2
            self.time = device():time_global() + math.random( 1500, 3000 )
        elseif( self.object:position():distance_to( patrol( self.a.path ):point(0) ) < 30 ) then
            printf( "lool to path" )
            self.object:set_sight       ( look.path_dir, nil, 0 )
            self.look = 1
        	self.time = device():time_global() + math.random( 2000, 6000 )
        end
    end
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:action( param )
	if( param ) then
		printf( "init lookkk" )
    	self.a.curState		= 2
		self.a.time 		= device():time_global() + 10000
        self.object:set_sight           ( look.point, patrol( self.a.path ):point( 0 ), 0 )
        self.object:set_movement_type   ( move.stand )
    end

	printf( "yaw == %f", yaw( self.object:direction(), patrol( self.a.path ):point( 0 ) : sub( self.object:position() ) ) )
	if( yaw( self.object:direction(), patrol( self.a.path ):point( 0 ) : sub( self.object:position() ) ) < 0.3 ) then
    	printf( "yaw oK" )
    end

    if( self.a.curState == 2 and                                     --Угол до точки, куда надо повернуть меньше 0.1
       yaw( self.object:direction(), patrol( self.a.path ):point( 0 ) : sub( self.object:position() ) ) < 0.3 ) then
		printf( "Ok" )
    end

  	if( self.a.curState == 2 and                                     --Угол до точки, куда надо повернуть меньше 0.1
       yaw( self.object:direction(), patrol( self.a.path ):point( 0 ) : sub( self.object:position() ) ) < 0.3 ) then
    	printf( "Play sound" )
        self.object:play_sound		( walk_speak, 5000, 2000, 1, 0, math.random( 0, 5 ) )
        if( math.random() > 0.5 ) then
	        self.object:add_animation   ( "prisluh_8_0", true )
	        self.object:add_animation   ( "prisluh_8_2", true )
            self.object:add_animation   ( "prisluh_8_3", true )
        else
            self.object:add_animation   ( "prisluh_9_0", true )
	        self.object:add_animation   ( "prisluh_9_2", true )
            self.object:add_animation   ( "prisluh_9_3", true )
        end

        self.a.curState = 3
        self.a.time = self.a.time + 20000
    end

    if( self.a.curState == 3 ) then
    	if(  self.object:animation_count() == 0 ) then
        	self.object:set_sight       ( look.path_dir, nil, 0 )
            self.a.time = device():time_global() + 600
            self.a.curState = 4
        end
	end
    self.object:set_mental_state        ( anim.free )
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:new_time()
	self.a.time = device():time_global() + time_walk2 * ( 0.5 + math.random() )
end
---------------------------------------------------------------------------------------------------------------------
function stalker_novice2_action:finalize ()
    action_base.finalize (self)
end

----------------------------------------------------------------------------------------------------------------------
--novice binder
----------------------------------------------------------------------------------------------------------------------
function add_novice2(obj)
    local operators     = {}
    local properties    = {}
    local st            = {
                            path     = nil,         --Путь, по которому ходить
                            curState = 1,
                            time     = 0,
                            stand    = false,
                            enabled  = true
                          }
    --Чтение данных из кастом даты
    local char_ini = obj:spawn_ini()
    if( char_ini:section_exist ("novice2") == true ) then
        if( char_ini:line_exist("novice2", "path") == true ) then
            st.path = char_ini:r_string("novice2", "path")
        else
            printf( "________Error.    Section novice2/path not found" )
        end
    else
        printf( "________Error.    Section novice2 not found" )
    end

    xr_motivator.storage[obj:id()]         = { novice2 = {} }
    xr_motivator.storage[obj:id()].novice2 = st

    printf( "binding stalker novice2" )

--    obj:add_sound ( "Scripts\\Patrol\\Commander1_", 20, snd_type.talk, 2, 1, stand_speak )
    obj:add_sound ( "script_replics\\stalker_1\\newbie\\newbie_phrase_artifact_", 20, snd_type.talk, 2, 1, walk_speak )

    properties[ "novice2_alife" ]      = xr_evaluators_id.jon_stalker_novice2
    operators [ "stalker_novice2" ]    = xr_actions_id.jon_stalker_novice2


    local manager  = obj:motivation_action_manager ()
    manager:add_evaluator ( properties[ "novice2_alife" ], this.enabled_evaluator( xr_motivator.storage[obj:id()].novice2 )  )

    local action = this.stalker_novice2_action ( "stalker_novice2_action", xr_motivator.storage[obj:id()].novice2 )

    action:add_precondition         ( world_property ( stalker_ids.property_alive,    true ) )
    action:add_precondition         ( world_property ( stalker_ids.property_enemy,    false ) )
    action:add_precondition         ( world_property ( properties[ "novice2_alife" ], true ) )
    action:add_effect               ( world_property ( properties[ "novice2_alife" ], false ) )
    manager:add_action              ( operators[ "stalker_novice2" ], action)

    action = manager:action (stalker_ids.action_free_no_alife)
    action:add_precondition         ( world_property (properties["novice2_alife"],   false ) )
end

-----------------------===========================------------------------------
--============================================================================--
--------------------------=====================---------------------------------


function bind_object( obj, name )
	printf( "Name == %s", name )
    if( name == "zombe" ) then
    	this.add_zombe ( obj )
    elseif( name == "novice" ) then
    	this.add_novice( obj )
    elseif( name == "novice2" ) then
        this.add_novice2( obj )
    end
end

