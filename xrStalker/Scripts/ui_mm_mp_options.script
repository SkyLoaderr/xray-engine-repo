-- file:		UI_MM_MP_CREATE.SCRIPT
--


class "mp_options" (CUIWindow)

function mp_options:__init() super()
end

function mp_options:__finalize()

end

function mp_options:InitControls(x, y, xml, handler)

	self:Init(x,y, 738, 416)
	self:SetAutoDelete(true)
	
	self.bk = xml:InitFrame("frame", self)
	
	xml:InitFrameLine("tab_options:vert_separator",		self)
	xml:InitFrameLine("tab_options:vert_separator_2",	self)
	xml:InitLabel("tab_options:cap_network_connection",	self)
	xml:InitLabel("tab_options:cap_respawn_options",	self)
	xml:InitLabel("tab_options:cap_server_list",		self)
	xml:InitLabel("tab_options:cap_weather_options",	self)
	xml:InitLabel("tab_options:cap_spectator_options",	self)
	xml:InitStatic("tab_options:cap_damage_block",		self)
	xml:InitStatic("tab_options:cap_friendly_fire",		self)
	xml:InitStatic("tab_options:cap_frag_limit",		self)
	xml:InitStatic("tab_options:cap_time_limit",		self)
	xml:InitStatic("tab_options:cap_artefact_stay",		self)
	xml:InitStatic("tab_options:cap_artefact_num",		self)
	xml:InitStatic("tab_options:cap_anomaly_time",		self)
	xml:InitStatic("tab_options:cap_warm_up_time",		self)
	xml:InitStatic("tab_options:cap_artefact_delay",	self)
	xml:InitStatic("tab_options:cap_starting_weather",	self)
	xml:InitStatic("tab_options:cap_rate_of_change",	self)
	
	handler.check_public_server			= xml:InitCheck("tab_options:check_public_server", 			self)
	handler.check_verify_cdkey			= xml:InitCheck("tab_options:check_verify_cdkey", 			self)
	
--	handler.check_map_rotation			= xml:InitCheck("tab_options:check_map_rotation", 			self)
	handler.check_spectator				= xml:InitCheck("tab_options:check_spectator",				self)
	handler.check_allow_voting			= xml:InitCheck("tab_options:check_allow_voting",			self)
	handler.check_damage_block			= xml:InitCheck("tab_options:check_damage_block",			self)
	handler.check_auto_team_balance		= xml:InitCheck("tab_options:check_auto_team_balance",		self)
	handler.check_auto_team_swap		= xml:InitCheck("tab_options:check_auto_team_swap",			self)
	handler.check_friendly_indicators	= xml:InitCheck("tab_options:check_friendly_indicators",	self)
	handler.check_friendly_names		= xml:InitCheck("tab_options:check_friendly_names",			self)
	handler.check_no_anmalies			= xml:InitCheck("tab_options:check_no_anmalies",			self)
	
	handler.check_spec_teamonly			= xml:InitCheck("tab_options:check_spec_teamonly",			self)
	handler.check_spec_freefly			= xml:InitCheck("tab_options:check_spec_freefly",			self)
	handler.check_spec_firsteye			= xml:InitCheck("tab_options:check_spec_firsteye",			self)
	handler.check_spec_lookat			= xml:InitCheck("tab_options:check_spec_lookat",			self)
	handler.check_spec_freelook			= xml:InitCheck("tab_options:check_spec_freelook",			self)	
	
	handler.tab_respawn					= xml:InitTab("tab_options:radio_tab_respawn_options",		self)
	-- spin boxes
	handler.spin_friendly_fire			= xml:InitSpinFlt("tab_options:spin_friendly_fire",			self)
	handler.spin_artefacts_num			= xml:InitSpinNum("tab_options:spin_artefacts_num",			self)
--	handler.edit_maprotlist				= xml:InitEditBox("tab_options:edit_maprotlist",			self)
	handler.edit_spectator				= xml:InitEditBox("tab_options:edit_spectator",				self)
	handler.edit_force_respawn			= xml:InitEditBox("tab_options:edit_force_respawn", 		self)
	handler.edit_reinforcement 			= xml:InitEditBox("tab_options:edit_reinforcement", 		self)

	handler.edit_damage_block			= xml:InitSpinNum("tab_options:edit_damage_block",			self)
	handler.edit_frag_limit				= xml:InitSpinNum("tab_options:edit_frag_limit",			self)
	handler.edit_time_limit				= xml:InitSpinNum("tab_options:edit_time_limit",			self)
	handler.edit_artefact_stay			= xml:InitSpinNum("tab_options:edit_artefact_stay",			self)
	handler.edit_artefact_delay			= xml:InitSpinNum("tab_options:edit_artefact_delay",		self)
	handler.edit_anomaly_time			= xml:InitSpinNum("tab_options:edit_anomaly_time",			self)
	handler.edit_warm_up_time			= xml:InitEditBox("tab_options:edit_warm_up_time",			self)

	handler.check_pda_hunt				= xml:InitCheck("tab_options:check_pda_hunt",				self)	
	
	handler.edit_rate_of_change			= xml:InitEditBox("tab_options:edit_rate_of_change",		self)
	handler.edit_rate_of_change:SetText("0.0")
	
	handler.spin_weather				= xml:InitComboBox("tab_options:spin_weather",				self)
	
--	handler.check_map_rotation:SetDependControl(handler.edit_maprotlist)
	handler.check_spectator:SetDependControl(handler.edit_spectator)
	
	handler.check_public_server:SetDependControl(handler.check_verify_cdkey)	
	
end

function mp_options:SetGameMode(mode, handler)
	handler.spin_friendly_fire:Enable(true)
	handler.check_auto_team_balance:Enable(true)
	handler.check_auto_team_swap:Enable(true)
	handler.spin_artefacts_num:Enable(true)
	handler.edit_artefact_delay:Enable(true)
	handler.edit_artefact_stay:Enable(true)
	handler.check_friendly_indicators:Enable(true)
	handler.check_friendly_names:Enable(true)
	handler.edit_reinforcement:Enable(true)
	handler.edit_frag_limit:Enable(true)
	handler.check_spec_teamonly:Enable(true)
	
	
	local btn_reinforcement = handler.tab_respawn:GetButtonByIndex(1)
	local btn_artefactcapture = handler.tab_respawn:GetButtonByIndex(2)
	btn_reinforcement:Enable(true)
	btn_artefactcapture:Enable(true)
		

	if GAME_TYPE.GAME_DEATHMATCH == mode then
		handler.spin_friendly_fire:Enable(false)
		handler.check_auto_team_balance:Enable(false)
		handler.check_auto_team_swap:Enable(false)
		handler.spin_artefacts_num:Enable(false)
		handler.edit_artefact_delay:Enable(false)
		handler.edit_artefact_stay:Enable(false)
		handler.check_friendly_indicators:Enable(false)
		handler.check_friendly_names:Enable(false)
		handler.check_spec_teamonly:Enable(false)
		handler.edit_reinforcement:Enable(false)		
		-- tab
		handler.tab_respawn:SetNewActiveTab(0)
		btn_reinforcement:Enable(false)
		btn_artefactcapture:Enable(false)
	elseif GAME_TYPE.GAME_TEAMDEATHMATCH == mode then
		handler.spin_artefacts_num:Enable(false)
		handler.edit_artefact_delay:Enable(false)
		handler.edit_artefact_stay:Enable(false)
		-- tab
		handler.tab_respawn:SetNewActiveTab(0)
		btn_reinforcement:Enable(false)
		btn_artefactcapture:Enable(false)
	elseif GAME_TYPE.GAME_ARTEFACTHUNT == mode then
		handler.edit_frag_limit:Enable(false)
	end

end


