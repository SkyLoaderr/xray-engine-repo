-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.8

function main()
	local dlg = ui_save_dialog.save_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
	
end

class "save_dialog" (ui_base_dialog.base_dialog)

function save_dialog:__init() super()		
	self:SetFont(GetFontMedium()) 
	
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function save_dialog:__finalize()

end

function save_dialog:FillList()
	local flist = getFS():file_list_open_ex("$game_saves$",FS.FS_ListFiles,"*.sav")
	local f_cnt = flist:Size()
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)			
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - 4))
		local date_time = "[" .. file:Modif() .. "]"
		--menu_item =  .. 
		self:AddItemToList(file_name, date_time)
	end
end


function save_dialog:SetClGame  (game_cl)
   self.m_game_cl = game_cl
end
function save_dialog:InitControls()
	ui_base_dialog.base_dialog.InitControls(self, "Save Game")
	
	----- DATA ----	
	local edit_rect       = {x = self.left_align_x,
						     y = self.top_align_y,
						     width =  257,
						     height = 23}
		
	local list_rect_f     = {x = self.left_align_x,
						     y = edit_rect.y + edit_rect.height + self.indent,
						     width = 0,
						     height = 0}
	list_rect_f.width  = self.main_rect.width  - self.indent*2*2
	list_rect_f.height = self.main_rect.height - self.indent*2 - list_rect_f.y - self.indent
	
	local list_ind = 10
	local list_rect       = {x = list_rect_f.x + list_ind,
							 y = list_rect_f.y + list_ind,
							 width = list_rect_f.width - list_ind*2,
							 height = list_rect_f.height - list_ind*2}
			
	----- CODE -------
	
	-- EDIT box --
	local frame_edit = CUIFrameLineWnd()  
	frame_edit:SetAutoDelete(true)
	frame_edit:Init("ui_string_06", edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height, true)
	self.main_frame:AttachChild(frame_edit)
	
	
	local edit_filename = CUIEditBox()
	edit_filename:SetAutoDelete(true)
	edit_filename:SetFont(self.edit_font)
	edit_filename:SetWindowName("edit_filename")	
	edit_filename:Init(edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height)
	self.main_frame:AttachChild(edit_filename)


	------------LIST-----------------
    local txt_list   = CUIFrameWindow()  --background for ListView
    txt_list:SetAutoDelete(true)
    txt_list:Init(self.texture_list_frame, list_rect_f.x, list_rect_f.y, list_rect_f.width, list_rect_f.height)    
    self.main_frame:AttachChild(txt_list) 



    local list_wnd = CUIListWnd()
    list_wnd:SetAutoDelete(true)
    list_wnd:SetWindowName("list_window")
	list_wnd:ShowSelectedItem(true)
	list_wnd:SetItemHeight(20)
    list_wnd:Init(list_rect.x, list_rect.y, list_rect.width, list_rect.height)    
    list_wnd:EnableScrollBar(true)	
	self:Register(list_wnd)
    self.main_frame:AttachChild(list_wnd)
	
	
	-- SAVE button
    local btn   = CUI3tButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_ok")	
	btn:Init(self.btn_left.texture, self.btn_left.x, self.btn_left.y, self.btn_left.width, self.btn_left.height)
    btn:SetText("Save")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)

	-- 
	btn = CUI3tButton()
    btn:SetAutoDelete(true)
    btn:SetWindowName("button_cancel")	
	btn:Init(self.btn_right.texture, self.btn_right.x, self.btn_right.y, self.btn_right.width, self.btn_right.height) 	
	btn:SetText("Back")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)
end

function save_dialog:InitCallBacks()
    // main frame buttons
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED, 			self.OnButton_ok_clicked,		self)
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED, 			self.OnButton_cancel_clicked,	self)
	// message box buttons
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,					self)
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,				self)
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,					self)
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,					self)
	// list box click
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			self.OnListItemClicked,			self)
end

function save_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	local edit_box = self:GetEditBox("edit_filename")
	local item_id = list_box:GetFocusedItem()
	local item = list_box:GetItem(item_id)
	
	local item_text = item:GetText()
	edit_box:SetText(item_text)
end

function save_dialog:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
	self:SaveFile(self.new_save)
end

function save_dialog:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnButton_ok_clicked()
	-- prepare message box
	local message_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")	
	
	-- Get file name
	local edit_box = self:GetEditBox("edit_filename")
	self.new_save = edit_box:GetText()
	
	// check for empty name
	if string.len(self.new_save) == 0 then
--		message_box:SetStyle(CUIMessageBox.STYLE_OK)		
--		message_box:SetText("The file name is empty. Please enter valid name!")
--		main_frame:Enable(false)
--		message_box:Show()
		return
	end
	
	// check for match name
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local file_struct = f:exist("$game_saves$", self.new_save .. ".sav" )

	if file_struct ~= nil then
--		message_box:SetStyle(CUIMessageBox.STYLE_YES_NO)
--		message_box:SetText("The file with this name already exist. Do you want to overwrite it?")
--		message_box:Show()
--		self.main_frame:Enable(false)
--		flist:Free()	
--		return
	end
	flist:Free()	
	
	local console = get_console()
	console:execute("save " .. self.new_save)
	
	self:GetHolder():start_stop_menu(self, true)

end

function save_dialog:OnButton_cancel_clicked()
	self:GetHolder():start_stop_menu(self,true)	
end

function save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   ui_base_dialog.base_dialog.OnKeyboard(self,dik,keyboard_action)
     
   DIK_RETURN = 28
   WINDOW_KEY_PRESSED = 6

	if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
		self:OnButton_ok_clicked()
	end
   
	return true
end

function save_dialog:AddItemToList(file_name, date_time)	
	local new_item = CUIListItemPair()
	new_item:SetAutoDelete(true)
	
	new_item:SetTextFileName(file_name)
	new_item:SetTextDateTime(date_time)
	new_item:SetFontFileName(self.list_file_font)
	new_item:SetFontDateTime(self.list_date_font)

	local list_box = self:GetListWnd("list_window")
	
	list_box:AddItem(new_item)	
end

function save_dialog:SaveFile(fileName)
	return
end

