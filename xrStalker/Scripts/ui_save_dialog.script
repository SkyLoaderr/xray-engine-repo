-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.8

function main()
	local dlg = ui_save_dialog.save_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
	
end

class "save_dialog" (ui_base_dialog.base_dialog)

function save_dialog:__init() super()		
	self:SetFont(GetFontMedium()) 
	
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function save_dialog:__finalize()

end

function save_dialog:FillList()
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local f_cnt = flist:Size()
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)	
		
	
		
		local ext = string.sub(file, string.len(file) - 3)
		if ext == ".sav" then
			file = string.sub(file,0 , (string.len(file) - 4))
			self:AddItemToList(file)
		end
	end
	
	flist:Free()	
end


function save_dialog:SetClGame  (game_cl)
   self.m_game_cl = game_cl
end
function save_dialog:InitControls()
	ui_base_dialog.base_dialog.InitControls(self, "Save Game")
	
	----- DATA ----	
	local edit_rect       = {x = self.left_align_x,
						     y = self.top_align_y,
						     width =  300,
						     height = 28}
	local btn_save_rect   = {x = self.left_align_x,
							 y = 0,
							 width  = self.btn_rect.width,
							 height = self.btn_rect.height}
	btn_save_rect.y =  self.bottom_align_y - btn_save_rect.height
	local btn_back_rect   = {x = btn_save_rect.x + btn_save_rect.width + self.indent,
							 y = btn_save_rect.y,
							 height = btn_save_rect.height,
							 width  = btn_save_rect.width}
	local list_rect       = {x = self.left_align_x,
						     y = edit_rect.y + edit_rect.height + self.indent,
						     width = 0,
						     height = 0}
	list_rect.width  = self.main_rect.width - self.indent*2
	list_rect.height = self.main_rect.height - self.indent*2 - list_rect.y - btn_save_rect.height	
		
	----- CODE -------
	
	-- EDIT box --
	local frame_edit = CUIFrameWindow()  
    frame_edit:SetAutoDelete(true)
    frame_edit:Init("ui\\ui_frame_very_small", edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height)
    self.main_frame:AttachChild(frame_edit)
	
	local edit_filename = CUIEditBox()
	edit_filename:SetAutoDelete(true)
	edit_filename:SetFont(self.edit_font)
	edit_filename:SetWindowName("edit_filename")	
	edit_filename:Init(edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height)
	self.main_frame:AttachChild(edit_filename)


	------------LIST-----------------
    local txt_list   = CUIFrameWindow()  --background for ListView
    txt_list:SetAutoDelete(true)
    txt_list:Init("ui\\ui_pop_up", list_rect.x, list_rect.y, list_rect.width, list_rect.height)    
    self.main_frame:AttachChild(txt_list) 

    local list_wnd = CUIListWndEx()
    list_wnd:SetAutoDelete(true)
    list_wnd:SetWindowName("list_window")
    list_wnd:Init(list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    list_wnd:SetItemHeight(25)
    list_wnd:EnableScrollBar(true)
	self:Register(list_wnd)
    self.main_frame:AttachChild(list_wnd)

	-- SAVE button
    local btn   = CUIButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_ok")	
	btn:Init("ui\\ui_button_01", btn_save_rect.x, btn_save_rect.y, btn_save_rect.width, btn_save_rect.height)
    btn:SetText("Save")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)


	-- 
	btn = CUIButton()
    btn:SetAutoDelete(true)
    btn:SetWindowName("button_cancel")	
	btn:Init("ui\\ui_button_01",btn_back_rect.x, btn_back_rect.y, btn_back_rect.width, btn_back_rect.height) 	
	btn:SetText("Back")
	btn:SetFont(self.button_font)
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(self.button_indent)
	self:Register(btn)
	self.main_frame:AttachChild(btn)
end

function save_dialog:InitCallBacks()
    // main frame buttons
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED, self, "OnButton_ok_clicked")
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED, self, "OnButton_cancel_clicked")
	// message box buttons
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_OK_CLICKED,     self, "OnMsgOk")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self, "OnMsgCancel")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,    self, "OnMsgYes")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_NO_CLICKED,     self, "OnMsgNo")
	// list box click
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, self, "OnListItemClicked")
end

function save_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	local edit_box = self:GetEditBox("edit_filename")
	local item_id = list_box:GetFocusedItem()
	local item = list_box:GetItem(item_id)
	
	local item_text = item:GetText()
	edit_box:SetText(item_text)
end

function save_dialog:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
	self:SaveFile(self.new_save)
end

function save_dialog:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")
	main_frame:Enable(true)
	msg_box:Hide()
end

function save_dialog:OnButton_ok_clicked()
	-- prepare message box
	local message_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")	
	
	-- Get file name
	local edit_box = self:GetEditBox("edit_filename")
	self.new_save = edit_box:GetText()
	
	// check for empty name
	if string.len(self.new_save) == 0 then
		message_box:SetStyle(CUIMessageBox.STYLE_OK)		
		message_box:SetText("The file name is empty. Please enter valid name!")
		main_frame:Enable(false)
		message_box:Show()
		return
	end
	
	// check for match name
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local file_struct = f:exist("$game_saves$", self.new_save .. ".sav" )

	if file_struct ~= nil then
		message_box:SetStyle(CUIMessageBox.STYLE_YES_NO)
		message_box:SetText("The file with this name already exist. Do you want to overwrite it?")
		message_box:Show()
		main_frame:Enable(false)
		flist:Free()	
		return
	end
	flist:Free()	
	
	self:SaveFile(new_save)

end

function save_dialog:OnButton_cancel_clicked()
	level.start_stop_menu(self,true)	
end

function save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   ui_base_dialog.base_dialog.OnKeyboard(self,dik,keyboard_action)
     
   DIK_RETURN = 28
   WINDOW_KEY_PRESSED = 6

	if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
		self:OnButton_ok_clicked()
	end
   
	return true
end

function save_dialog:AddItemToList(item)
	local list_box = self:GetListWnd("list_window")
	--local shift = 0
	--local color = GetARGB(255,0,255,255)
	--local parse = true
	
	local new_item = CUIListItemEx()
	new_item:SetFont(GetFontLetterica25())
	new_item:SetPerformTextLimit(true)
	new_item:SetText(item)

	
	--list_box:AddText(item, shift, GetARGB(255,0,255,255), GetFontLetterica25(), parse)
	list_box:AddItem(new_item)
	
end

function save_dialog:SaveFile(fileName)
	return
end

