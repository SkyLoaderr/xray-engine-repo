-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.6

function main()
	local dlg = ui_save_dialog.save_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
	
end

class "save_dialog" (CUIScriptWnd)

function save_dialog:__init() super()
	self.new_save = ""
	
	self:SetFont(GetFontMedium()) --set base font for dialog.
	
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function save_dialog:__finalize()

end

function save_dialog:FillList()
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local f_cnt = flist:Size()
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)	
		
		printf("file[%d]=%s",it,file)
		
		local ext = string.sub(file, string.len(file) - 3)
		if ext == ".sav" then
			file = string.sub(file,0 , (string.len(file) - 4))
			self:AddItemToList(file)
		end
	end
	
	flist:Free()	
end


function save_dialog:SetClGame  (game_cl)
   self.m_game_cl = game_cl
end
function save_dialog:InitControls()
	----- DATA ----
	local indent          = 50
	local screen          = {width = 1024,height = 768}	
	local main_rect       = {x = 0,      
							 y = 0,
							 width = 800,
							 height = 600}	
	main_rect.x = (screen.width - main_rect.width)/2
	main_rect.y = (screen.height - main_rect.height)/2
	local caption_rect    = {x = 0,      y = 0,      width = main_rect.width, height = indent*2}
	local captiontxt_rect = {x = caption_rect.width/2,
							 y = caption_rect.height/2,
							 width = 0,
							 height = 0}
	local edit_rect       = {x = indent, 
						     y = caption_rect.y + caption_rect.height + indent,
						     width = caption_rect.width - indent*2, 
						     height = 28}
	local btn_ok_rect     = {x = indent,
							 y = 0,
							 height = 40,
							 width  = 135}
	btn_ok_rect.y = main_rect.height - (btn_ok_rect.height + indent)
	local btn_cancel_rect = {x = btn_ok_rect.x + btn_ok_rect.width + indent,
							 y = btn_ok_rect.y,
							 height = btn_ok_rect.height,
							 width  = btn_ok_rect.width}
	local list_rect       = {x = indent,
						     y = edit_rect.y + edit_rect.height + indent,
						     width = 0,
						     height = 0}
	list_rect.width  = main_rect.width - indent*2
	list_rect.height = main_rect.height - indent*2 - list_rect.y - btn_ok_rect.height	
	local message_rect   = {x = 0, y = 0, width = 800, height = 300}
	--message_rect.x = (main_rect.width - message_rect.width)/2
	--message_rect.y = (main_rect.height - message_rect.height)/2
	
	----- CODE -------
	
	-- init self position and size
	self:Init(0, 0, screen.width, screen.height)
	
	-- MAIN FRAME WINDOW		
	local main_frame = CUIFrameWindow()
	main_frame:SetAutoDelete(true)              --parent will delete this item in destructor
	main_frame:SetWindowName("main_frame")
	--init texture and position relatively parent
	main_frame:Init("ui\\ui_frame",main_rect.x, main_rect.y, main_rect.width, main_rect.height)
    --textures name, root is Gamedata\Textures folder
--	main_static:ClipperOn() --clip texture by window region
	self:AttachChild(main_frame)
	
	-- CAPTION frame --
	local wnd_caption = CUIFrameWindow()
	wnd_caption:SetAutoDelete(true)
	wnd_caption:SetWindowName("wnd_caption")
	wnd_caption:Init("ui\\ui_pop_up",caption_rect.x, caption_rect.y, caption_rect.width, caption_rect.height)
	main_frame:AttachChild(wnd_caption)
	
	local txt_caption = CUIStatic()
	txt_caption:SetAutoDelete(true)
	txt_caption:SetWindowName("txt_caption")
	txt_caption:SetText("SAVE DIALOG HERE")
	txt_caption:SetTextAlign(CGameFont.alLeft)
	txt_caption:Init(captiontxt_rect.x, captiontxt_rect.y, caption_rect.width, caption_rect.height)
	main_frame:AttachChild(txt_caption)
	
	-- EDIT box --
	local frame_edit = CUIFrameWindow()  --background for ListView
    frame_edit:SetAutoDelete(true)
    frame_edit:Init("ui\\ui_frame_very_small", edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height)
    main_frame:AttachChild(frame_edit)
	
	local edit_filename = CUIEditBox()
	edit_filename:SetAutoDelete(true)
	edit_filename:SetFont(GetFontLetterica25())
	edit_filename:SetWindowName("edit_filename")
	edit_filename:SetText("edit_me")
	edit_filename:Init(edit_rect.x, edit_rect.y, edit_rect.width, edit_rect.height)
	main_frame:AttachChild(edit_filename)


	------------LIST-----------------
    local txt_list   = CUIFrameWindow()  --background for ListView
    txt_list:SetAutoDelete(true)
    txt_list:Init("ui\\ui_pop_up", list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    -- txt_list:ClipperOn()
    main_frame:AttachChild(txt_list) 

    local list_wnd = CUIListWnd()
    list_wnd:SetAutoDelete(true)
    list_wnd:SetWindowName("list_window")
    list_wnd:Init(list_rect.x, list_rect.y, list_rect.width, list_rect.height)
    list_wnd:SetItemHeight(25)
    list_wnd:EnableScrollBar(true)
	self:Register(list_wnd)
    main_frame:AttachChild(list_wnd)

--------------------------------------- 
    local btn   = CUIButton()
	btn:SetAutoDelete(true) 
	btn:SetWindowName("button_ok") --set window name for callback processing
	
	btn:Init("ui\\ui_button_01",btn_ok_rect.x, btn_ok_rect.y, btn_ok_rect.width, btn_ok_rect.height)
--  btn:Init(10,10,100,100) --or without texture
    btn:SetText("OK")
	btn:SetTextAlign(CGameFont.alCenter) --horizontal align. possible values are [alCenter,alLeft,alRight]
	btn:SetTextY(20) --vertical align(pixel). set value to -1 for center
	self:Register(btn) --for event-handling
	main_frame:AttachChild(btn)
--------------------------------------
    btn   = CUIButton()
    btn:SetAutoDelete(true)
    btn:SetWindowName("button_cancel")	
	btn:Init("ui\\ui_button_01",btn_cancel_rect.x, btn_cancel_rect.y, btn_cancel_rect.width, btn_cancel_rect.height) 	
	btn:SetText("cancel")
	btn:SetTextAlign(CGameFont.alCenter)
	btn:SetTextY(20)
	self:Register(btn)
	main_frame:AttachChild(btn)
	
	
	-- Message Box --
	message_box = CUIMessageBox()
	message_box:SetAutoDelete(true)
	message_box:SetWindowName("message_box")
	message_box:SetFont(GetFontLetterica25())
	message_box:Init("ui\\ui_frame",message_rect.x, message_rect.y, message_rect.width, message_rect.height)
	message_box:SetStyle(0)	
	message_box:Hide()
	self:Register(message_box)
	self:AttachChild(message_box)
	message_box:AutoCenter()
end

function save_dialog:InitCallBacks()
    // main frame buttons
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED, self, "OnButton_ok_clicked")
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED, self, "OnButton_cancel_clicked")
	// message box buttons
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_OK_CLICKED,     self, "OnMsgOk")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self, "OnMsgCancel")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,    self, "OnMsgYes")
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_NO_CLICKED,     self, "OnMsgNo")
	// list box click
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, self, "OnListItemClicked")
end

function save_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	local edit_box = self:GetEditBox("edit_filename")
	local item_id = list_box:GetFocusedItem()
	local item = list_box:GetItem(item_id)
	
	local item_text = item:GetText()
	edit_box:SetText(item_text)
	printf(item_text)
end

function save_dialog:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function save_dialog:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function save_dialog:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
	self:SaveFile(self.new_save)
end

function save_dialog:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function save_dialog:OnButton_ok_clicked()
	-- prepare message box
	local message_box = self:GetMessageBox("message_box")
	
	-- Get file name
	local edit_box = self:GetEditBox("edit_filename")
	self.new_save = edit_box:GetText()
	
	// check for empty name
	if string.len(self.new_save) == 0 then
		message_box:SetStyle(CUIMessageBox.STYLE_OK)		
		message_box:SetText("The file name is empty. Please enter valid name!")
		message_box:Show()
		return
	end
	
	// check for match name
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local file_struct = f:exist("$game_saves$", self.new_save .. ".sav" )

	if file_struct ~= nil then
		message_box:SetStyle(CUIMessageBox.STYLE_YES_NO)
		message_box:SetText("The file with this name already exist. Do you want to overwrite it?")
		message_box:Show()
		flist:Free()	
		return
	end
	flist:Free()	
	
	self:SaveFile(new_save)

end

function save_dialog:OnButton_cancel_clicked()
	level.start_stop_menu(self,true)	
end

function save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
     
   DIK_RETURN = 28
   WINDOW_KEY_PRESSED = 6
   
   local bind = dik_to_bind(dik)
   if bind == key_bindings.kQUIT then
      level.start_stop_menu(self,true)
   end  
   
   if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
	self:OnButton_ok_clicked()
   end
   
   return true
end

function save_dialog:AddItemToList(item)
	local list_box = self:GetListWnd("list_window")
	local shift = 0
	local color = GetARGB(255,0,255,255)
	local parse = true
	
	list_box:AddText(item, shift, GetARGB(255,0,255,255), GetFontLetterica25(), parse)
	
end

function save_dialog:SaveFile(fileName)
	return
end

