

-------------------------------------------------------------------------
class "evaluator_chaser" (property_evaluator)
------------------
function evaluator_chaser:__init (storage, name) super ()
    self.a = storage
end
------------------
function evaluator_chaser:evaluate ()
    if self.a.npc == nil or self.a.npc:alive () == false then return false end
    return true
end
-------------------------------------------------------------------------



-------------------------------------------------------------------------
class "evaluator_return" (property_evaluator)
------------------
function evaluator_return:__init (storage, name) super ()
    self.a = storage
end
------------------
function evaluator_return:evaluator ()
    printf ("Level vertex id = %d, object vertex id = %d", self.a.ret_vertex, self.object:level_vertex_id ())
    if self.a.ret_vertex == -1 or self.object:level_vertex_id () == self.a.ret_vertex then
       return true
    end    
    return false
end
-------------------------------------------------------------------------


-------------------------------------------------------------------------
class "action_chase" (action_base)
------------------
function action_chase:__init (storage, name) super (nil, name)
    self.a = storage
end    
------------------
function action_chase:initialize ()
    action_base.initialize (self)
    self.object:clear_animations ()
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.walk)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.a.npc:level_vertex_id ())
    self.object:set_mental_state          (anim.free)
    self.object:set_sight                 (look.path_dir, nil, 0)
end
------------------
function action_chase:execute ()
    action_base.execute (self)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.a.npc:level_vertex_id ())
end
------------------
function action_chase:finalize ()
    action_base.finalize (self)
end            
-------------------------------------------------------------------------


-------------------------------------------------------------------------
class "action_return" (action_base)
------------------
function action_return:__init (storage, name) super (nil, name)
    self.a = storage
end    
------------------
function action_return:initialize ()
    action_base.initialize (self)
    self.object:clear_animations ()
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.walk)
    self.object:set_path_type             (game_object.level_path)
    if self.a.ret_vertex == -1 then
       self.a.ret_vertex = self.object:level_vertex_id ()
       self.a.enabled = false
    end    
    self.object:set_dest_level_vertex_id  (self.a.ret_vertex)
    self.object:set_mental_state          (anim.free)
    self.object:set_sight                 (look.path_dir, nil, 0)
end
------------------
function action_return:execute ()
    action_base.execute (self)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_dest_level_vertex_id  (self.a.ret_vertex)
end
------------------
function action_return:finalize ()
    action_base.finalize (self)
end            
-------------------------------------------------------------------------


-------------------------------------------------------------------------
function add_to_binder (npc, ini)
    local operators = {}
    local properties = {}
    
    properties["chase"]             = xr_evaluators_id.sidor_chaser
    properties["return"]            = xr_evaluators_id.sidor_chaser + 1
	properties["state_end"]		    = xr_evaluators_id.state_change
    
    operators["chase"]              = xr_actions_id.sidor_act_chaser
    operators["return"]             = xr_actions_id.sidor_act_chaser + 1
    
    
    local manager = npc:motivation_action_manager ()
    manager:add_evaluator (properties["chase"], this.evaluator_chaser (xr_motivator.storage[npc:id ()].chaser, "evaluator_chaser"))
    manager:add_evaluator (properties["return"], this.evaluator_return (xr_motivator.storage[npc:id ()].chaser, "evaluator_return"))
    
    local action = this.action_chase (xr_motivator.storage[npc:id ()].chaser, "action_chase")
   	action:add_precondition     	(world_property (stalker_ids.property_alive,    true))
   	action:add_precondition     	(world_property (stalker_ids.property_enemy,    false))
   	action:add_precondition     	(world_property (properties["chase"],           true))
	action:add_precondition		    (world_property (properties["state_end"], 	    true))
   	action:add_effect           	(world_property (properties["chase"],           false))
   	manager:add_action              (operators["chase"], action)
    
    
    action = this.action_return (xr_motivator.storage[npc:id ()].chaser, "action_return")
   	action:add_precondition     	(world_property (stalker_ids.property_alive,    true))
   	action:add_precondition     	(world_property (stalker_ids.property_enemy,    false))
   	action:add_precondition     	(world_property (properties["chase"],           false))
   	action:add_precondition     	(world_property (properties["return"],          false))
	action:add_precondition		    (world_property (properties["state_end"], 	    true))
   	action:add_effect           	(world_property (properties["return"],          true))
   	manager:add_action              (operators["return"], action)
    
    action = manager:action (stalker_ids.action_puzzle_solver)
    action:add_precondition (world_property (properties["chase"], false))
    action:add_precondition (world_property (properties["return"], true))
    
end
-------------------------------------------------------------------------
function set_chase (npc, enabled, sacrifice)
	local char_ini = npc:spawn_ini()
	local st = xr_motivator.storage[npc:id()].chaser

    if enabled == nil then
       if char_ini:section_exist ("chaser") == true and char_ini:line_exist("chaser", "enabled") == true then
          st.enabled = char_ini:r_bool("chaser", "enabled")
       else 
          st.enabled = false   
       end
    else
       st.enabled = enabled     
    end
    
    if sacrifice == nil then
       st.enabled = false
    else
       st.npc = sacrifice
       st.ret_vertex = npc:level_vertex_id ()
    end        
	
end