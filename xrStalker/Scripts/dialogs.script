function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end
function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	--abort("KICK ASS !!!!")
	--xr_punch.punch[first_speaker:id()] = second_speaker
	db.storage[second_speaker:id()].punch.enabled = true
end

function get_money_then_leave(first_speaker, second_speaker)
	db.storage[first_speaker:id()].meet.enabled = false
	db.storage[first_speaker:id()].robber.enabled = true
end

function is_wounded(first_speaker, second_speaker)
	return xr_wounded.is_wounded(first_speaker, 0.2)
end
function is_opp_wounded(first_speaker, second_speaker, dialog_id)
	if second_speaker:object("medkit") ~= nil or
	   second_speaker:object("bandage") ~= nil then
		return false
	end

	return	xr_wounded.is_wounded(second_speaker, 0.2)
end
function is_not_wounded(first_speaker, second_speaker)
	return not this.is_wounded(first_speaker, second_speaker)
end
function actor_have_medkit(first_speaker, second_speaker)
	return first_speaker:object("medkit") ~= nil
end
function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end
function transfer_medkit(first_speaker, second_speaker)
	local obj = first_speaker:object("medkit")
	if obj ~= nil then
		dialogs.relocate_item(second_speaker, obj, "out")
		second_speaker:set_relation(game_object.friend, first_speaker)
	end
end
function transfer_bandage(first_speaker, second_speaker)
	local obj = first_speaker:object("bandage")
	if obj ~= nil then
		dialogs.relocate_item(second_speaker, obj, "out")
		second_speaker:set_relation(game_object.friend, first_speaker)
	end
end
function kill_yourself(npc, actor)
	npc:kill(actor)
end


function relocate_item(victim, obj, type)
	if db.actor and victim then
		if type == "in" then
			victim:transfer_item(obj, db.actor)
		elseif type == "out" then
			db.actor:transfer_item(obj, victim)
		end
		news_manager.relocate_item(db.actor, type)
	end
end
function relocate_money(victim, num, type)
	if db.actor and victim then
		if type == "in" then
			victim:transfer_money(num, db.actor)
		elseif type == "out" then
			db.actor:transfer_money(num, victim)
		end
		news_manager.relocate_money(db.actor, type)
	end
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if id ~= nil then
		printf("*DIALOGS*: dialog_allowed: %s", id)
	else
		printf("*DIALOGS*: dialog_allowed: nil")
	end
	if db.storage[victim:id()].actor_dialogs ~= nil then
		for k,v in db.storage[victim:id()].actor_dialogs do
			if v == id then return true end
		end
	end
	return false
end
function dialog_not_disable(object, victim, id)
	if id ~= nil then
		printf("*DIALOGS*: dialog_disable:%s", id)
	else
		printf("*DIALOGS*: dialog_disable:nil")
	end
	if db.storage[victim:id()].actor_disable ~= nil then
		for k,v in db.storage[victim:id()].actor_disable do
			if v == id then return false end
		end
	end
	return true
end


-----------------------------------------------------------------------------------
-- LEVELS
-----------------------------------------------------------------------------------
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	return level.name() == "l03_agroprom_ai2"
end

-----------------------------------------------------------------------------------
-- Relation functions
-----------------------------------------------------------------------------------
function is_friend(first_speaker, second_speaker)
	return first_speaker:relation(second_speaker) == game_object.friend
end

function is_not_friend(first_speaker, second_speaker)
	return not is_friend(first_speaker, second_speaker)
end

function become_friend(first_speaker, second_speaker)
	first_speaker:set_relation(game_object.friend, second_speaker)
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------
function actor_in_dolg(actor, npc)
	if db.actor then
		return db.actor:character_community() == "actor_dolg"
	end
	return false
end
function actor_not_in_dolg(actor, npc)
	return not actor_in_dolg(actor, npc)
end
function actor_set_dolg(actor, npc)
	printf("ACTOR NOW IN [DOLG] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor_dolg", 0, 0)
	end
	return true
end
function actor_clear_community(actor, npc)
	printf("ACTOR NOW IN [NEUTRAL] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor", 0, 0)
	end
	return true
end

-----------------------------------------------------------------------------------
-- Money functions
-----------------------------------------------------------------------------------
function has_2000_money(first_speaker, second_speaker)
	return first_speaker:money() >= 2000
end

-----------------------------------------------------------------------------------
-- TRADE
-----------------------------------------------------------------------------------
--' Инициализация торговли
function trade_init(seller, buyer)
	db.storage[seller:id()].meet.begin_wait_to_see.begin = time_global()/1000
	xr_position.setPosition(db.storage[seller:id()].meet.Seller, 
							db.storage[seller:id()].meet.Seller:level_vertex_id())
	db.storage[seller:id()].meet.Buyer = buyer
end

function want_trade(seller, buyer)
	if seller:relation(buyer) == game_object.friend or
		seller:relation(buyer) == game_object.neutral
	then
		return true
	else
		return false
	end
end

function dont_want_trade(seller, buyer)	
	return not want_trade(seller,buyer)
end

-----------------------------------------------------------------------------------
-- helper
-----------------------------------------------------------------------------------
function helper_init(first_speaker, second_speaker)
	if db.storage[first_speaker:id()].sos.npc == nil and 
	   first_speaker:relation (second_speaker) ~= game_object.enemy then
	   db.storage[first_speaker:id()].sos.npc = second_speaker
	end
end
-------------------
--' Прекондишн на медикит
function is_medikit_present (player, helper) 
    return helper:object ("medkit") ~= nil
end
-------------------
--' Прекондишн на медикит
function is_medikit_no_present (helper, player) 
    return helper:object ("medkit") == nil
end
-------------------
--' Передача медикита халявная
function drop_medikit (helper, player)
	local obj = helper:object("medkit")
	dialogs.relocate_item(helper, obj, "in")   
end
-------------------
--' Продажа медикита
function sell_medikit (helper, player)
    if player:money () < 300 then return end
    local obj = helper:object("medkit")
    dialogs.relocate_item(helper, obj, "in")   
    dialogs.relocate_money(helper, 300, "out")   
end
-------------------
--' Имеется ли лишнее оружие
function have_extra_weapon (player, helper)
    printf ("have_extra_weapon")
    local count = helper:object_count () 
    if count == 0 then return false end
    local wpn = 0
    for a = 0, count - 1, 1 do
        local obj = helper:object (a)
        if isWeapon (obj) == true then wpn = wpn + 1 end
    end
    if wpn >= 1 then return true end
    return false    
end
-------------------
function no_have_extra_weapon (player, helper)
    printf ("no_have_extra_weapon")
    return not this.have_extra_weapon (helper, player)
end    
-------------------
--' Хорошо ли персонаж себя чувствует
function is_health_good (helper, player)
    printf ("is_health_good")
    return player.health >= 0.9 
end    
-------------------
function is_good_relation (helper, player)
    return helper:goodwill (player) > 50 
end
-------------------
function is_bad_relation (helper, player)
    return helper:goodwill (player) <= 50 
end
-------------------
function activate_helper_follow (helper, player)
    printf ("activate_helper_follow")
    db.storage[helper:id ()].sos.need_follow = true
    xr_meet.override_meet (helper, true)
end
-------------------
function disable_helper (helper, player)
    printf ("disable_helper")
    helper:stop_talk ()
    xr_meet.override_meet (helper, false)
    db.storage[helper:id ()].sos.npc = nil
end
-------------------
function disable_helper_2 (player, helper)
    printf ("disable_helper")
    helper:stop_talk ()
    xr_meet.override_meet (helper, false)
    db.storage[helper:id ()].sos.npc = nil
end
-------------------
function dialogs.trade_help (helper, player)
    helper:switch_to_trade ()
end
------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
-- wounded
------------------------------------------------------------------------------------
-------------------
function medikit_drop (player, wounded)
    if player:relation (wounded) ~= game_object.friend then return false end
    return player:object ("medkit") ~= nil
end
-------------------
function medikit_sell (player, wounded)
    if player:relation (wounded) ~= game_object.neutral then return false end
    return player:object ("medkit") ~= nil
end
-------------------
function medikit_no (player, wounded)
    return player:object ("medkit") == nil
end
-------------------
function medikit_yes (player, wounded)
    return player:object ("medkit") ~= nil
end
-------------------
function have_money (wounded, helper)
    return wounded:money () >= 400 
end
-------------------
function not_have_money (wounded, helper)
    return wounded:money () < 400
end
-------------------
function wounded_trade (wounded, helper)
    helper:switch_to_trade ()
    wounded:switch_to_trade ()
end
-------------------
function disable_wounded (wounded, helper)
    helper:stop_talk ()
    wounded:stop_talk ()
end
-------------------
function transfer_medikit (wounded, player)
    local obj = player:object("medkit")
    dialogs.relocate_item(wounded, obj, "out")   

    local good = wounded:goodwill (player) + 20
    if good > 100 then good = 100 end
    wounded:set_goodwill (good, player)
end
-------------------
function transfer_medikit2 (player, wounded)
    local obj = player:object("medkit")
    dialogs.relocate_item(wounded, obj, "out")   
	wounded:set_relation(game_object.friend, player)
    printf( "wounded=%s goodwill(actor)=%d", wounded:name(), wounded:goodwill(player) )
end

------------------------------------------------------------------------------------
-- Companion
------------------------------------------------------------------------------------
function companion_will_follow(npc, actor)
	printf("_bp: dialogs: companion_will_follow: npc='%s', actor='%s'",
		npc:name(), actor:name())
	--if is_companion(npc, actor) then
		-- Уже компаньен, больше не соглашаться
	--	return false
	--end
	local st = db.storage[npc:id()]
	if not st then
		return false
	end
	if st.active_scheme then
		local overrides = xr_logic.generic_scheme_overrides(npc)
		if overrides and overrides.companion_enabled then
			-- ok
		else
			return false
		end
	end
	return true
end

function not_companion_will_follow(npc, actor)
	printf("_bp: dialogs: not_companion_will_follow: npc='%s', actor='%s'",
		npc:name(), actor:name())
	return not companion_will_follow(npc, actor)
end

function companion_start_following(npc, actor)
	printf("_bp: dialogs: companion_start_following: npc='%s', actor='%s'",
		npc:name(), actor:name())
	db.storage[npc:id()].companion.enabled = true
end

function companion_stop_following(npc, actor)
	printf("_bp: dialogs: companion_stop_following: npc='%s', actor='%s'",
		npc:name(), actor:name())
	db.storage[npc:id()].companion.enabled = false
end

function is_companion(actor, npc)
	printf("_bp: dialogs: is_companion: npc='%s', actor='%s'",
		npc:name(), actor:name())
	local st = db.storage[npc:id()]
	if not st then
		return false
	end
	if not st.companion then
		return false
	end
	if not st.companion.enabled then
		return false
	end
	return true
end

function not_is_companion(actor, npc)
	printf("_bp: dialogs: not_is_companion: npc='%s', actor='%s'",
		npc:name(), actor:name())
	return not is_companion(actor, npc)
end

function companion_beh_walk_simple(actor, npc)
	printf("_bp: dialogs: companion_beh_walk_simple: npc='%s', actor='%s'",
		npc:name(), actor:name())
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_walk_simple
	end
end

function companion_beh_wait_simple(actor, npc)
	printf("_bp: dialogs: companion_beh_wait_simple: npc='%s', actor='%s'",
		npc:name(), actor:name())
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_wait_simple
	end
end

function companion_suicide(actor, npc)
	printf("_bp: dialogs: companion_suicide: npc='%s', actor='%s'",
		npc:name(), actor:name())

	local h = hit()
	h.power = 1000
	--h.direction = vector_rotate_y(npc:direction(), 90)
	h.direction = npc:direction()
	h.bone = "bip01_head"
	h.draftsman = npc 
	h.impulse = 10
	h.type = hit.wound
	npc:hit(h)

end

------------------------------------------------------------------------------------
-- escape factory combat
------------------------------------------------------------------------------------
function dont_have_a_vodka (player, stalker)
    return player:object ("vodka") == nil
end

function have_a_vodka (player, stalker)
    return player:object ("vodka") ~= nil
end

function transfer_vodka (stalker, player)
	local obj = player:object ("vodka")
	if obj then	
		dialogs.relocate_item(stalker, obj, "out")
	end

end
