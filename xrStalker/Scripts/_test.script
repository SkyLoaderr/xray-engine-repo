
class "some_cam_effector" (cam_effector)

function some_cam_effector:__init(tm, amp,periods,power) super(cam_effector_type.eCEHit, tm, false)

	self.total 			= tm
	self.max_amp 		= amp*power
	self.period_number	= periods
	self.power			= power
	self.offset			= vector()
	
	self.offset.x		= math.random(1000,2000)/1000.0
	self.offset.y		= math.random(1000,6000)/1000.0
	self.offset.z		= math.random(1000,6000)/1000.0
end

function dump_matrix(mm, text)
	printf("%s",text)
	printf("i %f %f %f", mm.i.x, mm.i.y, mm.i.z)
	printf("j %f %f %f", mm.j.x, mm.j.y, mm.j.z)
	printf("k %f %f %f", mm.k.x, mm.k.y, mm.k.z)
	printf("c %f %f %f", mm.c.x, mm.c.y, mm.c.z)

end

function dump_vector(v, text)
	printf("%s",text)
	printf("%f %f %f", v.x, v.y, v.z)

end

function some_cam_effector:Process (pos,dir,norm)
	self.fLifeTime 	= self.fLifeTime - device().f_time_delta
	if self.fLifeTime<0 then return false 	end
	
	local time_left_perc = self.fLifeTime / self.total
	
	local Mdef 			= matrix	()
	Mdef:identity		()
	Mdef.j				= vector():set(norm)
	Mdef.k				= vector():set(dir)
	Mdef.i:crossproduct	(norm,dir)
	Mdef.c				= vector():set(pos)
	
	local period_all 	= self.period_number 	* math.pi*2.0
	local cur_amp		= self.max_amp 			* (math.pi/180.0) * time_left_perc

	local dangle 		= vector()
	dangle.x 			= cur_amp/self.offset.x * math.sin(period_all/self.offset.x * (1.0 - time_left_perc))
	dangle.y 			= cur_amp/self.offset.y * math.cos(period_all/self.offset.y * (1.0 - time_left_perc))
	dangle.x 			= cur_amp/self.offset.z * math.sin(period_all/self.offset.z * (1.0 - time_left_perc))
	
	local R				= matrix()
	R:setHPB			(dangle.x,dangle.y,dangle.z)
	local mR			= matrix()
	mR:mul				(Mdef, R)

	dir:set				(mR.k)
	norm:set			(mR.j)
	return true
end

class "path_cam_effector" (cam_effector)

function path_cam_effector:__init(str_path) super(cam_effector_type.eCEHit, 10, false)
	self.animator 				= object_animator()
	self.animator:Load			(str_path)
	self.animator:Play			(false)
	self.fLifeTime				= self.animator:GetLengthSec()
	printf("path length=%f",	self.fLifeTime)
end

function path_cam_effector:Process (pos,dir,norm)
	self.fLifeTime 	= self.fLifeTime - device().f_time_delta
	if self.fLifeTime<0 then return false 	end
	
	local m = matrix			()
	self.animator:Update 		(device().f_time_delta)
	self.animator:xform 		(m)

	local Mdef 			= matrix	()
	Mdef:identity		()
	Mdef.j				= vector():set(norm)
	Mdef.k				= vector():set(dir)
	Mdef.i:crossproduct	(norm,dir)
	Mdef.c				= vector():set(pos)
	
	local mr 			= matrix()
	mr:mul				(m,Mdef)
	dir:set				(mr.k)
	norm:set			(mr.j)
	
	
	return true;
end

function main()

local ce = _test.path_cam_effector("effector_test.anm")
--local ce = _test.some_cam_effector(1.3,7.0,10.0,5.0)
level.add_cam_effector(ce)
--level.actor_impact (1.3,7,10,5)

--	local info = "tutorial_artefact_start" 
--	db.actor:give_info_portion(info) 
   
end

-- dir.x dir.y dir.z dir.x==d.x
-- d.x d.y d.z
-- m.k.x m.k.y m.k.z



function _main()
	local ui = get_hud()
	local msg_id = "hud_timer"
--	ui:AddCustomMessage(msg_id,200,200,30,GetFontDI(), CGameFont.alCenter, GetARGB(255,255,0,0))
	ui:AddCustomStatic(msg_id)
	local total = 5

	while total>0 do	
		local str = string.format("time remains %02d sec",total)
--		ui:CustomMessageOut(msg_id, str, GetARGB(255,255,0,0))
		local s = ui:GetCustomStatic(msg_id)
--		s:SetTextST("pda_btn_encyclopedia")
		--or
		s:SetText(str)
		
		--wait 1sec
		wait(1000)
		total = total-1
	end	

--	ui:RemoveCustomMessage(msg_id)
	ui:RemoveCustomStatic(msg_id)
	
end

