struct 	v2p_in
{
  half4 hemi:		COLOR0;		// Hemisphere, replicated
  half2	tc0: 		TEXCOORD0;	// Texture coordinates 	(for sampling diffuse map)
  half3	Pe: 		TEXCOORD1;	// Eye-space position 	(for lighting)
  half3 M1:		TEXCOORD2;	// nmap 2 eye - 1
  half3 M2:		TEXCOORD3;	// nmap 2 eye - 2
  half3 M3:		TEXCOORD4;	// nmap 2 eye - 3
};

struct 	p2f
{
  half4	Pe: 		COLOR0;		// Eye-space position 	(for lighting)
  half4	Ne:		COLOR1;		// Eye-space normal	(for lighting)
  half4	C:     		COLOR2;		// Diffuse color + specular mask
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D 	s_base;
uniform sampler2D 	s_bump;

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
p2f 	main	( v2p_in I )
{
  p2f		O;

  // Transfer position, sample diffuse + normal
  half4 D	= tex2D		(s_base, I.tc0);			// IN:  rgb.a
  half4 Nu	= tex2D		(s_bump, I.tc0);			// IN:  normal.gloss

  // Sample normal and rotate it by matrix
  half3 Ns	= (half3)Nu - .5f;					// [-.5f .. +.5f]: Signed normal, should be moved to VS or preprocessing
  half3 Ne	= mul		(half3x3(I.M1, I.M2, I.M3), Ns);	// Normal in eye-space : unnormalized
  half3 NeN	= normalize	(Ne);					// Normal in eye-space : normalized
  half3	Pe	= I.Pe + .03f*NeN;					// Shift position along normal (greatly improves lighting/shadowing), should be performed with actual h-map data
  
  O.Pe		= half4		(Pe.x,	Pe.y,	Pe.z,	0);		// OUT: position
  O.Ne 		= half4		(NeN.x,	NeN.y,	NeN.z,	I.hemi.x);	// OUT: normal.hemi
  O.C		= half4		(D.x,	D.y,	D.z,	Nu.w);		// OUT: rgb.gloss

  return O;
}
