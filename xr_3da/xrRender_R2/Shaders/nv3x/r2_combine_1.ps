struct 	v2p
{
  half2 tc0: 		TEXCOORD0;	// Texture coordinates 	(for sampling maps)
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D 	s_position;
uniform sampler2D 	s_normal;
uniform sampler2D 	s_color;
uniform sampler2D 	s_accumulator;
uniform sampler2D 	s_bloom;
uniform half4 		light_dynamic_range;
uniform half4 		light_hemi;

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
half4 	main		( v2p I )	: COLOR
{
  // Sample the buffers:
  half4 N 	= tex2D 	(s_normal,	I.tc0);		// normal.hemi
  half4 D	= tex2D		(s_color,	I.tc0);		// rgb.gloss
  half4 L 	= tex2D		(s_accumulator, I.tc0);		// diffuse.specular
  half4 hemi 	= N.wwww;					// hemisphere
  half4 light 	= L*light_dynamic_range+hemi*light_hemi;	// combined lighting
  half4 C	= D*light;					// rgb.gloss * light(diffuse.specular)
  half4 S	= half4		(C.w,C.w,C.w,C.w);		// replicated specular

  // Distance fade to sky
  half3 pos 		= tex2D 	(s_position, 	I.tc0);
  half  dist 		= length	(pos);
  half  sky_blend 	= dist/100.h - .5h;
  half4 color 		= C+S;

  // Mix with bloom (note: after all combinations)
  half4 B 		= tex2D		(s_bloom, 	I.tc0);		// filtered high range
  half4 final 		= color+B;	//lerp		(color,  B,  .5f);		// sum everything ???
  return half4(final.x,final.y,final.z,sky_blend);
}
