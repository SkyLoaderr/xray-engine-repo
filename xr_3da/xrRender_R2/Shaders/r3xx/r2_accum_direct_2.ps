#define FAST_DEPREAD

//////////////////////////////////////////////////////////////////////////////////////////
struct 	v2p
{
  half2 tc0: 		TEXCOORD0;	// Texture coordinates 	(for sampling maps)
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D 	s_position;
uniform sampler2D 	s_normal;
uniform sampler2D 	s_smap;
uniform sampler1D 	s_fade;
uniform half4x4		m_WVP;
uniform half4		jitter[6];

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
half4 	main		( v2p I )	: COLOR
{
  // Sample the fat framebuffer:
  half4 _P		= tex2D 	(s_position, I.tc0); 
  half4 P4 		= half4		(_P.x,_P.y,_P.z,1);

  // Transform position to light/shadow space
  half4 PLS		= mul		(m_WVP, P4);
  half2	uv0		= PLS.xy / PLS.w;
  half  depth		= PLS.z;
  
  // 1. Sample shadowmap 
  // 2. Compare (if (depth_pixel > depth_smap) then in shadow)
  half4 s0,s1,s2,s3,sC;
  half3 sA;
  half4 one		= half4	(1,1,1,1)/4;
 
  s0			= tex2D		(s_smap,uv0+half2(jitter[0].x,jitter[0].y));
  s1			= tex2D		(s_smap,uv0+half2(jitter[0].w,jitter[0].z));
  s2			= tex2D		(s_smap,uv0+half2(jitter[1].x,jitter[1].y));
  s3			= tex2D		(s_smap,uv0+half2(jitter[1].w,jitter[1].z));
  sC			= step		(half4(depth-s0.x,depth-s1.x,depth-s2.x,depth-s3.x),	0);
  sA.x			= dot		(sC,one);

  s0			= tex2D		(s_smap,uv0+half2(jitter[2].x,jitter[2].y));
  s1			= tex2D		(s_smap,uv0+half2(jitter[2].w,jitter[2].z));
  s2			= tex2D		(s_smap,uv0+half2(jitter[3].x,jitter[3].y));
  s3			= tex2D		(s_smap,uv0+half2(jitter[3].w,jitter[3].z));
  sC			= step		(half4(depth-s0.x,depth-s1.x,depth-s2.x,depth-s3.x),	0);
  sA.y			= dot		(sC,one);

  s0			= tex2D		(s_smap,uv0+half2(jitter[4].x,jitter[4].y));
  s1			= tex2D		(s_smap,uv0+half2(jitter[4].w,jitter[4].z));
  s2			= tex2D		(s_smap,uv0+half2(jitter[5].x,jitter[5].y));
  s3			= tex2D		(s_smap,uv0+half2(jitter[5].w,jitter[5].z));
  sC			= step		(half4(depth-s0.x,depth-s1.x,depth-s2.x,depth-s3.x),	0);
  sA.z			= dot		(sC,one);
  
  half	 shadow		= dot		(sA,half3(1,1,1)/3);

  // Calculate fade factor
#ifdef FAST_DEPREAD
  half4  fade 		= tex1D 	(s_fade,_P.z/100.f);
  half   shadow_f 	= shadow*fade.x + fade.w;
#else
  half 	len 		= _P.z;		// length(_P);
  half 	alpha 		= saturate(len/15.f);
  half  fade_l 		= saturate(len/100.f);
  half 	fade 		= fade_l*fade_l;
  half  shadow_f 	= (shadow*(1-fade)+fade)*alpha;
#endif
  return half4		(shadow_f,shadow_f,shadow_f,shadow_f);	// auto-saturate before blender ?
}
