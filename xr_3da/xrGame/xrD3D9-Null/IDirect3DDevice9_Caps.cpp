#include "stdafx.h"
#include "IDirect3D9.h"
#include "IDirect3DDevice9.h"

#include <stdlib.h>
#include <objbase.h>
#include <windows.h>

HRESULT		xrIDirect3DDevice9::GetDeviceCaps( D3DCAPS9* pCaps)
{ 
	APIDEBUG("xrIDirect3DDevice9::GetDeviceCaps");

	if (!pCaps)
		return D3DERR_INVALIDCALL;

	memset(pCaps, 0, sizeof(D3DCAPS9));

	/* Device Info */
	pCaps->DeviceType = D3DDEVTYPE_HAL;
	pCaps->AdapterOrdinal = 0;

	/* Caps from DX7 Draw */
	pCaps->Caps = 0; //D3DCAPS_READ_SCANLINE;
	pCaps->Caps2 = D3DCAPS2_CANAUTOGENMIPMAP | D3DCAPS2_CANCALIBRATEGAMMA |
		D3DCAPS2_CANMANAGERESOURCE | D3DCAPS2_DYNAMICTEXTURES |
		D3DCAPS2_FULLSCREENGAMMA;//D3DCAPS2_CANRENDERWINDOWED ;
	pCaps->Caps3 = D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD | D3DCAPS3_COPY_TO_VIDMEM |
		D3DCAPS3_COPY_TO_SYSTEMMEM | D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION;

	pCaps->PresentationIntervals = D3DPRESENT_INTERVAL_IMMEDIATE; // see wglSwapIntervalEXT

	/* Cursor Caps */
	pCaps->CursorCaps = D3DCURSORCAPS_COLOR;

	pCaps->DevCaps = 
		D3DDEVCAPS_EXECUTESYSTEMMEMORY			
		| D3DDEVCAPS_EXECUTEVIDEOMEMORY			
		| D3DDEVCAPS_TLVERTEXSYSTEMMEMORY		
		| D3DDEVCAPS_TLVERTEXVIDEOMEMORY		
		| D3DDEVCAPS_TEXTURESYSTEMMEMORY		
		| D3DDEVCAPS_TEXTUREVIDEOMEMORY			
		| D3DDEVCAPS_DRAWPRIMTLVERTEX			
		| D3DDEVCAPS_CANRENDERAFTERFLIP			
		| D3DDEVCAPS_TEXTURENONLOCALVIDMEM		
		| D3DDEVCAPS_DRAWPRIMITIVES2			
		| D3DDEVCAPS_SEPARATETEXTUREMEMORIES	
		| D3DDEVCAPS_DRAWPRIMITIVES2EX			
		| D3DDEVCAPS_HWTRANSFORMANDLIGHT		
		| D3DDEVCAPS_CANBLTSYSTONONLOCAL		
		| D3DDEVCAPS_HWRASTERIZATION			
		| D3DDEVCAPS_PUREDEVICE					
		| D3DDEVCAPS_QUINTICRTPATCHES			
		| D3DDEVCAPS_RTPATCHES					
		| D3DDEVCAPS_RTPATCHHANDLEZERO			
		| D3DDEVCAPS_NPATCHES	;				

	pCaps->PrimitiveMiscCaps = D3DPMISCCAPS_MASKZ
		|  D3DPMISCCAPS_CULLNONE					
		|  D3DPMISCCAPS_CULLCW						
		|  D3DPMISCCAPS_CULLCCW						
		|  D3DPMISCCAPS_COLORWRITEENABLE			
		|  D3DPMISCCAPS_CLIPPLANESCALEDPOINTS		
		|  D3DPMISCCAPS_CLIPTLVERTS					
		|  D3DPMISCCAPS_TSSARGTEMP					
		|  D3DPMISCCAPS_BLENDOP						
		|  D3DPMISCCAPS_NULLREFERENCE				
		|  D3DPMISCCAPS_INDEPENDENTWRITEMASKS		
		|  D3DPMISCCAPS_PERSTAGECONSTANT			
		|  D3DPMISCCAPS_FOGANDSPECULARALPHA			
		|  D3DPMISCCAPS_SEPARATEALPHABLEND         
		|  D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS    
		|  D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING 
		|  D3DPMISCCAPS_FOGVERTEXCLAMPED;

	pCaps->RasterCaps =	D3DPRASTERCAPS_DITHER
		|  D3DPRASTERCAPS_ZTEST                  
		|  D3DPRASTERCAPS_FOGVERTEX              
		|  D3DPRASTERCAPS_FOGTABLE               
		|  D3DPRASTERCAPS_MIPMAPLODBIAS          
		|  D3DPRASTERCAPS_ZBUFFERLESSHSR         
		|  D3DPRASTERCAPS_FOGRANGE               
		|  D3DPRASTERCAPS_ANISOTROPY             
		|  D3DPRASTERCAPS_WBUFFER                
		|  D3DPRASTERCAPS_WFOG                   
		|  D3DPRASTERCAPS_ZFOG                   
		|  D3DPRASTERCAPS_COLORPERSPECTIVE       
		|  D3DPRASTERCAPS_SCISSORTEST            
		|  D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS    
		|  D3DPRASTERCAPS_DEPTHBIAS              
		|  D3DPRASTERCAPS_MULTISAMPLE_TOGGLE;

	pCaps->ZCmpCaps = D3DPCMPCAPS_NEVER
		| D3DPCMPCAPS_LESS          
		| D3DPCMPCAPS_EQUAL         
		| D3DPCMPCAPS_LESSEQUAL     
		| D3DPCMPCAPS_GREATER       
		| D3DPCMPCAPS_NOTEQUAL      
		| D3DPCMPCAPS_GREATEREQUAL  
		| D3DPCMPCAPS_ALWAYS;

	pCaps->SrcBlendCaps = D3DPBLENDCAPS_ZERO              
		| D3DPBLENDCAPS_ONE               
		| D3DPBLENDCAPS_SRCCOLOR          
		| D3DPBLENDCAPS_INVSRCCOLOR       
		| D3DPBLENDCAPS_SRCALPHA          
		| D3DPBLENDCAPS_INVSRCALPHA       
		| D3DPBLENDCAPS_DESTALPHA         
		| D3DPBLENDCAPS_INVDESTALPHA      
		| D3DPBLENDCAPS_DESTCOLOR         
		| D3DPBLENDCAPS_INVDESTCOLOR      
		| D3DPBLENDCAPS_SRCALPHASAT       
		| D3DPBLENDCAPS_BOTHSRCALPHA      
		| D3DPBLENDCAPS_BOTHINVSRCALPHA   
		| D3DPBLENDCAPS_BLENDFACTOR ;      

	pCaps->DestBlendCaps = pCaps->SrcBlendCaps;

	pCaps->AlphaCmpCaps = pCaps->ZCmpCaps;

	pCaps->ShadeCaps = D3DPSHADECAPS_COLORGOURAUDRGB       
		|  D3DPSHADECAPS_SPECULARGOURAUDRGB
		|  D3DPSHADECAPS_ALPHAGOURAUDBLEND 
		|  D3DPSHADECAPS_FOGGOURAUD        ;

	pCaps->TextureCaps = D3DPTEXTURECAPS_PERSPECTIVE         
		|  D3DPTEXTURECAPS_POW2                
		|  D3DPTEXTURECAPS_ALPHA               
		|  D3DPTEXTURECAPS_SQUAREONLY          
		|  D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE
		|  D3DPTEXTURECAPS_ALPHAPALETTE        
		|  D3DPTEXTURECAPS_NONPOW2CONDITIONAL  
		|  D3DPTEXTURECAPS_PROJECTED           
		|  D3DPTEXTURECAPS_CUBEMAP             
		|  D3DPTEXTURECAPS_VOLUMEMAP           
		|  D3DPTEXTURECAPS_MIPMAP              
		|  D3DPTEXTURECAPS_MIPVOLUMEMAP        
		|  D3DPTEXTURECAPS_MIPCUBEMAP          
		|  D3DPTEXTURECAPS_CUBEMAP_POW2        
		|  D3DPTEXTURECAPS_VOLUMEMAP_POW2      
		|  D3DPTEXTURECAPS_NOPROJECTEDBUMPENV  ;



	return HRESULT_Proc(S_OK); 
};