--[[------------------------------------------------------------------------------------------------------------------
"Бармен" в баре "С.Т.А.Л.К.Е.Р."
Чугай Саша

Сделать:
    - ждёт актёра по дороге к комнатке
    - расстояние USE
    - сказать про запутывания
    - настоящие звуки
    - анимации
    - двери
--------------------------------------------------------------------------------------------------------------------]]

local prop_base           = xr_evaluators_id.chugai_barman_base
local prop_barman         = prop_base
local prop_bar            = prop_base + 1 -- тру = за стойкой, фолс = в комнате
local prop_actor_is_close = prop_base + 2

local act_base          = xr_actions_id.chugai_barman_base
local act_bar           = act_base
local act_small_room    = act_base + 1
local act_look_at_actor = act_base + 2

local change_act_timeout

local subtheme_misc      = 1
local subtheme_idle_bar  = 2
local subtheme_idle_room = 3

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "нужно стоять за стойкой" = "не нужно быть в комнатке"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_bar" ( property_evaluator )

function evaluator_bar:__init( name ) super()
end

function evaluator_bar:evaluate()
    return this.near_bar
end

---------------------------------------------------------------------------------------------------------------------
-- Эвалуатор свойства "актёр близко"
---------------------------------------------------------------------------------------------------------------------
class "evaluator_actor_is_close" ( property_evaluator )

function evaluator_actor_is_close:__init( name, barman ) super()
    self.barman = barman
end

function evaluator_actor_is_close:evaluate()
    if not the_actor then
        the_actor = level.actor()
    end

    return the_actor ~= nil and the_actor:position():distance_to_sqr( self.barman:position() ) < 6.25
end

----------------------------------------------------------------------------------------------------------------------
-- Действие "за стойкой"
----------------------------------------------------------------------------------------------------------------------
class "action_bar" ( action_base )

function action_bar:__init( name, bar_point )  super ( nil, name )
    self.bar_point = bar_point
end

function action_bar:initialize()
    action_base.initialize( self )

    self.object:set_sight               ( look.direction, this.path:point( self.bar_point + 1 ):sub( self.object:position() ), 0 )
    self.object:set_movement_type       ( move.stand )
    self.object:set_mental_state        ( anim.free )
    self.object:set_item                ( object.idle, nil )

    self.turn_end = game.time() + 12000

    -- close door
end

function action_bar:execute()
    action_base.execute( self )

    if self.turn_end and self.turn_end < game.time() then
        for i = 1, math.random( 1 ) + 1 do 
            self.object:add_animation( "komandir_4", true )
        end

        self.turn_end = nil
    end

    if self.object:animation_count() == 1 then
        self.bar_point = this.SendToBar( self.object, self.bar_point )
    end

    xr_sounds.set_sound( self.object, this.snds_idle_bar )

    this.check_change( self.object )
end

function action_bar:finalize()
    action_base.finalize( self )
end

----------------------------------------------------------------------------------------------------------------------
-- Действие "в каморке"
----------------------------------------------------------------------------------------------------------------------
class "action_small_room" ( action_base )

function action_small_room:__init( name )  super ( nil, name )
end

function action_small_room:initialize()
    action_base.initialize( self )

    self.object:set_sight               ( look.direction, vector():set( 1, 0, 0 ), 0 )
    self.object:set_movement_type       ( move.stand )
    self.object:set_mental_state        ( anim.free )
    self.object:set_item                ( object.idle, nil )

    self.turn_end = game.time() + 25000

    self.object:enable_talk()
    self.object:set_start_dialog( "barman_room" )

    --close door
end

function action_small_room:execute()
    action_base.execute( self )

    if self.turn_end < game.time() then
        if self.object:animation_count() < 3 then
            self.object:add_animation( "komandir_4", true )
        end

        if not self.object:is_talking() then
            xr_sounds.set_sound( self.object, this.snds_idle_room )
        end
    end

    this.check_change( self.object )
end

function action_small_room:finalize()
    action_base.finalize( self )

    self.object:disable_talk()
end

----------------------------------------------------------------------------------------------------------------------
-- Действие "втыкать на актёра"
----------------------------------------------------------------------------------------------------------------------
class "action_look_at_actor" ( action_base )

function action_look_at_actor:__init( name )  super ( nil, name )
end

function action_look_at_actor:initialize()
    action_base.initialize( self )

    self.object:clear_animations()

    self.object:set_movement_type       ( move.stand )
    self.object:set_mental_state        ( anim.free )
    self.object:set_item                ( object.idle, nil )

    self.object:enable_talk()
    self.object:set_start_dialog( "barman_bar" )

    xr_sounds.play_sound( self.object, 0, "barman", subtheme_misc, 2, 1 )
end

function action_look_at_actor:execute()
    action_base.execute( self )
    
    self.object:set_sight( look.direction, vector():set( the_actor:position() ):sub( self.object:position() ), 0 )

--    xr_sounds.set_sound( self.object, this.snds_idle_bar )

    this.check_change( self.object )
end

function action_look_at_actor:finalize()
    action_base.finalize( self )

    self.object:disable_talk()
end

----------------------------------------------------------------------------------------------------------------------
function check_change( npc )
    if change_act_timeout and change_act_timeout < game.time() then
        if this.near_bar then
            xr_position.setPosition( npc, this.path:level_vertex_id( 8 ) )
            xr_sounds.play_sound( npc, 0, "barman", subtheme_misc, 1, random_choice( 8, 9 ) )
        else
            this.SendToBar( npc )
        end

        npc:set_sight( look.danger, nil, 0 )

        this.near_bar = not this.near_bar
        change_act_timeout = nil
    end
end

function SendToBar( npc, old_point )
    local p

    repeat
        p = math.random( 0, 3 ) * 2
    until p ~= old_point

    xr_position.setPosition( npc, this.path:level_vertex_id( p ) )

    return p
end
----------------------------------------------------------------------------------------------------------------------

function add_to_binder( npc )
    this.path = patrol( "way_barman" )

    this.near_bar = true
    xr_motivator.storage[npc:id()].state.dist = 0.01
    local p = this.SendToBar( npc )

    -- sounds
    this.snds_idle_bar  = xr_sounds.create_sound_constructor( "barman", subtheme_idle_bar )
    this.snds_idle_room = xr_sounds.create_sound_constructor( "barman", subtheme_idle_room )

    -- GOAP

    local manager = npc:motivation_action_manager()

    manager:add_evaluator( prop_barman,         const_evaluator( true ) )
    manager:add_evaluator( prop_bar,            this.evaluator_bar( "property_barman_bar" ) )
    manager:add_evaluator( prop_actor_is_close, this.evaluator_actor_is_close( "property_actor_is_close", npc ) )
    
    local action = this.action_look_at_actor( "action_look_at_actor" )
    action:add_effect( world_property( prop_actor_is_close, false ) )
    manager:add_action( act_look_at_actor, action )

    action = this.action_bar( "action_bar", p )
    action:add_precondition( world_property( xr_evaluators_id.position, true ) )
    action:add_precondition( world_property( prop_bar, true ) )
    action:add_precondition( world_property( prop_actor_is_close, false ) )
    action:add_effect( world_property( prop_barman, false ) )
    manager:add_action( act_bar, action )

    action = this.action_small_room( "action_small_room" )
    action:add_precondition( world_property( xr_evaluators_id.position, true ) )
    action:add_precondition( world_property( prop_bar, false ) )
    action:add_effect( world_property( prop_barman, false ) )
    manager:add_action( act_small_room, action )

    action = manager:action( stalker_ids.action_puzzle_solver )
    action:add_precondition( world_property( prop_barman, false ) )
end

----------------------------------------------------------------------------------------------------------------------

function to_small_room( barman, actor )
    change_act_timeout = game.time() + 20000
--    open_door
end

function from_small_room( barman, actor )
    change_act_timeout = game.time() + 20000
--  Открывай!
--  open_door
end
