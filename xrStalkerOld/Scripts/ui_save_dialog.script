-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.8

function main()
	local dlg = ui_save_dialog.save_dialog()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
	
end

class "save_dialog" (CUIScriptWnd)

function save_dialog:__init() super()		
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function save_dialog:__finalize()

end

function save_dialog:FillList()
	local flist = getFS():file_list_open_ex("$game_saves$",FS.FS_ListFiles,"*.sav")
	local f_cnt = flist:Size()
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)			
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - 4))
		local date_time = "[" .. file:Modif() .. "]"
		--menu_item =  .. 
		self:AddItemToList(file_name, date_time)
	end
end

function save_dialog:InitControls()
	self:Init(0,0,1024,768)
	
	self.list_file_font = GetFontMedium()
	self.list_date_font = GetFontMedium()
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_save_dlg.xml")
	
	local ctrl
	
	local st = xml:InitStatic("back_video", self)
	math.randomseed(time_global())
	local vid_file ="ui\\ui_vid_back_0" .. math.random(1,4)
	st:InitTexture(vid_file)
	
	xml:InitStatic("background",				self)	
	self.form = xml:InitStatic("form",			self)
	
	xml:InitStatic("form:caption",				self.form)
	
	ctrl = xml:InitEditBox("form:edit", 		self.form)
	self:Register(ctrl, "edit_filename")
	
	xml:InitFrame("form:list_frame",			self.form)

	ctrl = xml:InitList("form:list", 			self.form)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")
		
	ctrl = xml:Init3tButton("form:btn_save",	self.form)	
	self:Register(ctrl, "button_ok")
	
	ctrl = xml:Init3tButton("form:btn_cancel",	self.form)
	self:Register(ctrl, "button_cancel")	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
end

function save_dialog:InitCallBacks()
    // main frame buttons
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED, 			self.OnButton_ok_clicked,		self)
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED, 			self.OnButton_cancel_clicked,	self)
	// message box buttons
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,					self)
	// list box click
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			self.OnListItemClicked,			self)
end

function save_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	local edit_box = self:GetEditBox("edit_filename")
	local item_id = list_box:GetFocusedItem()
	local item = list_box:GetItem(item_id)
	
	local item_text = item:GetText()
	edit_box:SetText(item_text)
end

function save_dialog:OnMsgYes()
	self:SaveFile(self.new_save)
end

function save_dialog:OnButton_ok_clicked()
	-- prepare message box
	local message_box = self:GetMessageBox("message_box")
	local main_frame = self:GetFrameWindow("main_frame")	
	
	-- Get file name
	local edit_box = self:GetEditBox("edit_filename")
	self.new_save = edit_box:GetText()
	
	// check for empty name
	if string.len(self.new_save) == 0 then
		self.message_box:Init("message_box_empty_file_name")		
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end
	
	// check for match name
	local f = getFS()
	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local file_struct = f:exist("$game_saves$", self.new_save .. ".sav" )

	if file_struct ~= nil then
		self.message_box:Init("message_box_file_already_exist")
		self:GetHolder():start_stop_menu(self.message_box, true)
		
		--self.stub:Show(true)
		flist:Free()	
		return
	end
	flist:Free()	
	self:SaveFile(self.new_save)
	self:GetHolder():start_stop_menu(self, true)
	self.owner:Show(true)
end

function save_dialog:OnButton_cancel_clicked()
	self:GetHolder():start_stop_menu(self,true)	
	self.owner:Show(true)
end

function save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
   ui_base_dialog.base_dialog.OnKeyboard(self,dik,keyboard_action)
     
   DIK_RETURN = 28
   WINDOW_KEY_PRESSED = 6

	if dik == DIK_RETURN and keyboard_action == WINDOW_KEY_PRESSED then
		self:OnButton_ok_clicked()
		self.owner:Show(true)
	end
   
	return true
end

function save_dialog:AddItemToList(file_name, date_time)	
	local new_item = CUIListItemPair()
	new_item:SetAutoDelete(true)
	
	new_item:SetTextFileName(file_name)
	new_item:SetTextDateTime(date_time)
	new_item:SetFontFileName(self.list_file_font)
	new_item:SetFontDateTime(self.list_date_font)

	local list_box = self:GetListWnd("list_window")
	
	list_box:AddItem(new_item)	
end

function save_dialog:SaveFile(fileName)
	if nil~= fileName then
		local console = get_console()
		console:execute("save " .. fileName)
	end
end

