module( "m_Eat" )
module( "m_Walk" )
module( "m_WalkPoint" )
module( "m_garbage" )

--------------------------------------------------------------------------------
class "stateRest"
function stateRest:__init( script_name, mem )
    self.scr_name      = script_name
    self.memory        = mem

    self.Walk          = m_walk.stateWalk  ( self.scr_name, self.memory )
    self.Eat           = m_eat.stateEat    ( self.scr_name, self.memory )

	self.curState      = nil
    self.need_reselect = true

end

--------------------------------------------------------------------------------

function stateRest:initialize()
	self.need_reselect = true
end

--------------------------------------------------------------------------------

function stateRest:finalize()
	self.curState:finalize()
    self.curState = nil
end

--------------------------------------------------------------------------------

function stateRest:execute()

--	if( self.memory.npc:get_corpse() ) then
--    	printf( "Corpse is. Satiety = %f", self.memory.npc.satiety )
--    else
--    	printf( "Coprse nil. Satiety = %f", self.memory.npc.satiety )
--    end

	if( self.need_reselect ) then
		self:select_state()
        self.need_reselect = false
    end

	self.curState:execute()

	if( self.curState:check_completed() ) then
    	self.need_reselect = true
    end

    --Если текущее состояние не еды и мы должны запустить состояние еды
    if( self.curState:id() ~= self.Eat:id() ) then
    	if( self.Eat:can_start() ) then
           printf( "CAn start" )
           self.need_reselect = true
    	end
    end

end

--------------------------------------------------------------------------------

function stateRest:select_state()
	if( self.Eat:can_start() ) then
    	self:set_state( self.Eat )
        return
    end

    self:set_state( self.Walk )

end

--------------------------------------------------------------------------------

function stateRest:set_state( new_state )
	if( self.curState ) then
    	self.curState:finalize()
    end

    self.curState = new_state
    self.curState:initialize()

end

--------------------------------------------------------------------------------

function stateRest:can_start()
	return true
end

--------------------------------------------------------------------------------

function stateRest:check_complited()
	return ( self.memory.enemy ~= nil )
end

--------------------------------------------------------------------------------

function stateRest:update()
	if( self.curState ) then self.curState:update() end
end

--------------------------------------------------------------------------------

function stateRest:id()
	return 2
end

--==============================================================================
--------------------------------------------------------------------------------
class "stateRestPoint" ( stateRest )
function stateRestPoint:__init( script_name, mem, position_o, radius_o ) super( script_name, mem )
    self.Walk          = m_walkpoint.stateWalkPoint( self.scr_name, self.memory, position_o, radius_o )
end


--==============================================================================

class "stateGarbageRest" ( stateRest )
function stateGarbageRest:__init( script_name, mem, way_o, dir ) super( script_name, mem )
    self.Walk       = m_garbage.stateGarbageWalk( script_name, mem, way_o, dir )
end

--==============================================================================

class "stateGarbageBoarRest" ( stateRest )
function stateGarbageBoarRest:__init( script_name, mem, way_o, dir ) super( script_name, mem )
    self.Walk       = m_garbage.stateGarbageBoarWalk( script_name, mem, way_o, dir )
end
