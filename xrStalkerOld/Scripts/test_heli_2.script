
class "HeliManager";
function HeliManager:__init()
end

function HeliManager:__finalize()
end



function HeliManager:Init()
   self.m_heliGO = level.debug_object( "helicopter" )
   self.m_heliObject = self.m_heliGO:get_helicopter()
   self.m_stay_point = self.m_heliGO:position()
   self.m_heliGO:set_callback(callback.helicopter_on_point, self.HeliOnPoint, self)
   self.m_heliGO:set_callback(callback.helicopter_on_hit, self.HeliOnHit, self)
   self.m_heliObject.m_use_rocket_on_attack 	= false
   self.m_heliObject.m_use_mgun_on_attack  		= true
   self.m_heliObject.m_min_mgun_dist = 10;
   self.m_heliObject.m_max_mgun_dist = 10000;
--   self.m_heliObject:SetOnPointRangeDist(20)
   level.map_add_object_spot(self.m_heliGO:id(),"heli_location","heli-hunter");
end


function HeliManager:HeliOnHit(power, impulse, hit_type, hitter_id)
--   if self.m_heliObject:GetState() == CHelicopter.eMovingByAttackTraj then
--      return --already on attack trajectory
--   end

--	self.m_heliObject:ClearEnemy(nil)
	
   local enemy = level.object_by_id( hitter_id )
   if enemy == nil then 
      return
   end
--	self.m_heliObject:SetEnemy(enemy)
--	self.m_heliObject:LookAtPoint(enemy:position(),true)

--    self.m_heliObject:SetDestPosition(enemy:position())
	self.m_heliObject:SetSpeedInDestPoint(25.0); --m/sec (in dest point)
	self.m_heliObject:SetMaxVelocity(25.0) -- m/sec (max)
	self.m_heliObject:GoPatrolByRoundPath(enemy:position(), 50, true)
--	self.m_heliObject:SetSpeedInDestPoint(5.0); --m/sec (in dest point)
--	self.m_heliObject:GoPatrolByPatrolPath("heli_way_2",0)
	self.m_heliObject:LookAtPoint(enemy:position(),true)
--	self.m_heliObject:SetCurrVelocity(30.0) -- m/sec (max)
end



function HeliManager:HeliOnPoint(distance, position, path_idx)

--   if self.m_heliObject:GetState() == CHelicopter.eMovingToPoint then
   --select next point
--   end

--   if self.m_heliObject:GetState() == CHelicopter.eMovingByAttackTraj then
--      self.m_heliObject:GoPatrolByPatrolPath("heli_way_1",0)  --0==from_idx
--      self.m_heliObject:SetCurrVelocity(25.0)  -- m/sec (max)
--   end
 printf("---heli on point idx = %d, distance=%f", path_idx, distance)
end

function HeliManager:Start()
      self.m_b_exploded             = false
      self.m_b_prepered_to_die   	= false
      self.m_start_lighting 		= 0

	while true do
   local state = self.m_heliObject:GetState()
   if state == CHelicopter.eAlive then
--      self.m_heliObject:GoPatrolByPatrolPath("heli_way_1",0) --0==from_idx
--      self.m_heliObject:SetCurrVelocity(25.0) -- m/sec (max)
--      printf("------------HELI GO----------------------")
	  
   end

   local health = self.m_heliObject:GetfHealth()
   if self.m_b_prepered_to_die==false and state ~= CHelicopter.eDead and  health < 30.0 then
         self.m_b_prepered_to_die = true
         self.m_heliObject:PrepareDie()
   end

   if state ~= CHelicopter.eDead and health <= 0.0 then
         printf("------------DIE----------------------")
		self.m_heliObject:Die()
   end

   if (self.m_b_exploded==false) and (state == CHelicopter.eDead)  then
      local altitude = self.m_heliObject:GetRealAltitude()
      printf("---altitude = %f", altitude)
      if altitude < 3.0 then
      self.m_b_exploded = true
         printf("------------EXPLODE----------------------")
         self.m_heliObject:Explode()
         self.m_heliObject:TurnLighting(true)
         self.m_start_lighting = device():time_global()
      end
   end

   if (self.m_b_exploded==true) and (self.m_start_lighting~=0) and (device():time_global()-self.m_start_lighting>15000)  then		
         self.m_heliObject:TurnLighting(false)
         self.m_start_lighting = 0
   end

   wait()
   end
end


function main()

local heli_mngr = HeliManager()
   printf("------------HELI INIT----------------------")
heli_mngr:Init()
   printf("------------HELI START----------------------")
heli_mngr:Start()

--		heli:heli_go_by_patrol_path( "heli_way_1" )
end
