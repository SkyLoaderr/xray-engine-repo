module("monsters")

function main()
	local trader = Trader ( "escape_trader", "trader_zone", script_name())

	while(true) do
		trader:process()
		wait()
	end
end

local actor_id   = 0
local spinka     = 1
local idle       = 2
local chitaet    = 3

local pause_time = 20000   //'Время, через которое торговец говорит, что-то игроку, который не ушел


local Trader_Hello1  = "\script_replics\\trader\\trader_script1a_1"
local Trader_Hello2  = "\script_replics\\trader\\trader_script1a_2"
local Trader_Hello3  = "\script_replics\\trader\\trader_script1a_3"
local Trader_Hello4  = "\script_replics\\trader\\trader_script1a_4"
local Trader_Hello5  = "\script_replics\\trader\\trader_script1a_5"


local Trader_Trade1   = "\script_replics\\trader\\trader_script1c_1"
local Trader_Trade2   = "\script_replics\\trader\\trader_script1c_2"
local Trader_Trade3   = "\script_replics\\trader\\trader_script1c_3"
local Trader_Trade4   = "\script_replics\\trader\\trader_script1c_4"
local Trader_Trade5   = "\script_replics\\trader\\trader_script1c_5"
local Trader_Trade6   = "\script_replics\\trader\\trader_script1c_6"
local Trader_Trade7   = "\script_replics\\trader\\trader_script1c_7"
local Trader_Trade8   = "\script_replics\\trader\\trader_script1c_8"
local Trader_Trade9   = "\script_replics\\trader\\trader_script1c_9"

local Trader_Wait1   = "\script_replics\\trader\\trader_script1b_1"
local Trader_Wait2   = "\script_replics\\trader\\trader_script1b_2"
local Trader_Wait3   = "\script_replics\\trader\\trader_script1b_3"
local Trader_Wait4   = "\script_replics\\trader\\trader_script1b_4"
local Trader_Wait5   = "\script_replics\\trader\\trader_script1b_5"
local Trader_Wait6   = "\script_replics\\trader\\trader_script1b_6"


local Trader_goobBay = "\script_replics\\trader\\trader2a"

local Come_To_Mee1    = "\script_replics\\trader\\trader1a"
local Come_To_Mee2    = "\script_replics\\trader\\trader1b"

local Story1          = "\script_replics\\trader\\trader_monolog1"
local Story2          = "\script_replics\\trader\\trader_monolog2"

local Get_Weapon1      = "\script_replics\\trader\\trader3a"   //'Куда ты без оружия
local Get_Weapon2      = "\script_replics\\trader\\trader3b"   //'Подойди, я тебе что-то подкину
local Get_Weapon3      = "\script_replics\\trader\\trader3c"   //'Проветришся, заходи

//'Событие
local non            = 0
local actor_enter    = 1
local actor_exit     = 2
local end_trade      = 3


//'Вещи которые принесли
local box_with_post  = 1     		//'Коробка с блокпоста


class "Trader"
function Trader:__init( npc_o, zone_o, scr_name_o )
    self.npc_name	 = npc_o
    self.npc         = level.object( self.npc_name )
	self.zone_name   = zone_o
    self.zone        = level.object( self.zone_name )
    self.script_name = scr_name_o

    self.mem         = {
    					npc			  = nil,
    					state         = idle,
    					new_state     = idle,
                        event         = non,
                        bring         = non,               //'ЗАпоминает тут что стоещее принес актер во время обмена
    					last_anim     = "idle",
    					anim_snd      = nil,
                        repeats       = 0,
                        all_anim      = false,
    					trade         = false,
    					entered       = false,
    					exchange      = false,
    					exit_time     = device():time_global() - 20000,
                        enter_time    = device():time_global(),
                        time          = device():time_global()-8000,   //'Использутеся для различных целей
                        need_reset    = false,
                        need_reselect = true,
                        play_sound	  = false
                        }
	self.curState    = nil

    self.on_line     = false

end

function Trader:on_enter( zone, obj )
    if( level.actor() == nil ) then return end

    if( obj:id() == level.actor():id() ) then
        printf( "Actor %s enter in zone", obj:name() )
        self.mem.entered    = true
        self.mem.exchange   = false
        self.mem.enter_time = device():time_global()
        self.mem.time       = self.mem.enter_time
        self.mem.repeats    = 0
        self.mem.event      = actor_enter
//'     reset_action( self.npc, self.script_name )
    end
end

function Trader:on_exit( zone, obj )
    if( level.actor() == nil ) then return end

    if( obj:id() == level.actor():id() ) then
        printf( "Actor %s exit from zone", obj:name() )
        self.mem.entered    = false
        self.mem.repeats    = 0
        self.mem.exit_time  = device():time_global()
        self.mem.event      = actor_exit
    end
end


function Trader:start_trade()
    self.mem.trade    = true
    reset_action( self.npc, self.script_name )
	self.mem.anim_snd  = nil
end

function Trader:end_trade()
    self.mem.trade    = false
    self.mem.time     = device():time_global()
    self.mem.event    = end_trade
    reset_action( self.npc, self.script_name )
end

function Trader:on_trade( obj, type )
	self.mem.exchange   = true
end

//'Проверка не перешли ли мы в InLine( OffLien)
function Trader:is_on_line()
    if( self.on_line ) then
        if( level.object( self.npc_name ) ~= nil and level.object( self.zone_name ) ~= nil ) then return end
        printf( "Off line ________________________________________trader" )
        self.on_line  = false
        self.npc      = nil
        self.mem.npc  = nil
    else
        if( level.object( self.npc_name ) == nil or level.object( self.zone_name ) == nil ) then return end
        printf( "In line ________________________________________trader" )
        self.on_line  = true
        self.npc      = level.object( self.npc_name )
        self.npc:script( true, self.script_name )
        self.mem.npc  = self.npc
        self.zone     = level.object( self.zone_name )
        self.zone:set_callback( self, "on_enter", true )
        self.zone:set_callback( self, "on_exit", false )
        self.npc:set_callback ( self, "start_trade",true)    //' start
        self.npc:set_callback ( self,"end_trade",false)      //' end
        self.npc:set_trade_callback ( self, "on_trade" )
    end
end

function Trader:process()

        self:is_on_line()

        if( self.on_line ) then
			if( self.mem.need_reselect ) then
            	self:select_state()
                self.mem.need_reselect = false
            end

            self.curState:execute()

            if( self.mem.need_reset ) then
                reset_action( self.npc, self.script_name )
                self.mem.need_reset = false
            end

            if( self.curState:check_completed() ) then
            	self.mem.need_reselect = true
            end
            self:animation()
        end
end


function Trader:animation()
    if( self.npc:action() ) then return end

//'    printf( "New animation" )

     //'Если тело торговца для новой анимации не надо двигать, то проигруем анимацию, в противном случае двигаем тело
    if( self.mem.state == self.mem.new_state ) then

        if( self.mem.anim_snd == nil ) then                 //'Проигруем анимацию без звука
            action( self.npc, anim( self.mem.last_anim ), cond( cond.anim_end ) )
			self.mem.play_sound = false						//'Звук не проигруем
//'            printf( "Anim   %s", self.mem.last_anim )
            self.mem.repeats = self.mem.repeats - 1
        else                                           //'Проигруем анимацию со звуком
	        if( self.mem.all_anim ) then                        //'Анимация, где двигается все тело
    	        action( self.npc, anim( self.mem.last_anim ), sound( self.mem.anim_snd, "bip01_head"),
        		                                                    cond( cond.sound_end ) )
            	self.mem.all_anim   = false
            else
	            action( self.npc, anim( self.mem.last_anim ), sound( self.mem.anim_snd, "bip01_head", MonsterSpace.head_anim_normal ),
    	                                                            cond( cond.sound_end ) )
     		end

            self.mem.play_sound = true						//'На данный момент проигруем звук
            self.mem.anim_snd = nil
            self.mem.repeats = 0                           //'После звука выбираем новую анимацию, старую не повторяем
//'            printf( "Play anim with sound. Phrase %s", self.mem.anim_snd )
//'            printf( "Play anim with sound. Anim   %s", self.mem.last_anim )
        end
    else
     //'Устанавливаем торговца в нужное положение
        if( self.mem.state == spinka ) then
            action( self.npc, anim( "spinka_idle" ), cond( cond.anim_end ) )
            self.mem.state = idle
        elseif( self.mem.state == idle ) then
            if( self.mem.new_state == spinka ) then
                action( self.npc, anim( "idle_spinka" ), cond( cond.anim_end ) )
                self.mem.state = spinka
            else
                action( self.npc, anim( "idle_chitaet" ), cond( cond.anim_end ) )
                self.mem.state = chitaet
            end
        else          //'state == chitaet
            action( self.npc, anim( "chitaet_idle" ), cond( cond.anim_end ) )
            self.mem.state = idle
        end
        
        self.mem.play_sound = false							//'Звук не проигруем
    end

end

function Trader:select_state()
	if( monsters.ini.trader_start ) then
    	self.curState = t_OnStart( self.mem, self.npc:position() )
        return
    end

    self.curState = nil
    self.curState = t_Life( self.mem, self.npc:position() )
end


--==============================================================================
--==============================================================================
local come_to_me = 1
local telling    = 2
local waiting    = 3

class "t_OnStart"
function t_OnStart:__init( memory, pos )
	self.mem 	     = memory
    self.curState    = come_to_me
    self.position    = pos
    self.take_weapon = false
    self.mem.entered = true
end

function t_OnStart:execute()
    self:select_state()
	self:sound()
    self:set_anim()
end

function t_OnStart:sound()

    if( self.mem.event == actor_exit ) then
        self.mem.anim_snd   = random_choice( Get_Weapon1, Get_Weapon2 )
        self.mem.need_reset = true
        self.mem.time       = device():time_global()
        self.mem.event = non
    end

    if( self.mem.entered == false ) then return end

    if( self.curState == waiting_come ) then
        if( device():time_global() > self.mem.time + 3000 ) then
//'            printf( "Device time %d   need_time %d", device():time_global(), self.mem.time + 10000)
            self.mem.anim_snd  =  Come_To_Mee2
            self.mem.time      = device():time_global() + math.random(5000, 15000)
        end
    end

    if( self.curState == come_to_me ) then
        if( device():time_global() > self.mem.time + 10000 ) then
//'            printf( "Device time %d   need_time %d", device():time_global(), self.mem.time + 10000)
            self.mem.anim_snd  = Come_To_Mee1
            self.mem.time      = device():time_global()
            self.curState      = waiting_come
        end
    end

    if( self.curState == telling and self.mem.play_sound == false) then					//Пришло время говорить фразу, 
//'        printf( "Tell" )
        self.mem.anim_snd  = Story1
        self.curState      = waiting
        self.mem.last_anim = "vstuplenie"
        self.mem.all_anim  = true
    end

    if( self.mem.event == end_trade ) then
    	self.mem.anim_snd = Get_Weapon3
        self.mem.time     = device():time_global()
        self.mem.event    = non
    end

end

function t_OnStart:select_state()
    //'Оружие взяли
    if( self.mem.event == end_trade and monsters.ini.trader_start ) then
        monsters.ini.trader_start = false   //'Запоминаем, уже работали( Для того, чтоб когда скрипт заново был загружен, не работал сначала
        self.take_weapon = true
    end


    if( self.curState == come_to_me or self.curState == waiting_come ) then
        if( self.position:distance_to( get_actor():position() ) < 2.5 ) then
        	self.curState = telling
        end
    end
end

function t_OnStart:set_anim()

	if( self.mem.repeats == 0 or self.mem.anim_snd ~= nil ) then
        if( self.mem.anim_snd == nil ) then
	        self.mem.last_anim  = "idle"
//'            printf( "idle animation " )
            self.mem.repeats    = 3
        else
	        self.mem.repeats    = 0
            if( self.mem.all_anim == false ) then						//'Если не проигруем специфическую анимацию
                self.mem.last_anim  = "idle_non_stop"
            end
            self.mem.need_reset = true
            //'printf(" Non stop animation. Sound =  %s", self.mem.anim_snd )
        end
   	    self.mem.new_state  = idle
	end
end

function t_OnStart:check_completed()
	if( self.take_weapon and device():time_global() > self.mem.time + 2000 ) then
        monsters.ini.trader_start = false
        return true
    end

    if( self.mem.entered == false and device():time_global() > self.mem.exit_time + 30000 ) then
        monsters.ini.trader_start = false
    	return true
    end

    return false
end


--==============================================================================
--==============================================================================
class "t_Life"
function t_Life:__init( memory, pos )
	self.mem	  		= memory
    self.mem.time 		= device():time_global()
    self.mem.enter_time = device():time_global()
    self.choise   		= 2
    self.phrase   		= 2
//'    printf( "Init t_Life" )
    self.mem.repeats 	= 0
    self.mem.need_reset = true
    self.position       = pos
end

--------------------------------------------------------------------------------

function t_Life:execute()
    self:set_anim()
end

--------------------------------------------------------------------------------

function t_Life:check_completed()
	return false
end

--------------------------------------------------------------------------------

local rnd = 0
function t_Life:set_anim()
    if( self.mem.entered ) then                           //'Актер вошел
        //'Уже проиграли нужное количество раз анимацию, выбираем новую
      if( self:sound_with_anim() == false ) then   //'Функция sound_with_anim возвращает true если она сама установила
         if( self.mem.trade ) then
         	self.mem.last_anim = "idle"
            self.mem.new_state = idle
            self.mem.repeats = 3
            return true
		end
         if( self.mem.repeats < 1 ) then             //'нуждую анимацию и звук, в противном случае false,  и нам надо установить анимацию
            //'Актер уже целую минуту тут
//'            printf( "Device time = %d  enter_time %d", device():time_global(), self.mem.enter_time + 60000 )
            if( device():time_global() > self.mem.enter_time + 60000 ) then

                if( self.choise ~= 5 ) then
                	self.mem.last_anim = "spinka"
                    self.mem.new_state = spinka
                    self.mem.repeats = math.random( 8, 14 )
                    self.mem.choise = 5
                else
                    self.mem.last_anim = "idle_2"
                    self.mem.new_state = spinka
                    self.mem.repeats = 1
                    self.mem.choise = 6
                end
            else
                if( self.choise ~= 1 ) then
                     self.mem.last_anim = "idle"
                     self.mem.repeats   = math.random( 1, 2 )    //'cheshit, palci, zatylok
                     self.mem.new_state = idle
                     self.choise = 1
                else
                	rnd = math.random( 1, 4 )
                	--while( rnd == self.choise ) do   --Чтобы анимация не повторялась
                    --	 rnd = math.random( 1, 4 )
                    --	printf( "get random new. " )
                	--end
                	--self.choise    = rnd
                    self.choise    = 2
                	if( rnd == 1 ) then
                    	self.mem.last_anim = "idle_0"
                     	self.mem.repeats   = 1    //'cheshit, palci, zatylok
                     	self.mem.new_state = idle
                	elseif( rnd == 2 ) then
                     	self.mem.last_anim = "cheshit"
                     	self.mem.repeats   = 1
                     	self.mem.new_state = idle
                	elseif( rnd == 3 ) then
                     	self.mem.last_anim = "palci"
                     	self.mem.repeats   = math.random( 5, 8 )
                     	self.mem.new_state = idle
                	elseif( rnd == 4 ) then
                     	self.mem.last_anim = "zatylok"
                     	self.mem.repeats   = 1
                     	self.mem.new_state = idle
                	end
                end  //'self.choise ~= 1
      	 	end //'device():time_global() > self.mem.enter_time + 60000
		end //'self.mem.repeats < 1
      else
            self.choise         = 2            //'Это надо для того, чтоб после слов он сразу не начинал чесатся
      end //'self:sound_with_anim() == false
    else                                              //'Актер еще не вошел
    if( self:sound_with_anim() == false ) then
    //'Уже проиграли нужное количество раз анимацию, выбираем новую
        if( self.mem.repeats < 1 ) then
            self.choise = math.random( 1, 3 )
            if( self.choise == 1 ) then
                self.mem.last_anim = "chitaet"
                self.mem.repeats   = math.random( 6, 10 )
                self.mem.new_state = chitaet
            elseif( self.choise == 2 ) then
                self.mem.last_anim = "spinka"
                self.mem.repeats   = math.random( 6, 10)
                self.mem.new_state = spinka
            elseif( self.choise == 3 ) then
                self.mem.last_anim = "idle"
                self.mem.repeats   = math.random( 3, 8 )
                self.mem.new_state = idle
            end
        end
    end
    end
end

--------------------------------------------------------------------------------

function t_Life:sound_with_anim()

    //'Если идет торговля, то ничего не говорим
    if( self.mem.trade ) then return false end

    if( self.mem.entered == false ) then return false end

    if( self.mem.event == actor_enter and self.position:distance_to( get_actor():position() ) < 4.5 ) then
    //'Приветствие
--         if( self.mem.last_anim == "idle" ) then self.mem.need_reset  = true  end
         printf( "Hello" )

		 self.mem.anim_snd = random_choice( Trader_Hello1, Trader_Hello2, Trader_Hello3, Trader_Hello4, Trader_Hello5 )

         self.mem.last_anim  = "idle_non_stop"
         self.mem.new_state  = idle
         self.mem.repeats    = 2
         self.mem.time       = device():time_global()
         self.mem.event      = non
         return true
    end

    //'Если что-то принесли стоящее, говорим нужную фразу
    if( monsters.ini.bring_trader ~= non ) then
    	if( monsters.ini.bring_trader == box_with_post ) then               //'Принесли ящик с блок поста
        	self.mem.anim_snd 		  = Story2
	        self.mem.last_anim    	  = "vstuplenie_2"
            self.mem.all_anim     	  = true
	        monsters.ini.bring_trader = non
        	self.mem.event        = non
            self.mem.time         	  = device():time_global() + 30000
	        return true
        end
        self.mem.new_state    = idle
    end

    //'После торговли говорим некоторую фрузу
    if( self.mem.event == end_trade ) then
         if( self.mem.exchange ) then
         	self.mem.anim_snd  = random_choice( Trader_Trade1,  Trader_Trade2, Trader_Trade3, Trader_Trade4, Trader_Trade5, Trader_Trade7, Trader_Trade8 )
         else
         	self.mem.anim_snd  = random_choice( Trader_Trade6, Trader_Trade9 )
         end
         self.mem.repeats    = 2
		 self.mem.event      = non
         if( self.mem.state == idle ) then
         	self.mem.last_anim    = "idle_non_stop"
         else
            self.mem.last_anim    = "spinka_non_stop"
         end

         return true
    end
	//'Сколько можно тут стоять
    if( device():time_global() > self.mem.time + pause_time) then
         printf("talk")
         self.mem.anim_snd   = random_choice( Trader_Wait1, Trader_Wait2, Trader_Wait3, Trader_Wait4, Trader_Wait5, Trader_Wait6 )
         self.mem.repeats    = 1
         self.mem.time       = device():time_global()
         if( self.mem.state == idle ) then
            self.mem.last_anim = "idle"
         elseif( self.mem.state == spinka ) then
            self.mem.last_anim = "spinka_non_stop"
         end

         return true
    end

    return false
end


function action2(obj,...)
    local act = entity_action()
    local i = 1
    while true do
        if (arg[i] ~= nil) then
            act:set_action(arg[i])
        else
            break
        end
        i = i + 1
    end
    if (obj ~= nil) then
        obj:command(act,false)
    end
    return  entity_action(act)
end
