----------------------------------------------------------------------------------------------------------------------
--	Схема раненного
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wound" (property_evaluator) 
function evaluator_wound:__init(name, storage) super(nil, name)
    self.a = storage
end
function evaluator_wound:evaluate ()
	if self.a.wounded_set ~= true then return false end
	
	self.a.wound_manager:update()
	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() and
	   self.a.wound_manager.fight == "true"
	then
		return false
	end
	return self.a.wound_manager.state ~= "nil"
end    

class "evaluator_can_fight" (property_evaluator) 
function evaluator_can_fight:__init(name, storage) super(nil, name)
    self.a = storage
end
function evaluator_can_fight:evaluate ()
    return self.a.wound_manager.fight ~= "false"
end    

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_wounded" (action_base)
function action_wounded:__init(name, storage) super(nil, name)
    self.a = storage
end
function action_wounded:initialize ()
    action_base.initialize (self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self.sound = "nil"
	self.object:enable_talk()

	if self.a.help_start_dialog then
		printf( "WOUNDED set_start_dialog id=%s", self.a.help_start_dialog )
		self.object:set_start_dialog(self.a.help_start_dialog)
	end
end
function action_wounded:execute ()
    action_base.execute (self)
	wound_manager = self.a.wound_manager
	
	local victim = nil	
	if wound_manager.victim == "actor" then
		victim = db.actor
	elseif wound_manager.victim == "nil" then
		victim = nil
	else
		local sim = alife()
		if sim then
			victim = sim:story_object(victim)
		end
	end

	-- отправляем чудака в кавер.
	if wound_manager.cover == "true" then
		if self.pos == nil or self.vid == nil then
			local pt = self.object:safe_cover(self.object:position(), 20, 0)
			if pt then
				self.pos = pt:position()
				self.vid = pt:level_vertex_id()    	
				if self.object:accessible(self.vid) == false then
					local vtemp = vector():set(0, 0, 0); 
					self.vid, vtemp = self.object:accessible_nearest(self.pos, vtemp)
					self.pos = vtemp
				end
				self.object:set_node_evaluator        ()
				self.object:set_path_evaluator        ()
				self.object:set_desired_position      (self.pos)
				self.object:set_desired_direction     ()
				self.object:set_detail_path_type      (move.line)
				self.object:set_path_type             (game_object.level_path)
				self.object:set_dest_level_vertex_id  (self.vid)    
				state_mgr.set_state(self.object, "walk")
			end
			return
		else
			-- кавер выбран, просто туда идем
			if self.object:accessible(self.vid) == false then
				self.vid = nil
				return
			end
			printf("dist to cover [%s]", self.object:position():distance_to(self.pos))
			if self.object:position():distance_to_sqr(self.pos) > 1 then
				return
			end			
		end
	else
		self.pos = nil
		self.vid = nil
	end    

    



	
	local synsound = nil
	if wound_manager.state == "true" then
		local h = hit()
		h.power = 0
		h.direction = self.object:direction()
		h.bone = "bip01_spine"
		h.draftsman = db.actor
		h.impulse = 0
		h.type = hit.wound
		self.object:hit(h)		
	else
		-- является ли текущий звук синхронным для текущего стейта
		for k,v in self.a.syndata do
			if v.state == wound_manager.state and
			   v.sound == wound_manager.sound
			then
				synsound = wound_manager.sound
			end
		end	
		--жрание аптечек и прочей срани.
		if self.object:object("medkit") ~= nil then
			self.object:eat(self.object:object("medkit"))
		elseif self.object:object("bandage") ~= nil then
			self.object:eat(self.object:object("bandage"))
		end   		
		state_mgr.set_state(self.object, wound_manager.state, nil, nil, {look_object = victim}, nil, synsound)
	end

	if synsound == nil then
		-- нужно отыграть фоновый
		if self.sound ~= wound_manager.sound then
			self.sound = wound_manager.sound
			if self.sound == "nil" then
				xr_sound.set_sound(self.object, nil)
			else
				xr_sound.set_sound(self.object, wound_manager.sound)
			end
		end
	else
		-- нужно зарубить фоновый
		if self.sound ~= nil then
			self.sound = "nil"
			xr_sound.set_sound(self.object, nil)
		end
	end
	
	local tt = db.storage[self.object:id()]
	if tt.active_scheme and not self.object:is_talking() then
		if db.actor then
			if xr_logic.try_switch_to_another_section(self.object, tt[tt.active_scheme], db.actor) then
				return
			end
		end
	end
end    
function action_wounded:finalize ()
    action_base.finalize (self)
    self.object:disable_talk()
    xr_sound.set_sound(self.object, nil)
end    

----------------------------------------------------------------------------------------------------------------------
-- Class wound_manager
----------------------------------------------------------------------------------------------------------------------
class "Cwound_manager"
function Cwound_manager:__init(npc, storage)
	self.npc = npc
	self.a = storage
end
function Cwound_manager:update()
	hp	= 100*self.npc.health
	psy	= 100*self.npc.psy_health
	
--	printf("PSY [%s] HP [%s]", psy, hp)

	self.state, self.sound = self:process_psy_wound(psy)
	
	if self.state == "nil" and
	   self.sound == "nil"
	then
		-- проверяем на обычную раненость
		self.fight	= self:process_fight(hp)
		self.cover	= self:process_cover(hp)
		self.victim = self:process_victim(hp)
		self.state, self.sound = self:process_hp_wound(hp)
	else
		-- устанавливаем пси раненость
		self.fight = "false"
		self.cover = "false"
		self.victim = "nil"
	end	
--	printf("f[%s]c[%s]v[%s]", utils.to_str(self.fight), utils.to_str(self.cover), utils.to_str(self.victim))
--	printf("st[%s]so[%s]", utils.to_str(self.state), utils.to_str(self.sound))
end
function Cwound_manager:process_fight(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_fight, hp)
	if key ~= nil then
		if self.a.hp_fight[key].state then
			return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_fight[key].state))
		end
	end		
	return "true"
end
function Cwound_manager:process_cover(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_cover, hp)
	if key ~= nil then
		if self.a.hp_cover[key].state then
			return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_cover[key].state))
		end
	end		
	return "true"
end
function Cwound_manager:process_victim(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_victim, hp)
	if key ~= nil then
		if self.a.hp_victim[key].state then
			return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_victim[key].state))
		end
	end		
	return "nil"
end
function Cwound_manager:process_hp_wound(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_state, hp)
	if key ~= nil then
		local r1,r2
		if self.npc:see(db.actor) then
			if self.a.hp_state_see[key].state then
				r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].state)
			end
			if self.a.hp_state_see[key].sound then
				r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].sound)
			end
		else
			if self.a.hp_state[key].state then
				r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].state)
			end
			if self.a.hp_state[key].sound then
				r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].sound)
			end
		end
		return tostring(r1),tostring(r2)
	end		
	return "nil","nil"
end
function Cwound_manager:process_psy_wound(hp)
	local key
	key = self:get_key_from_distance(self.a.psy_state, hp)
	if key ~= nil then
		local r1,r2
		if self.a.psy_state[key].state then
			r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].state)
		end
		if self.a.psy_state[key].sound then
			r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].sound)
		end
		return tostring(r1),tostring(r2)
	end		
	return "nil","nil"
end
function Cwound_manager:get_key_from_distance(t, hp)
	local key
	for k,v in t do
		if v.dist >= hp then 
			key = k 
		else
			return key
		end		
	end
	return key
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder (object, ini, scheme, section, st)

    local operators     = {}
    local properties    = {}
    
    properties["wounded"]		=   xr_evaluators_id.sidor_wounded_base
    properties["can_fight"]     =   xr_evaluators_id.sidor_wounded_base + 1
    
    operators["wounded"]        =   xr_actions_id.sidor_act_wounded_base + 0
    
    
    local manager = object:motivation_action_manager ()
    manager:add_evaluator (properties["wounded"],		this.evaluator_wound("wounded", st))
    manager:add_evaluator (properties["can_fight"],     this.evaluator_can_fight("can_fight", st))

    local action = this.action_wounded("wounded_action", st)
    action:add_precondition (world_property(stalker_ids.property_alive,		true))
    action:add_precondition (world_property(properties["wounded"],			true))
    action:add_precondition (world_property(stalker_ids.property_danger,	false))
    action:add_effect (world_property(properties["wounded"],        false))
    action:add_effect (world_property(stalker_ids.property_enemy,	false))
    action:add_effect (world_property(properties["can_fight"],		true))
   	manager:add_action      (operators["wounded"], action)
   
    action = manager:action (xr_actions_id.alife)
    action:add_precondition (world_property(properties["wounded"],			false))
    
    action = manager:action (stalker_ids.action_combat_planner)
    action:add_precondition (world_property(properties["can_fight"],       true))
end


------------
-- Вызывается только в начале на чтении логики, создает экшены, эвалуаторы и производит
-- первичную настройку.
function set_wounded(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.wound_manager = Cwound_manager(npc, st)
end
-- Вызывается на переключении на новую секцию. Производит вычитывание настроек из текущей секции.
function reset_wounded(npc, scheme, st, section)
	local wounded_section
	if scheme == nil or scheme == "nil" then
		wounded_section = utils.cfg_get_string(st.ini, st.section_logic, "wounded", npc, false, "")
	else
		wounded_section = utils.cfg_get_string(st.ini, section, "wounded", npc, false, "")
	end
	init_wounded(npc, st.ini, wounded_section, st.wounded, scheme)
end
-- Функция чтения настроек. В нее передается секция, откуда их нужно читать.
function init_wounded(npc, ini, section, st, scheme)
	printf("WOUNDED SECTION [%s][%s]", tostring(section), tostring(scheme))

	if tostring(section) == st.wounded_section and
	   tostring(section) ~= "nil" 
	then
		return
	end
	
	st.wounded_section = utils.to_str(section)
	
	if tostring(section) == "nil" then
		-- Загружаем дефолты!
		if npc:character_community() == "monolith" then
			st.hp_state			= xr_meet.parse_data(npc, "10|wounded_heavy@help_heavy")
			st.hp_state_see		= xr_meet.parse_data(npc, "10|wounded_heavy@help_heavy")
			st.psy_state		= xr_meet.parse_data(npc, "")
			st.hp_victim		= xr_meet.parse_data(npc, "10|nil")
			st.hp_cover			= xr_meet.parse_data(npc, "10|false")
			st.hp_fight			= xr_meet.parse_data(npc, "10|false")
			st.syndata			= xr_meet.parse_syn_data(npc, "")
			st.help_dialog		= nil
			st.help_start_dialog= nil
		elseif npc:character_community() == "zombied" then
			st.hp_state			= xr_meet.parse_data(npc, "40|wounded_heavy@help_heavy")
			st.hp_state_see		= xr_meet.parse_data(npc, "40|wounded_heavy@help_heavy")
			st.psy_state		= xr_meet.parse_data(npc, "")
			st.hp_victim		= xr_meet.parse_data(npc, "40|nil")
			st.hp_cover			= xr_meet.parse_data(npc, "40|false")
			st.hp_fight			= xr_meet.parse_data(npc, "40|false")
			st.syndata			= xr_meet.parse_syn_data(npc, "")
			st.help_dialog		= nil
			st.help_start_dialog= nil
		else
			st.hp_state			= xr_meet.parse_data(npc, "30|help_me@help|10|wounded_heavy@help_heavy")
			st.hp_state_see		= xr_meet.parse_data(npc, "30|wounded@help_see|10|wounded_heavy@help_heavy")
			st.psy_state		= xr_meet.parse_data(npc, "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy")
			st.hp_victim		= xr_meet.parse_data(npc, "30|actor|10|nil")
			st.hp_cover			= xr_meet.parse_data(npc, "30|true|10|false")
			st.hp_fight			= xr_meet.parse_data(npc, "30|true|10|false")
			st.syndata			= xr_meet.parse_syn_data(npc, "wounded@help")
			st.help_dialog		= "actor_help_wounded"
			st.help_start_dialog= nil
		end
	else
		st.hp_state		= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state", npc, false, ""))
		st.hp_state_see	= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state_see", npc, false, ""))
		st.psy_state	= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "psy_state", npc, false, ""))
		st.hp_victim	= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_victim", npc, false, ""))
		st.hp_cover		= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_cover", npc, false, ""))
		st.hp_fight		= xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_fight", npc, false, ""))
		st.syndata		= xr_meet.parse_syn_data(npc, utils.cfg_get_string(ini, section, "syndata", npc, false, ""))	
		st.help_dialog	= utils.cfg_get_string(ini, section, "help_dialog", npc, false, "", "actor_help_wounded")
		st.help_start_dialog = utils.cfg_get_string(ini, section, "help_start_dialog", npc, false, "", nil)
	end
	-- флажок, что функция хотя бы раз вызывалась
	st.wounded_set = true
end

function is_wounded(npc)
	if db.storage[npc:id()].wounded ~= nil then
		return db.storage[npc:id()].wounded.wound_manager.state ~= "nil"
	end
	return false
end

function is_heavy_wounded_by_id(npc_id)
	if db.storage[npc_id].wounded ~= nil then
		return db.storage[npc_id].wounded.wound_manager.state == "wounded_heavy"
	end
	return false
end