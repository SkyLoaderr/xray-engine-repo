-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.7
module("ui_base_dialog")
module("ui_spawn_dialog")
module("ui_load_dialog")
module("ui_save_dialog")
module("ui_new_game_dialog")
module("ui_multiplayer_base")
module("ui_multiplayer_dialog")
module("ui_main_base_tab")
module("ui_main_main_tab")
module("ui_main_new_tab")
module("ui_main_multi_tab")
module("ui_options_dialog")

function main()
	local dlg = ui_main_menu.main_menu()
	level.start_stop_menu(dlg,true)
	while true do
		wait(3000)
	end
end


class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
   self:SetFont(GetFontMedium()) --set base font for dialog.
   
   self:InitControls()
   self:InitCallBacks()
end

function main_menu:__finalize()

end

function main_menu:InitControls()

	self.indent = 18	
	self.button_indent = -1 
	self.screen    = {x = 0, y = 0, width = 1024, height = 768}
	
	-- rect of main window
	self.main_rect = {x = 0, y = 0,
					  width  = 1024,
					  height = 512}
	self.main_rect.x = (self.screen.width  - self.main_rect.width )/2
	self.main_rect.y = (self.screen.height - self.main_rect.height)
	-----------------------------------------------------------------
	self.left_align_x   = self.indent
	self.right_align_x  = self.main_rect.width - self.indent
	self.top_align_y    = self.indent
	self.bottom_align_y = self.main_rect.height - self.indent
	------------------------------------------------------------------
	
	-- button template
	self.btn_rect  = {x = 657, 
					  y = 92, 
					  width = 256, 
					  height = 33 }
	self.tab_rect =  {x = 657, 
					  y = 124, 
					  width = 256, 
					  height = 33 }

	-- Fonts
	self.caption_font = GetFontLetterica25()
	self.button_font  = GetFontLetterica25()
	
	-- profile button
	local btn_prof_rect   = {x = 640, y = 68, width = 200, height = 30}
	
	-- INIT DATA >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	-- <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CODE

	-- init self position and size
	self:Init(self.screen.x, 
			  self.screen.y, 
			  self.screen.width, 
			  self.screen.height)
			  
	-- BACKGROUND 
	self.background = CUIStatic()
	self.background:SetAutoDelete(true)
	self.background:SetWindowName("background")
	self.background:Init("ui\\ui_static_main_menu_background",self.screen.x, self.screen.y, self.screen.width, self.screen.height)
	self:AttachChild(self.background)
	
	-- MAIN WINDOW
	self.main_frame = CUIStatic()
	self.main_frame:SetAutoDelete(true)
	self.main_frame:SetWindowName("main_frame")
	self.main_frame:Init("ui\\ui_static_main_menu", self.main_rect.x, 
												   self.main_rect.y, 
												   self.main_rect.width, 
												   self.main_rect.height)
	self:AttachChild(self.main_frame)


	-- PROFILE --
	local btn = CUI3tButton()
	btn:SetAutoDelete(true)
	btn:SetWindowName("btn_profile")
	btn:SetFont(self.caption_font)
	btn:SetTextAlign(CGameFont.alLeft)
	btn:SetText("Player Name")
	btn:Init(btn_prof_rect.x, btn_prof_rect.y, btn_prof_rect.width, btn_prof_rect.height)
	self.main_frame:AttachChild(btn)

	self.main_tab = ui_main_main_tab.main_main_tab()
	self.main_tab:InitControls(self.tab_rect.x, self.tab_rect.y, self)	
	self.main_tab:Show(true)
	self.main_frame:AttachChild(self.main_tab)
	
	self.new_tab = ui_main_new_tab.main_new_tab()
	self.new_tab:InitControls(self.tab_rect.x, self.tab_rect.y, self)	
	self.main_frame:AttachChild(self.new_tab)
	
	self.multi_tab = ui_main_multi_tab.main_multi_tab()
	self.multi_tab:InitControls(self.tab_rect.x, self.tab_rect.y, self)	
	self.main_frame:AttachChild(self.multi_tab)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_new_game",    ui_events.BUTTON_CLICKED,				self,"OnButton_new_game_clicked")
	self:AddCallback("btn_hard",		ui_events.BUTTON_CLICKED,				self,"OnButton_new_hard_game")
	self:AddCallback("btn_new_back",	ui_events.BUTTON_CLICKED,				self,"OnButton_back")
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self,"OnButton_options_clicked")
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self,"OnButton_load_clicked")
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self,"OnButton_save_clicked")
	-- multiplayer
	self:AddCallback("btn_findsrv",		ui_events.BUTTON_CLICKED,				self,"OnButton_findsrv")
	self:AddCallback("btn_createsrv",	ui_events.BUTTON_CLICKED,				self,"OnButton_createsrv")	
	self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,				self,"OnButton_multiplayer_clicked")
	self:AddCallback("btn_multy_back",	ui_events.BUTTON_CLICKED,				self,"OnButton_back")
	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self,"OnButton_quit_clicked")
	-- message box
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self,"OnMsgOk")
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self,"OnMsgCancel")
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self,"OnMsgYes")
	self:AddCallback("message_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self,"OnMsgNo")
end

function main_menu:OnButton_new_hard_game()
	local dlg = ui_spawn_dialog.spawn_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:OnButton_save_clicked()
	local dlg = ui_save_dialog.save_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:OnButton_findsrv()
	local dlg = ui_multiplayer_find.multiplayer_find_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:OnButton_createsrv()
	local dlg = ui_multiplayer_create.multiplayer_create_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:HideAllTabs()
	self.main_tab:Show(false)
	self.new_tab:Show(false)
	self.multi_tab:Show(false)
end

function main_menu:OnButton_back()
	self:HideAllTabs()
	self.main_tab:Show(true)
end

function main_menu:OnButton_new_game_clicked()
	self:HideAllTabs()
	self.new_tab:Show(true)
end

function main_menu:OnButton_options_clicked()
	local dlg = ui_options_dialog.options_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:OnButton_load_clicked()
	local dlg = ui_load_dialog.load_dialog()
	self:GetHolder():start_stop_menu(dlg, true)
end

function main_menu:OnButton_multiplayer_clicked()
	self:HideAllTabs()
	self.multi_tab:Show(true)
end

function main_menu:OnButton_quit_clicked()	
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnMsgOk()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgCancel()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgYes()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end

function main_menu:OnMsgNo()
	local msg_box = self:GetMessageBox("message_box")
	msg_box:Hide()
end


function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	local bind = dik_to_bind(dik)
	
	if bind == key_bindings.kQUIT then
		if level.present() then
			self:GetHolder():start_stop_menu(dlg, true)
		end
	end
	
  	if bind == key_bindings.kCONSOLE then
		local console = get_console()
		console:show()
	end  	
   
	return true
end
