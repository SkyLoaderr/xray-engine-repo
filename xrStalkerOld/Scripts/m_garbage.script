local lie   = 1
local walk  = 2

local lie_time = 15000

--==============================================================================

class "stateGarbageWalk"
function stateGarbageWalk:__init( script_name, mem, way_o, dir )
    printf( "Init stateGarbageRest" )
    self.scr_name      = script_name
    self.memory        = mem
    self.way           = patrol( way_o, patrol.nearest, patrol.continue )
    self.direction     = dir
    --printf( "direction x = %f  y = %f  z = %f", self.direction.x, self.direction.y, self.direction.z )

    self.time          = device():time_global()

    self.curState      = lie
    self.need_reselect = true
end

--------------------------------------------------------------------------------

function stateGarbageWalk:initialize()
    self.curState      = lie
    self.memory.npc:script( true, self.scr_name )
    self.need_reselect = true
end

--------------------------------------------------------------------------------

function stateGarbageWalk:execute()
--    printf( "stateGarbageWalk executed" )

    if( self.need_reselect ) then
        self:select_state()
        self.need_reselect = false
    end

    self:curState_execute()

    if( self:curState_check_completed() ) then
        self.need_reselect = true
    end
end

--------------------------------------------------------------------------------

function stateGarbageWalk:curState_execute()

    if( self.curState == lie ) then

	    if( self.memory.npc:action() ) then return end

        action( self.memory.npc, move( move.walk_fwd, self.way:point( 0 ) ), sound( sound.idle ), cond( cond.move_end ) )
        action( self.memory.npc, look( look.direction, self.direction ), anim( anim.turn, 0 ), cond( cond.look_end ) )
        action( self.memory.npc, anim( anim.lie_idle, 0 ), cond( cond.time_end, lie_time ) )
		printf( "set state lie" )

    elseif( self.curState == walk ) then
			if( device():time_global() > self.time ) then
            	reset_action( self.memory.npc, self.scr_name )
                self.time  = device():time_global() + math.random( 10000, 20000 )
            else
		    	if( self.memory.npc:action() ) then return end
            end

				action( self.memory.npc, anim( anim.look_around, 0 ), sound( sound.idle ), cond( cond.time_end, math.random( 3000, 6000 ) ) )

        		action( self.memory.npc, move( move.walk_fwd, self.way ), sound( sound.idle ), cond( cond.move_end ) )

--        printf( "set state walk" )
    end
end

--------------------------------------------------------------------------------

function stateGarbageWalk:curState_check_completed()
    if( self.curState == lie ) then
        return( device():time_global() > self.time + lie_time )
    elseif( self.curState == walk ) then
        return( self.memory.npc:position():distance_to( self.way:point( self.way:count() - 1 ) ) < 0.3 )
    end

    printf( "Error %d" )
end

--------------------------------------------------------------------------------

function stateGarbageWalk:select_state()

    if( self.curState == lie ) then
        self:set_state( walk )
	    self.time    = device():time_global() + 15000
    elseif( self.curState == walk ) then
        self:set_state( lie )
        self.time    = device():time_global()
    end


end

--------------------------------------------------------------------------------

function stateGarbageWalk:set_state( new_state )
    self.curState = new_state
    if( self.memory.npc:action() ) then reset_action( self.memory.npc, self.scr_name ) end
end

--------------------------------------------------------------------------------

function stateGarbageWalk:finalize()
    printf( "stateGarbageWalk finalize" )
    self.memory.npc:script( false, self.scr_name )
end

--------------------------------------------------------------------------------

function stateGarbageWalk:check_completed()
    return false
end

--------------------------------------------------------------------------------

function stateGarbageWalk:update()
    reset_action( self.memory.npc, self.scr_name )
end

--------------------------------------------------------------------------------

function stateGarbageWalk:id()
    return 9
end

--============================================================================--
--------------------------------------------------------------------------------
--============================================================================--

class "stateGarbageBoarWalk"
function stateGarbageBoarWalk:__init( script_name, mem, way_o, dir )
    printf( "Init stateGarbageRest" )
    self.scr_name      = script_name
    self.memory        = mem
    self.way           = way_o
    self.way_point     = 0
    self.direction     = dir
    --printf( "direction x = %f  y = %f  z = %f", self.direction.x, self.direction.y, self.direction.z )

    self.time          = device():time_global()

    self.curState      = lie
    self.need_reselect = true
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:initialize()
    self.curState      = lie
    self.memory.npc:script( true, self.scr_name )
    self.way_point     = 0
    self.need_reselect = true
    self.memory.npc:set_callback ( self, "move_callback", game_object.movement )
end

--------------------------------------------------------------------------------
function stateGarbageBoarWalk:move_callback( obj, action_type, index )
	self.way_point = index
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:execute()
--    printf( "stateGarbageBoarWalk executed" )

    if( self.need_reselect ) then
        self:select_state()
        self.need_reselect = false
    end

    self:curState_execute()

    if( self:curState_check_completed() ) then
        self.need_reselect = true
    end
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:curState_execute()

    if( self.curState == lie ) then

        if( self.memory.npc:action() ) then return end

        action( self.memory.npc, move( move.walk_fwd, patrol(self.way):point( 0 ) ), sound( sound.idle ), cond( cond.move_end ) )
        action( self.memory.npc, look( look.direction, self.direction ), anim( anim.turn, 0 ), cond( cond.look_end ) )
        action( self.memory.npc, anim( anim.lie_idle, 0 ), cond( cond.time_end, lie_time ) )
        printf( "set state lie" )

    elseif( self.curState == walk ) then
            if( device():time_global() > self.time ) then
                reset_action( self.memory.npc, self.scr_name )
                self.time  = device():time_global() + math.random( 10000, 20000 )
            else
                if( self.memory.npc:action() ) then return end
            end

                action( self.memory.npc, anim( anim.look_around, 0 ), sound( sound.idle ), cond( cond.time_end, math.random( 3000, 6000 ) ) )
                action( self.memory.npc, move( move.walk_fwd, patrol( self.way, patrol.next, patrol.continue, true, self.way_point ) ), sound( sound.idle ), cond( cond.move_end ) )
                printf( "set state walk" )
    end
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:curState_check_completed()
    if( self.curState == lie ) then
        return( device():time_global() > self.time + lie_time )
    elseif( self.curState == walk ) then
        return( self.memory.npc:position():distance_to( patrol( self.way ):point( patrol( self.way ):count() - 1 ) ) < 0.3 )
    end

    printf( "Error %d" )
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:select_state()

    if( self.curState == lie ) then
        self:set_state( walk )
        self.way_point = 0
        self.time    = device():time_global() + 15000
    elseif( self.curState == walk ) then
        self:set_state( lie )
        self.time    = device():time_global()
    end


end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:set_state( new_state )
    self.curState = new_state
    if( self.memory.npc:action() ) then reset_action( self.memory.npc, self.scr_name ) end
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:finalize()
    printf( "stateGarbageBoarWalk finalize" )
    self.memory.npc:clear_callback ( game_object.movement )
    self.memory.npc:script( false, self.scr_name )
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:check_completed()
    return false
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:update()
    reset_action( self.memory.npc, self.scr_name )
    self.memory.npc:set_callback ( self, "move_callback", game_object.movement )
end

--------------------------------------------------------------------------------

function stateGarbageBoarWalk:id()
    return 9
end

