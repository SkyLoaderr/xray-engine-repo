
-- Movement manager
-- Created by: Andrey Fidrya (Zmey), af@svitonline.com

local dist_walk = 10 -- < dist_run
--local dist_run = 25
local dist_run = 2500
-- otherwise - sprint

local walk_min_time = 3000
local run_min_time = 2000

local keep_state_min_time = 1500 -- переключившись в состояние (бег, ходьба, спринт), не переключаться в другое N ms

local default_wait_time = 5000
local default_state_standing = "guard"
local default_state_moving1 = "patrol"
local default_state_moving2 = "rush"
local default_state_moving3 = "sprint"
--local sl_speed_h = 0.52 -- горизонтальная скорость вращения прожекторов
--local sl_speed_v = 0.22 -- вертикальная скорость вращения прожекторов

arrival_before_rotation = 0
arrival_after_rotation = 1

local state_none = 0
local state_moving = 1
local state_standing = 2

--rotation_start_time = 700 -- FIXME xr_remark used it

local sync = {}

-------------------------------------------------------------------------------------------------------------------------
function choose_look_point(patrol_look, path_look_info, search_for)
	local this_val -- значение флагов текущей точки
	local pts_found_total_weight = 0 -- количество найденных точек (с нужными флагами)
	local pt_chosen_idx = nil -- индекс выбранной точки
	local r
	local num_equal_pts = 0
	for look_idx = 0, patrol_look:count() - 1 do
		this_val = path_look_info[look_idx].flags
		if this_val:equal(search_for) then
			num_equal_pts = num_equal_pts + 1
			-- Нашли точку с нужными флагами, но поскольку в пути могут быть еще такие-же
			-- точки, возьмем текущую только с некоторой вероятностью:
			-- Шанс, с которым на точку посмотрит персонаж:
			local point_look_weight = path_look_info[look_idx]["p"]
			if point_look_weight then
				point_look_weight = tonumber(point_look_weight)
			else
				point_look_weight = 100 -- по умолчанию у всех точек вес = 100
			end
			pts_found_total_weight = pts_found_total_weight + point_look_weight
			r = math.random(1, pts_found_total_weight)
			if r <= point_look_weight then
				pt_chosen_idx = look_idx
			end
		end
	end
	return pt_chosen_idx, num_equal_pts
end

-------------------------------------------------------------------------------------------------------------------------
class "move_mgr"

function move_mgr:__init(npc)
	if npc == nil then
		utils.abort("move_mgr:__init() - npc is nil, please update the script")
	end
	self.object = npc
	--self.dialog_mgr = xr_dialogs.dialog_mgr() UNCOMMENT ME
end

function move_mgr:initialize(npc)
	if npc ~= nil then
		utils.abort("Wrong arguments passed to move_mgr:initialize(), please update the script")
	end
	--printf("move_mgr:initialize()")

	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
end

-- Удостоверяется, что пути и флажки на них проставлены корректно
function move_mgr:validate_paths()
	if self.no_validation then
		return
	end
	local patrol_walk_count = self.patrol_walk:count()
	if patrol_walk_count == 1 then
		if not self.patrol_look then
			utils.abort("object '%s': path_walk '%s' has 1 waypoint, but path_look is not specified",
				self.object:name(), self.path_walk)
		end
		if self.path_walk_info[0].flags:get() == 0 then
			utils.abort("object '%s': path_walk '%s' has 1 waypoint, but has no flags",
				self.object:name(), self.path_walk)
		end
	end
end

function move_mgr:extrapolate_callback(npc)
	--printf("___EXTRAPOLATE_CALLBACK___")
	self.can_use_get_current_point_index = true
	self.current_point_init_time = device():time_global()
end

-- Из move_cb вернуть true, чтобы приостановить работу схемы. Чтобы продолжить движение,
-- нужно вызвать метод set_movement_state, который включит перемещение по вейпоинтам с нужной
-- скоростью.
function move_mgr:reset(path_walk, path_walk_info, path_look, path_look_info, team, suggested_state, move_cb_info, no_validation)
	--printf("move_mgr:reset()")
	--xr_reactions.add_rule(self.object, "ignore") -- DELME

	--printf("move_mgr:reset(path_walk=%s, path_look=%s, team=%s)",
	--	utils.to_str(path_walk), utils.to_str(path_look), utils.to_str(team))

	self.no_validation = no_validation
	
	self.patrol_walk = patrol(path_walk)
	if not self.patrol_walk then
		utils.abort("object '%s': unable to find path_walk '%s' on the map",
			self.object:name(), path_walk)
	end
	if not path_walk_info then
		utils.abort("object '%s': path_walk ('%s') field was supplied, but path_walk_info field is nil",
			self.object:name(), path_walk)
	end
	self.path_walk_info = path_walk_info

	if path_look then
		if not path_look_info then
			utils.abort("object '%s': path_look ('%s') field was supplied, but path_look_info field is nil",
				self.object:name(), path_look)
		end
		self.patrol_look = patrol(path_look)
		if not self.patrol_look then
			utils.abort("object '%s': unable to find path_look '%s' on the map",
				self.object:name(), path_look)
		end
	else
		self.patrol_look = nil
	end
	
	self.path_walk = path_walk
	self.path_look = path_look
	self.path_look_info = path_look_info
	self.team = team

	self:validate_paths()

	self.pt_wait_time = default_wait_time -- сколько ждать в точке, где играем анимацию 

	self.shall_shoot = nil
	self.is_shooting = false

	if not suggested_state then
		self.default_state_standing = default_state_standing
		self.default_state_moving1 = default_state_moving1
		self.default_state_moving2 = default_state_moving2
		self.default_state_moving3 = default_state_moving3
	else
		self.default_state_standing = if_then_else(
			suggested_state.standing, suggested_state.standing, default_state_standing)
		self.default_state_moving1 = if_then_else(
			suggested_state.moving1, suggested_state.moving1, default_state_moving1)
		self.default_state_moving2 = if_then_else(
			suggested_state.moving2, suggested_state.moving1, default_state_moving2)
		self.default_state_moving3 = if_then_else(
			suggested_state.moving3, suggested_state.moving1, default_state_moving3)
	end

	self.cur_state_standing = self.default_state_standing
	self.cur_state_moving = self.default_state_moving1

	self.moving = false -- переменная для проверки из внешнего скрипта, стоит ли персонаж на месте

	self.retval_after_rotation = nil

	self.sound = nil
	self.play_sound_after_anim_start = false
	self.play_once = false

	if move_cb_info then
		self.move_cb_obj = move_cb_info.obj
		self.move_cb_func = move_cb_info.func
	else
		self.move_cb_obj = nil
		self.move_cb_func = nil
	end

	self.sl = nil -- прожектор, запоминается, чтобы отпустить его потом из под скрипта
	
	--xr_state.anim_update(nil, self.object)
	--self.object:clear_animations()

	-- Подписаться на уведомления о extrapolate_callback
	local npc_id = self.object:id()
	local scheme = db.storage[npc_id]["active_scheme"]
	xr_logic.subscribe_action_for_events(self.object, db.storage[npc_id][scheme], self)

	-- Пока этот флаг не станет true (он будет установлен в extrapolate_callback), нельзя использовать
	-- значение, которое возвращает get_current_point_index().
	self.can_use_get_current_point_index = false
	self.walk_until = device():time_global() + walk_min_time
	self.run_until = device():time_global() + walk_min_time + run_min_time
	self.keep_state_until = device():time_global()

	--self.object:set_mental_state(anim.free)
	--self.object:set_movement_type(move.run) -- на стартовую точку идти бегом
	self:update_movement_state()

	self.object:set_path_type(game_object.patrol_path)
	self.object:set_detail_path_type(move.line)
	self.object:patrol_path_make_inactual()
	self.object:set_patrol_path(self.path_walk, patrol.nearest, patrol.continue, true)
	--self.object:set_sight(look.danger, nil, 0)
	self.state = state_moving

	self.path_cyclic, self.lowest_sync_val, self.highest_sync_val = self:get_lowest_highest_sync_val()
	self.team = team
	if self.team then
		local s = sync[self.team]
		if not s then
			sync[self.team] = {}
			s = sync[self.team]
		end
		s[self.object:id()] = -1
	end

	-- self.dialog_mgr:reset(self.object, team) UNCOMMENT ME

	self.last_index = nil
	-- self:simulate_callback_if_neccessary() WORKAROUND
end

function move_mgr:arrived_to_first_waypoint()
	return self.last_index ~= nil
end

function move_mgr:update_sound()
	if self.sound then
		-- if self.dialog_mgr:active() == nil then UNCOMMENT ME
			xr_sound.sound_update(self.object, self.sound)
		-- end UNCOMMENT ME
		if self.play_once then
			self.sound = nil
		end
	end
end

function move_mgr:get_lowest_highest_sync_val()
	local num_points = self.patrol_walk:count()
	local v
	local lowest = 100000000
	local highest = -1
	local highest_idx = nil
	for i = 0, num_points - 1 do
		v = self.path_walk_info[i]["n"]
		if v then
			v = tonumber(v)
			if v > highest then
				highest = v
				highest_idx = i
			end
			if v < lowest then
				lowest = v
			end
		end
	end

	local path_cyclic = false
	if highest_idx then
		v = self.path_walk_info[highest_idx]["loop"]
		if v == "true" then
			path_cyclic = true
		else
			path_cyclic = false
		end
	end
	
	return path_cyclic, lowest, highest
end

-- Сравнивает порядок двух вейпоинтов, считая, что последний вейпоинт меньше первого (для зацикленных маршрутов с
-- синхронизацией)
function move_mgr:wayp_lesser(arg1, arg2)
	if not self.path_cyclic then
		return arg1 < arg2
	end

	if arg1 == self.highest_sync_val and arg2 == self.lowest_sync_val then
		return true
	elseif arg1 == self.lowest_sync_val and arg2 == self.highest_sync_val then
		return false
	else
		return arg1 < arg2
	end
end

-- Проверка синхронизации с остальными солдатами на пути.
-- Возвращает true, если дальнейшее движение разрешено.
function move_mgr:sync_ok()
	if self.team then
		local s = sync[self.team]
		local self_id = self.object:id()
		
		-- Если только бежим на путь (еще не были в точках синхронизации), то разрешить движение:
		if s[self_id] == -1 then
			return true
		end
		
		local highest = -1

		local prev = nil
		local all_equal = true
		for k, v in pairs(s) do
			if v ~= nil then
				if prev ~= nil and prev ~= v then
					all_equal = false
				end
				if self:wayp_lesser(highest, v) then
					highest = v
				end
				prev = v
			end
		end

		-- В этом месте highest ~= -1 благодаря проверке до цикла

		return all_equal or self:wayp_lesser(s[self_id], highest)
	end
	return true
end

function move_mgr:update()
	--printf("move_mgr:update(self.state == %s)", utils.to_str(self.state))
	--printf("move_mgr:update(self.object:anims == %d)", self.object:animation_count())
	if self.can_use_get_current_point_index and not self:arrived_to_first_waypoint() then
		local t = device():time_global()
		if t >= self.keep_state_until then
			self.keep_state_until = t + keep_state_min_time

			local cur_pt = self.object:get_current_point_index()
			-- self.patrol_walk здесь по идее то же самое, что вернет patrol(self.object:patrol()),
			-- поэтому использую его для оптимизации.
			local dist = self.object:position():distance_to(self.patrol_walk:point(cur_pt))
			--printf("_bp: move_mgr: distance to destination waypoint: %d", dist)
			if dist <= dist_walk or t < self.walk_until then
				self.cur_state_moving = self.default_state_moving1
			elseif dist <= dist_run or t < self.run_until then
				self.cur_state_moving = self.default_state_moving2
			else
				self.cur_state_moving = self.default_state_moving3
			end
			self:update_movement_state()
		end
		return
	end
	

	-- Если это не тот тип звука, который нужно проиграть всего один раз, то играть его:
	if not self.play_sound_after_anim_start then
		self:update_sound()
	end

end

function move_mgr:finalize(npc)
	self.object:set_callback(game_object.movement, nil)

	self:reset_sl() -- отпустить прожектор
end

function move_mgr:reset_sl()
	if self.sl then
		if self.sl:get_script() then
			self.sl:script(false, "move_mgr")
		end
		self.sl = nil
	end
end

-------------------------------------------------------------------------------
-- IMPLEMENTATION
-------------------------------------------------------------------------------

function move_mgr:update_movement_state()
	state_mgr.set_state(self.object, self.cur_state_moving, nil, nil, nil)
	self.moving = true
end

function move_mgr:update_standing_state(look_pos)
	state_mgr.set_state(self.object, self.cur_state_standing,
		{ obj = self, func = self.time_callback }, self.pt_wait_time,
		{ look_position = look_pos } )
	self.moving = false
end

function move_mgr:time_callback()
	self:update_movement_state() -- идти дальше
end

function move_mgr:waypoint_callback(obj, action_type, index)
	printf("move_mgr:waypoint_callback(): name=%s, index=%d", self.object:name(), index)
	if index == -1 or index == nil then
		printf("ERROR: move_mgr: waypoint_callback: index is -1 or nil")
		return
	end

	self.last_index = index

	-- <ЗВУК>
	local suggested_snd = self.path_walk_info[index]["s"]
	if suggested_snd then
		local snd_from = self.path_walk_info[index]["sf"]
		if snd_from then
			snd_from = tonumber(snd_from)
		end
		local snd_to = self.path_walk_info[index]["st"]
		if snd_to then
			snd_to = tonumber(snd_to)
		end

		local snd_prob = self.path_walk_info[index]["sp"]
		if snd_prob then
			snd_prob = tonumber(snd_prob)
		else
			snd_prob = 100
		end

		local suggested_snd_cont = self.path_walk_info[index]["sc"]
		if suggested_snd_cont == "true" then
			self.play_once = false
		else
			self.play_once = true
		end

		local snd_wait_anim = self.path_walk_info[index]["sa"]
		if snd_wait_anim == "true" then
			self.play_sound_after_anim_start = true
		else
			self.play_sound_after_anim_start = false
		end

		if not self.sound then
			self.sound = {}
		end
		if snd_from and snd_to then
			self.sound.rnd = snd_prob
			self.sound.maxidle = snd_to - snd_from + 1
			self.sound.sumidle = snd_from - 1
			self.sound.themes = parse_names(suggested_snd)
		else
			self.sound.rnd = snd_prob
			self.sound.maxidle = 10 - 5 + 1    -- 1  -- т.е. по умолчанию пауза от 5 до 10 сек
			self.sound.sumidle = 5 - 1         -- 1
			self.sound.themes = parse_names(suggested_snd)
		end
		-- Этот звук играть прямо сейчас, а не когда начнется анимация на позиции (после поворота и т.д.):
		if not self.play_sound_after_anim_start then
			-- if self.dialog_mgr:active() == nil then UNCOMMENT ME
				self:update_sound()
			-- end
		end
	else
		self.sound = nil
	end
	-- </ЗВУК>

	local suggested_state_moving = self.path_walk_info[index]["a"]
	if suggested_state_moving then
		self.cur_state_moving = suggested_state_moving
	else
		self.cur_state_moving = self.default_state_moving1
	end
	self.standing_crouch = self.crouch

	local retv = self.path_walk_info[index]["ret"]
	if retv then
		local retv_num = tonumber(retv)
		
		if not self.move_cb_func then
			utils.abort("object '%s': path_walk '%s': ret flag is set, but " ..
				"callback function wasn't registered in move_mgr:reset()",
				self.object:name(), self.path_walk)
		end
		if self.move_cb_func(self.move_cb_obj, this.arrival_before_rotation, retv_num) then
			return
		end
	end

	local sig = self.path_walk_info[index]["sig"]
	if sig then
		local npc_id = self.object:id()
		local stor = db.storage[npc_id]
		local signals = stor[stor.active_scheme].signals
		signals[sig] = true
	end

	local stop_probability = self.path_walk_info[index]["p"]
	
	if not self.patrol_look or
	   (stop_probability and tonumber(stop_probability) < math.random(1, 100)) then
		self:update_movement_state() -- идти дальше
		return
	end

	-- Значение флагов точки, которую будем искать:
	local search_for = self.path_walk_info[index].flags

	if search_for:get() == 0 then
		self:update_movement_state() -- идти дальше
		return
	end

	local pt_chosen_idx, num_equal_pts = choose_look_point(self.patrol_look, self.path_look_info, search_for)
	if pt_chosen_idx then
		local suggested_anim_set = self.path_look_info[pt_chosen_idx]["a"]
		if suggested_anim_set then
			self.cur_state_standing = suggested_anim_set
		else
			self.cur_state_standing = self.default_state_standing
		end

		local suggested_wait_time = self.path_look_info[pt_chosen_idx]["t"]
		if suggested_wait_time then
			if suggested_wait_time == '*' then
				self.pt_wait_time = nil -- -1
			else
				local tm = tonumber(suggested_wait_time)
				if tm < 1000 or tm > 30000 then
					utils.abort("object '%s': path_look '%s': flag 't': incorrect time specified (* or number expected)",
						self.object:name(), self.path_look)
				end
				self.pt_wait_time = tm
			end
		else
			self.pt_wait_time = default_wait_time
		end

		local retv = self.path_look_info[pt_chosen_idx]["ret"]
		if retv then
			self.retval_after_rotation = tonumber(retv)
		else
			self.retval_after_rotation = nil
		end

		--printf("[%s] pt_chosen_idx == %d", self.object:name(), pt_chosen_idx)
		if not suggested_snd then -- в path_walk звук не задан, проверить, задан ли он на точке
			suggested_snd = self.path_look_info[pt_chosen_idx]["s"]
			if suggested_snd then
				local snd_prob = self.path_look_info[pt_chosen_idx]["sp"]
				if snd_prob then
					snd_prob = tonumber(snd_prob)
				else
					snd_prob = 100
				end
				if not self.sound then
					self.sound = {}
				end
				self.sound.rnd = snd_prob
				self.sound.maxidle = 1
				self.sound.sumidle = -1
				self.sound.themes = parse_names(suggested_snd)
				-- Этот звук играть не прямо сейчас, а когда начнется анимация на позиции (после поворота и т.д.):
				self.play_sound_after_anim_start = true
				-- И только один раз:
				self.play_once = true
			end
		end

		-- Если из этой вершины никуда нельзя идти, и ей соответствует только
		-- одна точка path_look, то стоять бесконечно:
		if self.patrol_walk:terminal(index) and num_equal_pts == 1 then
			self.pt_wait_time = nil
		end
		local look_pos = self.patrol_look:point(pt_chosen_idx)
		self:update_standing_state(look_pos)

		self.state = state_standing

		-- Сразу же стартовать update, не ждать execute. Тогда, если мы уже смотрим
		-- в нужную сторону - не будет паузы в несколько миллисекунд на поворот.
		self:update()
	else
		utils.abort("object '%s': path_walk '%s', index %d: cannot find corresponding point(s) on path_look '%s'",
			self.object:name(), self.path_walk, index, self.path_look)
	end
end

-- Last modified: 2004/11/02 by Andrey Fidrya

