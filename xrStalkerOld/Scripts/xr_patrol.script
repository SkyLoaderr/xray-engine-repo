local animations = {
                   {anim = "stoya_ruje_ 0",       flag = true},
                   {anim = "vishka_3",            flag = false},
                   {anim = "norm_torso_2_idle_1", flag = false},
                   {anim = "norm_torso_2_idle_2", flag = true},
                   {anim = "norm_torso_2_idle_3", flag = false},
                   {anim = "norm_torso_2_idle_4", flag = true},
                   {anim = "norm_torso_2_idle_5", flag = false},
                   {anim = "norm_torso_2_idle_6", flag = false}
                   }


local anim_pris = {
                  {anim = "prisluh_0", flag = false},
                  {anim = "prisluh_1", flag = false},
                  {anim = "prisluh_2", flag = false}
                  }

local anim_raid = {
                  {anim = "spetsnaz_0", flag = false},
                  {anim = "spetsnaz_1", flag = false},
                  {anim = "spetsnaz_2", flag = false},
                  {anim = "spetsnaz_3", flag = false},
                  {anim = "spetsnaz_4", flag = false},
                  {anim = "spetsnaz_5", flag = false},
                  {anim = "spetsnaz_6", flag = false},
                  {anim = "spetsnaz_7", flag = false}
                  }

local anim_find_stop = {
                  {anim = "poisk_idle_0", flag = true},
                  {anim = "poisk_idle_1", flag = true},
                  {anim = "poisk_idle_2", flag = true},
                  {anim = "poisk_idle_3", flag = true},
                  {anim = "poisk_idle_4", flag = true},
                  {anim = "poisk_idle_5", flag = true}
                  }

---------------------------------------------------------------------------------------------------------------------
-- Sounds id's
---------------------------------------------------------------------------------------------------------------------
local commander_snd                     = xr_sounds_id.sound_patrol_base
local soldiers_idle_snd                 = commander_snd + 1
local soldiers_hear_snd                 = commander_snd + 2
local soldiers_idle2_snd                = commander_snd + 3
local soldiers_replics_snd              = commander_snd + 4
local radio_noise                       = commander_snd + 5
local radio_voice                       = commander_snd + 6
local radio_on                          = commander_snd + 7
local radio_off                         = commander_snd + 8
local radio_commander_start             = commander_snd + 9
local radio_commander_next              = commander_snd + 10
local radio_commander_end               = commander_snd + 11

local leader_no_command          = 0
local leader_move                       = 1
local leader_stop                       = 2
local leader_speak            = 3
local leader_speak_enable        = 4
local leader_return                     = 5
local leader_free                       = 6
---------------------------------------------------------------------------------------------------------------------
-- Some functions
---------------------------------------------------------------------------------------------------------------------
-- Constants
---------------------------------------------------------------------------------------------------------------------
local num_hear_phrases      =   9
local num_phrases_idle2     =   2

local max_dist              =   5


---------------------------------------------------------------------------------------------------------------------
-- Evaluators
---------------------------------------------------------------------------------------------------------------------
-- ó¸ûþòøÿ ÷ðòõ¨øõýøÿ
class "evaluator_complete" (property_evaluator)
function evaluator_complete:__init (name, storage) super ()
    self.a = storage
end
function evaluator_complete:evaluate ()
  return not (self.a.enabled == true)
end


----------------------------------------------------------------------------------------------------------------------
-- Îêîí÷àíèå ðåéäà
class "evaluator_raid" (property_evaluator)
function evaluator_raid:__init (name, storage) super ()
  self.a = storage
end
--------------
function evaluator_raid:evaluate ()
    return not (self.a.raid_process == true)
end

---------------------------------------------------------------------------------------------------------------------
-- Actions
---------------------------------------------------------------------------------------------------------------------
-- 1úøý ÿðò¨óûÿ
class "action_single_patrol" (action_base)
function action_single_patrol:__init (name, storage) super (nil, name)
  self.a = storage
    self.waypoint = -1
    self.stage = 0
    self.current_animation = 0
    self.speak_time = 0
    self.sub_stage = 0
    self.current_phrase = 0
    self.phrases = {}
    self.path_type = patrol.start
    self.mental_state = anim.danger
    self.move_type = move.run
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:initialize ()
    action_base.initialize (self)

    self.object:set_callback (self, "move_callback", game_object.movement)
    self.object:clear_animations ()

    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_desired_direction     ()
    self.object:set_item                  (object.activate, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_path_type             (game_object.patrol_path)
    if self.a.first_init == true then
       self.waypoint = -1
       self.stage = 0
       self.current_animation = 0
       self.speak_time = 0
       self.sub_stage = 0
       self.current_phrase = 0
       self.path_type = patrol.start
       self.mental_state = anim.danger
       self.move_type = move.run
--       printf ("PATROL PATH IS %s, for object %s", self.a.patrol_path, self.object:name ())
    else
       self.path_type = patrol.nearest
    end
    self.object:set_patrol_path           (self.a.patrol_path, self.path_type, patrol.continue, true)
    self.object:set_movement_type         (self.move_type)
    self.object:set_mental_state          (self.mental_state)
    self.object:set_sight                 (look.path_dir, nil, 0)

    if self.stage ~= 3 then self.stage = 0 end
    self.current_animation = 0

    if self.a.raid_enabled == false then self:set_soldier_positions ()
    else self:set_soldier_positions_raid ()
    end

    self.speak_time = device ():time_global () + math.random (20000, 40000)
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:set_soldier_positions ()
    local size = table.getn (xr_motivator.storage[self.object:id()].followers)
    if size == 0 then return end
    local dir = self.object:direction ()
    dir.y = 0.0
    dir:normalize ()
    local step = 180.0 / size
    local angle = 90.0
    for a = 1, size, 1 do
        if a == 1 then angle = angle + step * 0.5
        else angle = angle + step end
        local vec = vector_rotate_y (dir, angle)
        xr_motivator.storage[self.object:id()].followers[a].direction = vec
        xr_motivator.storage[self.object:id()].followers[a].distance = 3.0
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:set_soldier_positions_raid ()
    local size = table.getn (xr_motivator.storage[self.object:id()].followers)
    if size == 0 then return end
    local dir = self.object:direction ()
    dir.y = 0.0
    dir:normalize ()
    local dist = 5.0
    local side = false
    local v = vector ():set (0, 0, 0)
    for count = 1, size, 1 do
        if side == false then
           v = vector_rotate_y (dir, -90.0)
           side = true
        else
           v = vector_rotate_y (dir, 90.0)
           side = false
        end
        xr_motivator.storage[self.object:id()].followers[count].direction = v
        xr_motivator.storage[self.object:id()].followers[count].distance = dist
        if count == 2 or count == 4 or count == 6 or count == 8 or count == 10 then
           dist = dist + dist
        end
    end

end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:execute ()
    action_base.execute (self)

    local wpn = self.object:active_item ()
    if isWeapon (wpn) == false then
       self.object:set_item                  (object.activate, self.object:best_weapon ())
    else
       self.object:set_item                  (object.idle, self.object:best_weapon ())
    end

    if self:check_return () == true then return end

    if self.stage == 0 then
       if self.a.raid_enabled == false then self:set_soldier_positions ()
       else self:set_soldier_positions_raid ()
       end
       self:set_command (leader_move)
       if (self.speak_time - device ():time_global ()) <= 0 and table.getn (xr_motivator.storage[self.object:id()].followers) ~= 0 then
          self:speak (commander_snd, 0, math.random (1, table.getn (xr_motivator.storage[self.object:id()].followers)))
       end
       self.object:set_movement_type (self.move_type)
       self.object:set_mental_state  (self.mental_state)
       --printf ("ACTION_SINGLE_PATROL, STAGE 0, TIME %d", device ():time_global ())
--       if self.move_type == move.walk then printf ("ACTION_SINGLE_PATROL - MOVE_WALK, OBJECT %s", self.object:name ()) end
--       if self.move_type == move.stand then printf ("ACTION_SINGLE_PATROL - MOVE_STAND, OBJECT %s", self.object:name ()) end
--       if self.move_type == move.run then printf ("ACTION_SINGLE_PATROL - MOVE_RUN, OBJECT %s", self.object:name ()) end
    elseif self.stage == 1 then
        if self.object:animation_count () == 0 then
           self.stage = 0
           self.move_type = move.walk
           self.mental_state = anim.free
           self.object:set_movement_type (self.move_type)
           self.object:set_mental_state  (self.mental_state)
           self.object:set_previous_point (self.waypoint)
           if patrol (self.object:patrol()):flag (self.waypoint, 0) == true and table.getn (xr_motivator.storage[self.object:id()].followers) ~= 0 then
               self:speak (commander_snd, 3, 0)
           end
           --printf ("ACTION_SINGLE_PATROL, STAGE 1, TIME %d", device ():time_global ())
        end
    elseif self.stage == 2 then
        if self:process_radio () == true then
           self.stage = 0
           self.move_type = move.walk
           self.mental_state = anim.free
           self.object:set_movement_type (self.move_type)
           self.object:set_mental_state  (self.mental_state)
           if patrol (self.object:patrol()):flag (self.waypoint, 2) == true and table.getn (xr_motivator.storage[self.object:id()].followers) ~= 0 then
               self:speak (commander_snd, 1, 0)
           end
           --printf ("ACTION_SINGLE_PATROL, STAGE 2, TIME %d", device ():time_global ())
        end
    elseif self.stage == 3 then
           self.move_type = move.run
           self.mental_state = anim.danger
           self.object:set_mental_state (anim.danger)
           self.object:set_movement_type (move.run)
           self:set_command (leader_return)
           --printf ("ACTION_SINGLE_PATROL, STAGE 3, TIME %d", device ():time_global ())
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:finalize ()
    action_base.finalize (self)
    self.object:clear_callback (game_object.movement)
    self.object:clear_animations ()
    self.a.first_init = false
    self.path_type = patrol.nearest
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:process_radio ()
    local count = self.object:animation_count ()
    local t_size = table.getn (self.phrases)

    if self.sub_stage == 0 and count == 2 then
       local obj = self.object:object ("hand_radio")
       if obj ~= nil then
--          self.object:enable_attachable_item (true)
          printf ("ENABLE RADIO")
          obj:enable_attachable_item (true)
       end
    end

    if self.sub_stage == 0 and count == 1 then
       self.sub_stage = 1
       return false
    end

    if self.sub_stage == 1 then
       if count == 1 and self.current_phrase < t_size then
          self.object:add_animation ("raciya_2", true)
       end
       if self.object:active_sound_count () == 0 then
          if self.current_phrase >= t_size then
             self.sub_stage = 2
             self.object:clear_animations ()
             self.object:add_animation ("raciya_3", true)
             self.object:add_animation ("raciya_4", true)
             --return false
          else
             xr_sounds.play_sound (self.object, 0, "commander_radio", 1, self.current_phrase)
             self.current_phrase = self.current_phrase + 1
          end
       return false
       end
    end

    if self.sub_stage == 2 and count == 1 then
       local obj = self.object:object ("hand_radio")
       if obj ~= nil then
          printf ("DISABLE RADIO")
          --self.object:enable_attachable_item (false)
          obj:enable_attachable_item (false)
       end
    end

    if count ~= 0 then
       return false
    end

    while table.getn (self.phrases) ~= 0 do
          table.remove (self.phrases, 1)
    end

    self:set_animation ()
    self.stage = 1

    return false
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:radio ()
    self.object:clear_animations ()
    self.object:add_animation ("raciya_0", true)
    self.object:add_animation ("raciya_1", true)
    self.object:add_animation ("raciya_2", true)
    self.sub_stage = 0
    self.current_phrase = 1

    table.insert (self.phrases, {namespace = radio_on, phrase = 0})
    table.insert (self.phrases, {namespace = radio_commander_start, phrase = math.random (0, 1)})
    table.insert (self.phrases, {namespace = radio_voice, phrase = math.random (0, 2)})
    table.insert (self.phrases, {namespace = radio_commander_next, phrase = math.random (0, 1)})
    table.insert (self.phrases, {namespace = radio_voice, phrase = math.random (0, 2)})
    table.insert (self.phrases, {namespace = radio_commander_end, phrase = math.random (0, 2)})
    table.insert (self.phrases, {namespace = radio_off, phrase = 0})

	stop_play_sound(self.object)
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:check_return ()
    local size = table.getn (xr_motivator.storage[self.object:id()].followers)
    if size == 0 then return false end
    for count = 1, size, 1 do
        if xr_motivator.storage[self.object:id()].followers[count].npc:alive () == false then
           if self.a.escape_path == nil then
              self.a.enabled = false
              self.object:clear_animations ()
              return true
           end
           self.object:clear_animations ()
           self.object:set_patrol_path (self.a.escape_path, patrol.nearest, patrol.stop, true)
           self.mental_state = anim.danger
           self.move_type = move.run
           self.object:set_mental_state (anim.danger)
           self.object:set_movement_type (move.run)
           self:set_command (leader_return)
           self.object:clear_animations ()
           self.stage = 3
           return true
        end
    end
    return false
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:set_command (command)
    local size = table.getn (xr_motivator.storage[self.object:id()].followers)
    if size == 0 then return end
    for a = 1, size, 1 do
        xr_motivator.storage[self.object:id()].followers[a].leader_command = command
--        xr_motivator.storage[self.object:id()].followers[a].npc:motivation_action_manager ():action (xr_actions_id.sidor_act_follower_base + 1):recalculate_position ()
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:free ()
    local ini = self.object:spawn_ini ()
    if ini == nil or ini:section_exist ("escape_raid") == false or
       ini:line_exist ("escape_raid", "raider") == false or ini:r_bool ("escape_raid", "raider") == false then
       local st = xr_gulag.isUnderFraction (self.object)
       if st ~= nil then
          xr_gulag.resetJob (st, self.object)
       end
    else
       local sim = alife ()
       if sim ~= nil then
          sim:set_switch_online  (self.object:id (), false)
          sim:set_switch_offline (self.object:id (), true)
       end
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:move_callback (obj, action_type, index)

    --printf ("MOVE_CALLBACK called for object %s, index %d", obj:name (), index)

    if index == -1 then return end

    if self.a.first_init == true then
       self.path_type = patrol.nearest
       self.a.first_init = false
    end

    self.waypoint = index
    local ptr = patrol (self.object:patrol ())

    if ptr:flag (index, 6) == true then
       self.a.enabled = false
       self.a.patrol_end = true
       self.stage = 0
       self:set_command (leader_free)
       self:free ()
    return
    end

    if ptr:flag (index, 9) == true then
       self.move_type = move.run
       self.mental_state = anim.danger
    end

    if ptr:flag (index, 8) == true then
       self.move_type = move.walk
       self.mental_state = anim.free
    end


    if ptr:flag (index, 0) == true then
       self.move_type = move.walk
       self.mental_state = anim.free
       self.object:set_movement_type (move.stand)
       self.object:clear_animations ()
       self:set_animation ()
       self:set_look_dir ()
       self:set_command (leader_stop)
       self.stage = 1
       return
    end

    if ptr:flag (index, 1) then
       self.move_type = move.walk
       self.mental_state = anim.free
       self.object:set_movement_type (move.stand)
       self.object:clear_animations ()
       self:radio ()
       self:set_look_dir ()
       self:set_command (leader_stop)
       self.stage = 2
       return
    end

    if ptr:flag (index, 4) and self.a.raid_enabled == true then
       xr_motivator.storage[self.object:id()].patrol.raid_process = true
       local size = table.getn (xr_motivator.storage[self.object:id()].followers)
       if size == 0 then return end
       for a = 1, size, 1 do
           xr_motivator.storage[self.object:id()].followers[a].raid_enabled = true
       end
    end
    self.object:set_movement_type (self.move_type)
    self.object:set_mental_state (self.mental_state)
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:set_look_dir ()
    local size = table.getn (xr_motivator.storage[self.object:id()].followers)
    if size == 0 then return end

    local side = false

    for a = 1, size, 1 do
        if side == true then
           xr_motivator.storage[self.object:id()].followers[a].look_dir = vector_rotate_y (self.object:direction (), -45.0)
           side = false
        else
           xr_motivator.storage[self.object:id()].followers[a].look_dir = vector_rotate_y (self.object:direction (), 45.0)
           side = true
        end
    end
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:set_animation ()

    self.current_animation = self.current_animation + 1
    if self.current_animation > table.getn (animations) then
       self.current_animation = 1
    end

    self.object:add_animation (animations[self.current_animation].anim, animations[self.current_animation].flag)
end
---------------------------------------------------------------------------------------------------------------------
function action_single_patrol:speak (namespace, index, soldier)
  if soldier == 0 then
     xr_sounds.play_sound (self.object, 0, "commander_patrol", 1, 1, index)
       self:set_command (leader_speak)
    else
       if table.getn (xr_motivator.storage[self.object:id()].followers) == 0 then return end
     xr_motivator.storage[self.object:id()].followers[soldier].leader_command = leader_speak_enable
  end
  self.speak_time = device ():time_global () + math.random (20000, 40000)
end
---------------------------------------------------------------------------------------------------------------------


-- ðåéä
class "action_raid" (action_base)
--------------
function action_raid:__init (name, storage) super (nil, name)
  self.a = storage
    self.current_animation = 0
    self.move_type = move.run
    self.body_state = move.standing
    self.mental_state = anim.free
    self.stage = 0
    self.in_find = false
    self.path_type = patrol.start
    self.first_init = true
end
--------------
function action_raid:initialize ()
    action_base.initialize (self)

    self.object:set_callback (self, "move_callback", game_object.movement)
    self.object:clear_animations ()

    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_desired_direction     ()
    self.object:set_item                  (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (self.body_state)
    self.object:set_movement_type         (self.move_type)
    self.object:set_path_type             (game_object.patrol_path)
    if self.first_init == true then
       self.first_init = false
       self.path_type = patrol.start
    else
       self.path_type = patrol.nearest
    end
    self.object:set_patrol_path           (self.a.raid_path, self.path_type, patrol.continue, true)
    self.object:set_mental_state          (self.mental_state)
    self.object:set_sight                 (look.path_dir, nil, 0)
    self.stage = 0
    self.in_find = false
end
--------------
function action_raid:execute ()
    action_base.execute                 (self)
    if self.stage == 0 then
       return
    elseif self.stage == 1 then
           if self.object:animation_count () == 0 then
              self.object:set_body_state            (self.body_state)
              self.object:set_movement_type         (self.move_type)
              self.object:set_mental_state          (self.mental_state)
              if self.in_find == true then
                 local num = math.random (1, 4)
                 self.object:add_animation (anim_find_move[num].anim,  anim_find_move[num].flag)
                 self.stage = 2
              else
                 self.stage = 0
              end
           end
    elseif self.stage == 2 then
           self:update_stage2 ()
    end

end
--------------
function action_raid:finalize ()
    action_base.finalize (self)
    self.object:clear_animations ()
    self.object:clear_callback (game_object.movement)
end
--------------
function action_raid:set_animation ()

    self.current_animation = self.current_animation + 1
    if self.current_animation > table.getn (animations) then
       self.current_animation = 1
    end

    self.object:add_animation (animations[self.current_animation].anim, animations[self.current_animation].flag)
end
--------------
function action_raid:update_stage2 ()
    if self.object:animation_count () >= 2 then return end
    local num = math.random (1, 4)
    self.object:add_animation (anim_find_move[num].anim,  anim_find_move[num].flag)
end
--------------
function action_raid:move_callback (obj, action_type, index)
    if index == -1 then return end

    local ptr = patrol (self.object:patrol ())
    if ptr:flag (index, 4) == true then
       self.a.raid_process = false
       self.first_init = true
       return
    end

    if ptr:flag (index, 8) == true then
       self.object:set_movement_type (move.stand)
       self.move_type = move.walk
       self.body_state = move.standing
       self.mental_state = anim.free
       self.object:set_body_state            (move.standing)
       self.object:set_movement_type         (move.walk)
       self.object:set_mental_state          (anim.free)
       return
    end

    if ptr:flag (index, 9) == true then
       self.object:set_movement_type (move.stand)
       self.body_state = move.standing
       self.move_type = move.run
       self.mental_state = anim.danger
       self.object:set_body_state            (move.standing)
       self.object:set_movement_type         (move.run)
       self.object:set_mental_state          (anim.danger)
       return
    end

    if ptr:flag (index, 10) == true then
       self.object:set_movement_type (move.stand)
       self.move_type = move.run
       self.body_state = move.crouch
       self.mental_state = anim.danger
       self.object:set_body_state            (move.crouch)
       self.object:set_movement_type         (move.run)
       self.object:set_mental_state          (anim.danger)
       return
    end

    if ptr:flag (index, 11) == true then
       self.object:set_movement_type (move.stand)
       self.object:set_mental_state (anim.free)
       local num
       if self.in_find == false then
          if self.body_state == move.crouch then
             num = math.random (1, 4)
          else
             num = math.random (5, 8)
          end
          self.object:add_animation (anim_raid[num].anim, anim_raid[num].flag)
       else
          num = math.random (1, 6)
          self.object:clear_animations ()
          self.object:add_animation (anim_find_stop[num].anim,  anim_find_stop[num].flag)
       end
       self.stage = 1
       return
    end

    if ptr:flag (index, 12) == true then
       self.in_find = true
       --self.move_type = move.run
       --self.body_state = move.crouch
       --self.mental_state = anim.danger
       --self.object:set_body_state            (move.crouch)
       --self.object:set_movement_type         (move.run)
       --self.object:set_mental_state          (anim.danger)
       --self.stage = 2
       --local num = math.random (1, 4)
       --self.object:add_animation (anim_find_move[num].anim,  anim_find_move[num].flag)
       return
    end

    if ptr:flag (index, 13) == true then
       --self.move_type = move.walk
       --self.body_state = move.standing
       --self.mental_state = anim.danger
       --self.object:set_body_state            (move.standing)
       --self.object:set_movement_type         (move.walk)
       --self.object:set_mental_state          (anim.danger)
       --self.object:clear_animations ()
       self.in_find = false
       --self.stage = 0
    end

end


----------------------------------------------------------------------------------------------------------------------
--patrol binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(obj, char_ini)
    if char_ini == nil or char_ini:section_exist ("patrol") == true then

  local operators    = {}
  local properties  = {}

  properties["complete"]           = xr_evaluators_id.sidor_patrol_base_property + 0
  properties["raid"]               = xr_evaluators_id.sidor_patrol_base_property + 1
  properties["state_end"]         = xr_evaluators_id.state_change

   operators["single_patrol"]       = xr_actions_id.sidor_act_patrol + 0
  operators["raid"]                = xr_actions_id.sidor_act_patrol + 1

  local manager  = obj:motivation_action_manager ()
    manager:add_evaluator (properties["complete"], this.evaluator_complete ("property_complete", xr_motivator.storage[obj:id()].patrol))
    manager:add_evaluator (properties["raid"], this.evaluator_raid ("evaluator_raid", xr_motivator.storage[obj:id()].patrol))

    local action = this.action_single_patrol ("action_single_patrol", xr_motivator.storage[obj:id()].patrol)
    action:add_precondition       (world_property (stalker_ids.property_alive,    true))
    action:add_precondition       (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition       (world_property (properties["complete"],        false))
    action:add_precondition         (world_property (properties["raid"],            true))
    action:add_precondition    (world_property (properties["state_end"],   true))
    xr_motivator.addCommonPrecondition(action)
    action:add_effect             (world_property (properties["complete"],        true))
    manager:add_action              (operators["single_patrol"], action)

    action = this.action_raid ("action_raid", xr_motivator.storage[obj:id()].patrol)
    action:add_precondition     (world_property (stalker_ids.property_alive,    true))
    action:add_precondition     (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition      (world_property(properties["state_end"],       true))
    action:add_precondition     (world_property (properties["raid"],            false))
    xr_motivator.addCommonPrecondition(action)
    action:add_effect           (world_property (properties["raid"],            true))
    manager:add_action          (operators["raid"], action)

     action = manager:action (stalker_ids.action_puzzle_solver)
     action:add_precondition (world_property (properties["complete"],  true))

  if char_ini ~= nil then this.set_patrol (obj) end
  xr_report.AddScheme (obj, operators["single_patrol"])
    end
end
----------------------------------------------------------------------------------------------------------------------
function set_patrol (npc, enabled, patrol_path, escape_path, raid_enabled, raid_path, raid_process)
    printf ("XR_PATROL:SET_PATROL called for %s", npc:name ())
  local char_ini = npc:spawn_ini()
  local st = xr_motivator.storage[npc:id()].patrol

  st.npc_id = npc:id ()
  st.first_init = true

    if enabled == nil then
       if char_ini:section_exist ("patrol") == true and char_ini:line_exist("patrol", "enabled") == true then
          st.enabled = char_ini:r_bool("patrol", "enabled")
       else
          st.enabled = false
       end
    else
       st.enabled = enabled
    end

    if patrol_path == nil then
       if char_ini:section_exist ("patrol") == true and char_ini:line_exist("patrol", "patrol_path") == true then
          st.patrol_path = char_ini:r_string("patrol", "patrol_path")
       else
          st.enabled = false
       end
    else
       st.patrol_path = patrol_path
    end

    if escape_path == nil then
       if char_ini:section_exist ("patrol") == true and char_ini:line_exist("patrol", "escape_path") == true then
          st.escape_path = char_ini:r_string("patrol", "escape_path")
       else
          st.escape_path = st.patrol_path
       end
    else
       st.escape_path = escape_path
    end

    if raid_enabled == nil then
       if char_ini:section_exist ("patrol") == true and char_ini:line_exist ("patrol", "raid_enabled") == true then
          st.raid_enabled = char_ini:r_bool ("patrol", "raid_enabled")
       else
          st.raid_enabled = false
       end
    else
       st.raid_enabled = raid_enabled
    end

    if raid_path == nil then
      if char_ini:section_exist ("patrol") == true and char_ini:line_exist ("patrol", "raid_path") == true then
          st.raid_path = char_ini:r_string ("patrol", "raid_path")
      else
          st.raid_path = st.patrol_path
      end
    else
       st.raid_path = raid_path
    end
    if raid_process == nil then
       st.raid_process = false
    else
       st.raid_process = raid_process
    end
  xr_motivator.checkStorage (npc)

  st.first_init = true

  xr_state.change_state(npc, xr_state.stand, false)
end
----------------------------------------------------------------------------------------------------------------------
function is_patrol_end (npc)
    if npc == nil then return false end
    return xr_motivator.storage[npc:id()].patrol.patrol_end
end
