function init    (obj)
	xr_motivator.AddToMotivator(obj)
end

lasthealth  = 0
lasttime	= 0
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
	self.bCheckStart = false
	
	self.delayed_sleep_callback_start_tm = device():time_global()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	
	self.bCheckStart = true

	if object_binder.net_spawn(self,data) == false then
		return false
	end

	db.add_actor(self.object)

	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	db.del_actor(self.object)

	self.object:set_callback(callback.inventory_info, nil)
--	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.actor_sleep, nil)

	db.storage[self.object:id()] = nil

	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	object_binder.reinit(self)
	
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.last_position = vector():set( 0, 100000, 0 )

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
--	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.inventory_callback, self)
	self.object:set_callback(callback.on_item_drop, self.inventory_callback, self)
	self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:info_callback(npc, info_id)
	printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	--' Сюжет
	level_tasks.proceed(self.object)
	-- Отметки на карте
	level_tasks.process_map_spot(info_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback()
	printf("CALLED")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:inventory_callback(npc, info_id)
	--' Сюжет
	level_tasks.proceed(self.object)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:sleep_callback()
	self.delayed_sleep_callback_start_tm = device():time_global() + 1500
end
----------------------------------------------------------------------------------------------------------------------
local drop_location = nil
function drop_item(item, who)
	printf("_bp: drop_item")
	who:drop_item(item, drop_location)
end

function actor_binder:delayed_sleep_callback()
	self.delayed_sleep_callback_start_tm = nil

	printf("*SLEEP CALLBACK*")
	if self.st.punch and self.st.punch.enabled then
		self.object:set_actor_position(self.st.punch.dest_walk)
		self.object:set_actor_direction(self.st.punch.dest_look.y)
		
		if self.st.punch.dump_inventory_pos then
			printf("_bp: dump_inventory_pos")
			drop_location = self.st.punch.dump_inventory_pos
			self.object:inventory_for_each(drop_item)
			self.st.punch.dump_inventory_pos = nil
		end
		
		if self.st.punch.disable_input_tm then
			printf("_bp: disable_input")
			level.disable_input()
			self.st.enable_input_tm = device():time_global() + self.st.punch.disable_input_tm
			self.st.punch.disable_input_tm = nil
		end

		if self.st.punch.info then
			for k, v in self.st.punch.info do
				if self.object:dont_has_info(v) then
					self.object:give_info_portion(v)
				end
			end
		end
	
		self.st.punch.enabled = false
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:update(delta)
	object_binder.update(self, delta)
	
	if self.delayed_sleep_callback_start_tm and
	   device():time_global() >= self.delayed_sleep_callback_start_tm then
		self:delayed_sleep_callback()
	end

	if self.st.enable_input_tm and device():time_global() >= self.st.enable_input_tm then
		level.enable_input()
		self.st.enable_input_tm = nil
	end

	--' Проверка потери жизни
--[[
	printf("%f * %f | %d", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
	lasthealth = self.object.health
	lasttime = game.time()
]]

	-- обновление рестрикторов, которые реагируют на актёра (убирание оружия, подсказки...)
	-- срабатывает только при перемещении актёра каждый метр
	if self.last_position:distance_to_sqr( self.object:position() ) >= 1 then
		bind_restrictor.actor_update(delta)

		self.last_position = self.object:position()
	end

 	if self.bCheckStart then
		printf("SET DEFAULT INFOS")		

		if self.object:dont_has_info("storyline_actor_start") and
		   (level.name() == "l01_escape")
		then
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
			printf("*AVI* RUN START AVI")			
		end

		if self.object:dont_has_info("encyclopedy") then
			self.object:give_info_portion("encyclopedy")
		end

		if self.object:dont_has_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end

		if self.object:dont_has_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end

		level_tasks.add_lchanger_location()

		self.bCheckStart = false		
	end		
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	printf("motivator_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.pstor_save_all(self.object, packet)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	printf("motivator_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.pstor_load_all(self.object, reader)
end
----------------------------------------------------------------------------------------------------------------------
function actor_init    (npc)
	npc:bind_object(actor_binder(npc))
end
