function proceed()
	local actor = db.actor

	escape_tasks.proceed()

	garbage_tasks.proceed()	
	
	agroprom_tasks.proceed()
	
	darkvalley_tasks.proceed()

	bar_rostok_tasks.proceed()	

    mil_tasks.process_tasks()	

	radar_tasks.proceed()	
end

function process_info_portion(info_id)

	if escape_tasks.process_info_portion(info_id) then
		return

	elseif garbage_tasks.process_info_portion(info_id) then
		return
	
	-- Agroprom
	elseif agroprom_tasks.process_info_portion(info_id) then
		return

	-- DARK VALLEY
	elseif darkvalley_tasks.process_info_portion(info_id) then
		return

	-- BAR ROSTOK
	elseif bar_rostok_tasks.process_info_portion(info_id) then
		return

	-- military	
	elseif mil_tasks.process_info_portion(info_id) then
		return

	elseif radar_tasks.process_info_portion(info_id) then
		return
	end
end


function set_task_state(id_state, id_task, id_subtask)
	if db.actor then
		if id_subtask == 0 then
			if id_state == task.fail then
				news_manager.send_task(db.actor, "fail")
			else
				news_manager.send_task(db.actor, "complete")
			end
		else
			if id_state == task.fail then
				news_manager.send_task(db.actor, "fail")
			else
				news_manager.send_task(db.actor, "update")
			end
		end
		db.actor:set_task_state(id_state, id_task, id_subtask)
	end
end

function notify_new_task()
	news_manager.send_task(db.actor, "new")
end

function add_location(sid, location)
	local sim = alife()
	if sim then
		obj = sim:story_object(sid)
		
		if obj then
			level.map_add_object_spot(obj.id, location, "")
		end
	end
end

function remove_location(sid, location)
	local sim = alife()
	if sim then
		obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) then
			level.map_remove_object_spot(obj.id, location)
		end
	end
end

function remove_location_safe(sid, location)
	local sim = alife()
	if sim then
		obj = sim:story_object(sid)
		if obj then
		   for a = 1, level.map_has_object_spot(obj.id, location), 1 do
			   level.map_remove_object_spot(obj.id, location)
		   end	
		end
	end
end

function is_map_spot_present(sid, location)
	local sim = alife()
	if sim then
		obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) ~= 0 then
		   return true
		end
	end
	return false
end
  

function add_lchanger_location()
	local sim = alife()
	if sim then
		-- escape
		local obj = sim:story_object(91)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_up_location", "to_garbage")
		end

		-- garbage
		obj = sim:story_object(191)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_left_location", "to_agroprom")
		end
		obj = sim:story_object(192)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_left_location", "to_agroprom")
		end
		obj = sim:story_object(193)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_down_location", "to_escape")
		end
		obj = sim:story_object(194)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_up_location", "to_rostok")
		end
		obj = sim:story_object(195)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_darkvalley")
		end
		obj = sim:story_object(196)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_darkvalley")
		end
		
		-- agroprom
		obj = sim:story_object(391)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_garbage")
		end
		obj = sim:story_object(392)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_garbage")
		end

		-- darkvalley
		obj = sim:story_object(415)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_left_location", "to_garbage")
		end
		obj = sim:story_object(416)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_left_location", "to_garbage")
		end

		-- rostok
		obj = sim:story_object(591)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_garbage")
		end
		obj = sim:story_object(592)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_right_location", "to_military")
		end

		-- military
		obj = sim:story_object(771)
		if obj then
			level.map_add_object_spot(obj.id, "lchanger_left_location", "to_rostok")
		end


	end
end