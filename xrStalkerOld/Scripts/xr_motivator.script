----------------------------------------------------------------------------------------------------------------------
--  автор: Диденко Руслан (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------
memtsg = {} --' временная таблица
lasthealth = 0
lastime = nil

----------------------------------------------------------------------------------------------------------------------
class "motivator_binder" (object_binder)

function motivator_binder:__init (obj) super(obj)
	self.initialized = false
	self.loaded = false
end

function motivator_binder:extrapolate_callback(cur_pt)
	if self.st.active_section then
		--printf("___ACTIVE_SECTION___")
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "extrapolate_callback")
	end
	
	--printf("_bp: motivator_binder: extrapolate_callback: cur_pt = %d", cur_pt)
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		--printf("_bp: motivator_binder: extrapolate_callback: true")
		return true
	end
	--printf("_bp: motivator_binder: extrapolate_callback: false")
	return false
end

function motivator_binder:reinit()
    object_binder.reinit(self)
    printf("motivator_binder:reinit(): self.object:name()='%s'", self.object:name())
    
    -- КОЛЛБЕКИ ЗДЕСЬ СТАВИТЬ НЕЛЬЗЯ! Здесь еще неизвестна активная схема.
    -- Ставьте коллбеки в методе update в отмеченном комментарием месте.
        
    local char_ini = self.object:spawn_ini() or ini_file("scripts\\dummy.ltx")

    --' Bind other scripts
    printf("Base evaluator ID %d", stalker_ids.property_script)
    printf("Base action ID %d", stalker_ids.action_script)
    
    -- Zmey: Это лучше делать не тут, а в reset_generic_schemes_on_scheme_switch!
    -- Она вызывается даже если не прописана активная секция в logic. Закомментировал.
    --self.object:disable_talk()

----------------------------------------------------------------------------------------------------------------------
-- Общие скрипты
----------------------------------------------------------------------------------------------------------------------
    db.storage[self.object:id()] = {  followers = {} }
    self.st = db.storage[self.object:id()]
    
    self.torch = xr_light.torch_light(self.object)

    --' Положения тела
    self.st.state = xr_state.body_state(self.object)
	--state_mgr.bind_manager(self.object, self.st.state_mgr)

    --' Создание менеджера контроля положений тела
	self.st.state_mgr = state_mgr.bind_manager(self.object)	
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:net_spawn(sobject)
	printf("motivator_binder:net_spawn(): self.object:name()='%s'", self.object:name())

	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	--local sim = alife()
	--if sim ~= nil then 
		--xr_spawner.spawn(sobject)
	--end

	db.add_obj(self.object)

    --' загрузка озвучки
    xr_sound.load_sound(self.object)

	return true
end

function motivator_binder:net_destroy()
	printf("motivator_binder:net_destroy(): self.object:name()='%s'", self.object:name())

	db.del_obj(self.object)

	db.storage[self.object:id()] = nil

	object_binder.net_destroy(self)
end

function motivator_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	--printf("_bp: motivator_binder:hit_callback: obj='%s'", obj:name())
	-- FIXME: коллбеки неплохо было бы регистрировать в общем storage, а не посхемно...
	-- просто всегда ставить их при включении схемы и снимать при отключении.
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat_ignore then
		xr_logic.issue_event(self.object, self.st.combat_ignore, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat then
		xr_logic.issue_event(self.object, self.st.combat, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
end

function motivator_binder:death_callback(victim, who)
	if self.st.death then
		xr_logic.issue_event(self.object, self.st.death, "death_callback", victim, who)
	end
	self:stalker_death_impulse(victim, who)
end

function motivator_binder:use_callback(obj, who)
	xr_use.notify_on_use(obj, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end
end

function motivator_binder:stalker_death_impulse(victim, who)
	--[[
	local actor_pos = utils.vector_copy_by_val(who:position())
	local npc_pos = victim:position()

	if actor_pos.y >= npc_pos.y - 3.0 then
		-- Если игрок несущественно ниже, или выше - не давать толчек
		return
	end

	printf("_bp: stalker_death_impulse[victim='%s' who='%s']", victim:name(), who:name())
	local h = hit()
	h.power = 100
	actor_pos.y = npc_pos.y + 1.0
	h.direction = actor_pos:sub(npc_pos)
	h.bone = "bip01_spine1"
	h.draftsman = who
	h.impulse = 2000
	h.type = hit.wound
	victim:hit(h)
	--]]
	
	local actor_pos = utils.vector_copy_by_val(who:position())
	local npc_pos = victim:position()

	if actor_pos.y >= npc_pos.y - 3.0 then
		-- Если игрок несущественно ниже, или выше - не давать толчек
		return
	end
	actor_pos.y = npc_pos.y + 1.0
	local pshell = victim:get_physics_shell()
	local dir = actor_pos:sub(npc_pos)
	local constant = 5000
	pshell:apply_force(constant * dir.x, constant * dir.y, constant * dir.z)
end

function motivator_binder:update(delta)
	object_binder.update(self, delta)

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_stalker)
		
		-- Все CALLBACK-и ставить здесь:
		self.object:set_patrol_extrapolate_callback(motivator_binder.extrapolate_callback, self)
		self.object:set_callback(callback.hit, motivator_binder.hit_callback, self)
		self.object:set_callback(callback.death, motivator_binder.death_callback, self)
		self.object:set_callback(callback.use_object, motivator_binder.use_callback, self)
		
		
		--self.object:set_callback(callback.sound, motivator_binder.hear_callback, self)
	end

	self.torch:update()
    
	--' Апдейт менеджера состояний тела
	if self.st.state_mgr then
		if self.object:alive() then
			self.st.state_mgr:update()
		else
			self.st.state_mgr = nil
		end
	end

	--' Апдейт саундменеджера
	if self.object:alive() then
		xr_sound.update(self.object)
	else
		stop_play_sound(self.object)
	end

	self.object:info_clear()
	local best_enemy = self.object:best_enemy()
	if best_enemy then
		self.object:info_add('enemy -- ' .. best_enemy:name())
	end
	local active_section = db.storage[self.object:id()].active_section
	if active_section then
		self.object:info_add('section -- ' .. active_section)
	end
	self.object:info_add('name -- ' .. self.object:name())
     
	--' Проверка ТИМ СКВАД ГРУП
	--[[
	if memtsg[self.object:id()] == nil then
		printf("[TSG] Object: %s t:%d s:%d g:%d", self.object:name(),
			self.object:team(),
			self.object:squad(),
			self.object:group())
		memtsg[self.object:id()] = self.object:id()
	end
	--]]

	--' Проверка потери жизни
	--[[
	if lasttime == nil or
	   game.get_game_time():diffSec(lasttime) > 1 
	then
		printf("%f * %f", self.object.health, self.object.health - lasthealth)
		lasthealth = self.object.health
		lasttime = game.get_game_time()
	end
	--]]

	--' Проверка врагов
	--[[
	local be = self.object:best_enemy()
	if be ~= nil then
		printf("ENEMYCHECK: %s[%s, %s, %s] -> %s[%s, %s, %s]",
			self.object:name(),
			self.object:team(),
			self.object:squad(),
			self.object:group(),
			be:name(), 
			be:team(), 
			be:squad(), 
			be:group()
		)
	end
	]]
end

function motivator_binder:reload(section)
	object_binder.reload(self, section)
	printf("motivator_binder:reload(): self.object:name()='%s'", self.object:name())
--	self.object:set_pda_callback(pda_callback)
end

function motivator_binder:net_save_relevant()
	--printf("motivator_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function motivator_binder:save(packet)
	--printf("motivator_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function motivator_binder:load(reader)
	self.loaded = true

	--printf("motivator_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end

function motivator_binder:hear_callback(self, who, sound_type, sound_position, sound_power)
	if who:id() ~= self:id() then
		local type = "NIL"
		if bit_and(sound_type, snd_type.weapon) == snd_type.weapon then
			type = "WPN"
			if bit_and(sound_type, snd_type.weapon_shoot) == snd_type.weapon_shoot then
				type = "WPN_shoot"
			elseif bit_and(sound_type, snd_type.weapon_empty) == snd_type.weapon_empty then
				type = "WPN_empty"
			elseif bit_and(sound_type, snd_type.weapon_bullet_hit) == snd_type.weapon_bullet_hit then
				type = "WPN_hit"
			elseif bit_and(sound_type, snd_type.weapon_reload) == snd_type.weapon_reload then
				type = "WPN_reload"
			end
		elseif bit_and(sound_type, snd_type.item) == snd_type.item then
			type = "ITM"
			if bit_and(sound_type, snd_type.item_pick_up) == snd_type.item_pick_up then
				type = "ITM_pckup"
			elseif bit_and(sound_type, snd_type.item_drop) == snd_type.item_drop then
				type = "ITM_drop"
			elseif bit_and(sound_type, snd_type.item_hide) == snd_type.item_hide then
				type = "ITM_hide"
			elseif bit_and(sound_type, snd_type.item_take) == snd_type.item_take then
				type = "ITM_take"
			elseif bit_and(sound_type, snd_type.item_use) == snd_type.item_use then
				type = "ITM_use"
			end
		elseif bit_and(sound_type, snd_type.monster) == snd_type.monster then
			type = "MST"
			if bit_and(sound_type, snd_type.monster_die) == snd_type.monster_die then
				type = "MST_die"
			elseif bit_and(sound_type, snd_type.monster_injure) == snd_type.monster_injure then
				type = "MST_damage"
			elseif bit_and(sound_type, snd_type.monster_step) == snd_type.monster_step then
				type = "MST_step"
			elseif bit_and(sound_type, snd_type.monster_talk) == snd_type.monster_talk then
				type = "MST_talk"
			elseif bit_and(sound_type, snd_type.monster_attack) == snd_type.monster_attack then
				type = "MST_attack"
			elseif bit_and(sound_type, snd_type.monster_eat) == snd_type.monster_eat then
				type = "MST_eat"
			end
		end
		if type ~= "NIL" then
			printf("SND *%s* dist: %d [%f], %s", type, self:position():distance_to(who:position()), sound_power, who:name())
		end
	end
end

function AddToMotivator(npc)
    npc:bind_object(this.motivator_binder(npc))
end

-- Эвалюаторы, которые имеют высший приоритет, и, соответственно, перебивают остальные скрипты собой
function addCommonPrecondition(action)
--	action:add_precondition (world_property(xr_evaluators_id.assistance + 1,	false))
	action:add_precondition (world_property(xr_evaluators_id.stohe_meet_base + 1,false))
	action:add_precondition (world_property(xr_evaluators_id.sidor_wounded_base + 1,  false))
	action:add_precondition (world_property(xr_evaluators_id.chugai_heli_hunter_base, false))		
	action:add_precondition (world_property(xr_evaluators_id.zmey_punch_base + 1, false))		
--	action:add_precondition (world_property(xr_evaluators_id.zmey_companion_base + 1, false))		
end

