--------------------------------------------------------------------------------------------------------
-- Dialog & InfoPortions Function
--------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
-- Trader
--------------------------------------------------------------------------------------------------------
function trader_alredy_give_job(trader, actor)
	if actor:has_info("escape_artefact_start") or actor:has_info("escape_artefact_gain") or
	   actor:has_info("escape_stalker_meet") or actor:has_info("escape_stalker_give") or
	   actor:has_info("escape_blockpost_case") or actor:has_info("escape_blockpost_case_have")
	then
		return true
	end
	return false 
end
function is_tutorial(trader, actor)
	return actor:has_info("tutorial_artefact_start") or
		   actor:has_info("tutorial_wounded_start")	
end
function is_not_tutorial(trader, actor)
 return not this.is_tutorial(trader, actor)
end

function trader_dont_give_job(first_speaker, second_speaker)
	return not trader_alredy_give_job(first_speaker, second_speaker)
end

function trader_dont_has_job(first_speaker, second_speaker)
    if trader_need_blockpost_box(first_speaker, second_speaker) == false and
	   trader_need_artefact(first_speaker, second_speaker) == false and
	   trader_need_fox_info(first_speaker, second_speaker) == false
	then
		return true
	end
	return false
end

--' Escape tutorial artefact
function have_tutorial_artefact(first_speaker, second_speaker)
  	return first_speaker:object("af_blood_tutorial") ~= nil
end
function give_medkit(first_speaker, second_speaker)
	local medkit = first_speaker:object("medkit")
	if medkit ~= nil then
		first_speaker:transfer_item(medkit, second_speaker)
	else
		printf("ERROR: Escape trader dont has a medkit.")
	end
end
function give_tutorial_artefact(first_speaker, second_speaker)
	local artefact = first_speaker:object("af_blood_tutorial")
	first_speaker:transfer_item(artefact, second_speaker)
	first_speaker:set_task_state(task.completed, "tutorial_find_artefact", 2)
	first_speaker:set_task_state(task.completed, "tutorial_find_artefact", 0)
end


--' Escape trader need meet fox
function have_fox_info(first_speaker, second_speaker)
  	return first_speaker:object("fox_flash") ~= nil
end
function trader_need_fox_info(first_speaker, second_speaker)
	local actor = level.actor()
    if actor ~= nil and
	   actor:has_info("escape_artefact_done") and
	   actor:dont_has_info("escape_stalker_meet") and
	   actor:dont_has_info("escape_stalker_give") and
	   actor:dont_has_info("escape_stalker_done")
	then
		return true
	end
	return false
end
function give_flash_to_actor(npc, actor)
	local item = npc:object("fox_flash")
	if item then
		npc:transfer_item(item, actor)
	end
end
function give_fox_info(first_speaker, second_speaker)
	local item = first_speaker:object("fox_flash")
	first_speaker:transfer_item(item, second_speaker)
	first_speaker:set_task_state(task.completed, "esc_help_wounded_from_raid", 2)
	first_speaker:set_task_state(task.completed, "esc_help_wounded_from_raid", 0)
end


--' Escape blockpost box
function have_blockpost_case(first_speaker, second_speaker)
  	return first_speaker:object("quest_case_01") ~= nil
end
function trader_need_blockpost_box(first_speaker, second_speaker)
	local actor = level.actor()
    if actor ~= nil and
	   actor:has_info("escape_stalker_done") and
	   actor:dont_has_info("escape_blockpost_case") and
	   actor:dont_has_info("escape_blockpost_case_have") and
	   actor:dont_has_info("escape_blockpost_case_done")
	then
		return true
	end
	return false
end
function give_blockpost_case(first_speaker, second_speaker)
	local case = first_speaker:object("quest_case_01")
	first_speaker:transfer_item (case, second_speaker)
	second_speaker:transfer_money (500, first_speaker)
	first_speaker:set_task_state(task.completed, "esc_blockpost_case_to_trader", 2)		
	first_speaker:set_task_state(task.completed, "esc_blockpost_case_to_trader", 0)
end

--' Escape trader artefact
function have_artefact_from_fleshes(first_speaker, second_speaker)
	local actor = level.actor()
	if actor ~= nil and
	   (actor:object("af_vyvert") ~= nil or
	   actor:object("af_gravi") ~= nil or
	   actor:object("af_gold_fish") ~= nil)
	then
		return true
	end
  	return false
end
function give_artefact_from_fleshes(first_speaker, second_speaker)
	local artefact = first_speaker:object("af_vyvert")
	if artefact == nil then
		artefact = first_speaker:object("af_gravi")
	end
	if artefact == nil then
		artefact = first_speaker:object("af_gold_fish")
	end
	first_speaker:transfer_item (artefact, second_speaker)
	second_speaker:transfer_money (1500, first_speaker)
	first_speaker:set_task_state(task.completed, "esc_trader_need_electra_artefact", 2)		
	first_speaker:set_task_state(task.completed, "esc_trader_need_electra_artefact", 0)
end
function trader_need_artefact(first_speaker, second_speaker)
	local actor = level.actor()
    if actor ~= nil and
	   actor:has_info("tutorial_end") and
	   actor:dont_has_info("escape_artefact_start") and
	   actor:dont_has_info("escape_artefact_gain") and
	   actor:dont_has_info("escape_artefact_done")
	then
		return true
	end
	return false
end

--' tutorial wounded in vagon
function wounded_need_help(first_speaker, second_speaker)
	local actor = level.actor()
	return actor ~= nil and actor:dont_has_info( "tutorial_wounded_help" )
end

--' trader needs military documents
function trader_need_military_document(first_speaker, second_speaker)
	local actor = level.actor()
    if actor ~= nil and
	   actor:has_info("escape_blockpost_case_done") and
	   actor:dont_has_info("agroprom_military_case") and
	   actor:dont_has_info("agroprom_military_case_have") and
	   actor:dont_has_info("agroprom_military_case_done")
	then
		return true
	end
	return false
end

--' Wolf has a job
function wolf_dont_has_job(first_speaker, second_speaker)
    if wolf_need_dynamite(first_speaker, second_speaker) == false
	then
		return true
	end
	return false
end
function wolf_need_dynamite(first_speaker, second_speaker)
	local actor = level.actor()
    if actor ~= nil and
	   actor:dont_has_info("escape_dynamite_start") and
	   actor:dont_has_info("escape_dynamite_have") and
	   actor:dont_has_info("escape_dynamite_done")
	then
		return true
	end
	return false
end


--' Escape dynamite for Wolf
function transfer_wolf_ammo_to_actor(first_speaker, second_speaker)
	local obj = first_speaker:object("ammo_9x19_fmj")
	if obj ~= nil then
		first_speaker:transfer_item (obj, second_speaker)
	end
end

function have_dynamite(first_speaker, second_speaker)
  	return first_speaker:object("dynamite") ~= nil
end
function give_dynamite(first_speaker, second_speaker)
	local case = first_speaker:object("dynamite")
	first_speaker:transfer_item (case, second_speaker)
	first_speaker:set_task_state(task.completed, "esc_dinamit_to_volk", 3)
	first_speaker:set_task_state(task.completed, "esc_dinamit_to_volk", 0)
end

function assault_ready(first_speaker, second_speaker)
	return second_speaker:has_info("assault_have_vodka")
end
function assault_dont_ready(first_speaker, second_speaker)
	return second_speaker:dont_has_info("assault_have_vodka")
end
function assault_actor_have_vodka(first_speaker, second_speaker)
	return second_speaker:object("vodka") ~= nil
end
function assault_actor_dont_have_vodka(first_speaker, second_speaker)
	return not this.assault_actor_have_vodka(first_speaker, second_speaker)
end
function transfer_vodka_to_assault(first_speaker, second_speaker)
	local obj = first_speaker:object("vodka")
	first_speaker:transfer_item (obj, second_speaker)
end