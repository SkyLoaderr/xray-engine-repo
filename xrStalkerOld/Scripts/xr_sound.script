---------------------------------------------------------------------------------------------------------------------
--	Схема озвучки
--	автор:  Диденко Руслан  (Stohe)
--	update: Чугай Александр (Chugai)
----------------------------------------------------------------------------------------------------------------------
key_by_id = {}
num_by_key = {}

	function get_sound(path, tt, npc)
		if path == nil then return nil end
		if path.exec == nil then

			-- чтение настроек темы
			if path.into_id ~= nil or
			   path.rnd_id ~= nil
			then
				tt.into_id = path.into_id
				tt.into_max = path.into_max
				tt.into_last = nil
				tt.rnd_id = path.rnd_id
				tt.rnd_max = path.rnd_max
				tt.rnd_last = nil
				tt.min_snd = path.min_snd
				tt.max_snd = path.max_snd
				tt.rnd_snd = path.rnd_snd
				
			end
		else
			get_sound(path.types[path.exec(path.types, npc, target)], tt)
		end
	end
-- Формирование ключа персонажа
function get_key(npc)
	local group = npc:group()
	local key
	if group == 0 then
		key = utils.to_str(npc:id())
	else
		local team = npc:team()
		local squad = npc:squad()
		key = utils.to_str(team).."_"..utils.to_str(squad).."_"..utils.to_str(group)
	end
	if xr_sound.key_by_id[npc:id()] ~= key then
		if xr_sound.num_by_key[xr_sound.key_by_id[npc:id()]] ~= nil and
		   xr_sound.num_by_key[xr_sound.key_by_id[npc:id()]] >= 1 
		then
		   xr_sound.num_by_key[xr_sound.key_by_id[npc:id()]] = xr_sound.num_by_key[xr_sound.key_by_id[npc:id()]] - 1
		end
		xr_sound.key_by_id[npc:id()] = key
		if xr_sound.num_by_key[key] == nil then
			xr_sound.num_by_key[key] = 1
		else
			xr_sound.num_by_key[key] = xr_sound.num_by_key[key] + 1
		end
	end
	return key
end
	
-----------------------------------------------------------------------------------------------------------------------------------
--	Установка и распарсивание тем в файлы.
-----------------------------------------------------------------------------------------------------------------------------------
function set_sound(npc, sound, now)
	--printf("*SND* try to change SND")
	local key = get_key(npc)
	if (db.sound[key] == nil or
	   db.sound[key].theme ~= sound) or
	   now == true
	then
		printf("*SND* change SND to [%s]", utils.to_str(sound))
		-- Туточки надобно распарсить имена тем в их id
		if sound == nil then sound = "" end
		if db.sound[key] == nil then db.sound[key] = {} end
		db.sound[key].theme = sound
		db.sound[key].snd = parse_names(sound)
		if db.sound[key].last_snd == nil then
			db.sound[key].last_snd = {}
		else	
		
			local snd_table = {}
			local t = 0		
			for k,v in db.sound[key].snd do
				snd_table[t] = {}
				get_sound(sound_theme.theme[npc:id()][v], snd_table[t], npc)
				t = t + 1
			end	
			for k,v in snd_table do
				if v.into_id then db.sound[key].last_snd[v.into_id] = nil end
				if v.rnd_id then db.sound[key].last_snd[v.rnd_id] = nil end
			end	
			
			
		end
		if now == true then
			stop_play_sound(npc)
			db.sound[key].begin = nil
		end
	end
end

function set_sound_play(npc, sound)
	printf("*SND* play SND to [%s]", utils.to_str(sound))
	local key = utils.to_str(npc:id())
	if db.sound[key] == nil then db.sound[key] = {} end
	if db.sound[key].last_snd == nil then
		db.sound[key].last_snd = {}
	end
	stop_play_sound(npc)
	this.play_sound(npc, parse_names(sound), true)
end

function update(npc)
	if npc:active_sound_count() ~= 0 then return end
	local key = get_key(npc)
	if db.sound[key] ~= nil and db.sound[key].snd == nil then return end
	local key_table = db.sound[key]
	if  key_table ~= nil and
	   (key_table.begin == nil or
	   device():time_global() - key_table.begin >= key_table.idle)
	then
		if (xr_sound.num_by_key[key] <= 1 or
		   key_table.last_npc ~= npc:id()) and
		   key_table.busy ~= true
		then
			this.play_sound(npc, key_table.snd)
		else
			if key_table.last_npc == npc:id() then
				-- по завершении звука снимаем флажок занятости
				if npc:active_sound_count() == 0 then
					key_table.busy = false
				end
			end
		end
	end
end


function play_sound(npc, themes, personal)
	-- нужно составить список тем
	local snd_table = {}
	local t = 0		
	for k,v in themes do
		snd_table[t] = {}
		if sound_theme.theme[npc:id()][v] ~= nil then
			get_sound(sound_theme.theme[npc:id()][v], snd_table[t], npc)
		else
			utils.abort("ERROR: ILLEGAL PLAY SOUND!!! %s for %s", v, npc:name())
		end
		t = t + 1
	end	
	--printf("*")
	--print_table(snd_table)
	if t == 0 then return end
	-- из списка тем выбираем одну.	
	local snd = snd_table[math.random(0, t-1)]
	if snd ~= nil then
		--printf("!")
		--print_table(snd)
		if snd.min_snd == nil then return end
		local key = get_key(npc)
		local last_snd_key = key
		if personal == true then
			last_snd_key = utils.to_str(npc:id())
		end
		db.sound[key].begin = device():time_global()
		db.sound[key].idle = math.random(snd.min_snd, snd.max_snd)*1000			
		db.sound[key].busy = true
		db.sound[key].last_npc = npc:id()
		-- необходимо ли нам играть into или rnd звуки
		if snd.into_max ~= nil and
			snd.into_max > 0 and
			(db.sound[last_snd_key].last_snd[snd.into_id] == nil or
			db.sound[last_snd_key].last_snd[snd.into_id] < snd.into_max-1)
		then
			-- играем входные
			if db.sound[last_snd_key].last_snd[snd.into_id] == nil then db.sound[last_snd_key].last_snd[snd.into_id] = -1 end
			
			printf("*SND* play seq [%s]", db.sound[last_snd_key].last_snd[snd.into_id]+1)
			npc:play_sound(snd.into_id, 1, 0, 1, 0, db.sound[last_snd_key].last_snd[snd.into_id]+1)
			db.sound[last_snd_key].last_snd[snd.into_id] = db.sound[last_snd_key].last_snd[snd.into_id] + 1
			--printf("*SND* play seq [%s]", db.sound[last_snd_key].last_snd[snd.into_id])
			return
		end		
		if snd.rnd_max ~= nil and
			snd.rnd_max > 0
		then
			-- играем рандомные
			local s = 0
			if snd.rnd_max == 1 then
				s = 0
			else
				if db.sound[last_snd_key].last_snd[snd.rnd_id] ~= nil then
					s = math.random(0, snd.rnd_max-2)
					if s >= db.sound[last_snd_key].last_snd[snd.rnd_id] then s = s + 1 end
				else
					s = math.random(0, snd.rnd_max-1)					
				end	
			end			
							
			printf("*SND* play rnd [%s]", s)
			npc:play_sound(snd.rnd_id, 1, 0, 1, 0, s)
			db.sound[last_snd_key].last_snd[snd.rnd_id] = s
		end		
	end			
end

function load_sound(npc)
	sound_theme.load_sound(npc)
end