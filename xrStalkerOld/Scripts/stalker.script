module("level_tips")

function init    (obj)
	xr_motivator.AddToMotivator(obj)
end

lasthealth  = 0
lasttime	= 0
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	if object_binder.net_spawn(self,data) == false then
		return false
	else
		return true
	end    
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
    object_binder.reinit(self)

	printf("SET DEFAULT INFOS")
	if self.object:dont_has_info("storyline_actor_start") then
		self.object:give_info_portion("encyclopedy")
		self.object:give_info_portion("storyline_actor_start")
		self.object:give_info_portion("level_changer_icons")		
	end		
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:update(delta)
	object_binder.update(self, delta)
	--' Проверка потери жизни
if false then
	printf("%f * %f | %d", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
	lasthealth = self.object.health
	lasttime = game.time()
end

	--' Выдача подсказок
	level_tips.get_tips(self.object)

	--' Сюжет :)
	if	self.object:has_info("tutorial_artefact_start") and
		self.object:dont_has_info("tutorial_artefact_gain") and 
		self.object:object("af_blood") ~= nil 
	then		
		self.object:give_info_portion("tutorial_artefact_gain")
		self.object:set_task_state(task.completed, "tutorial_find_artefact", 0)
	end 

	if self.object:has_info("tutorial_wounded_help") then
		self.object:give_info_portion("tutorial_end")
		self.object:set_task_state(task.completed, "tutorial_help_wounded", 0)
	end

	if self.object:has_info("tutorial_wounded_die") then
		self.object:give_info_portion("tutorial_end")
		self.object:set_task_state(task.fail, "tutorial_help_wounded", 0)
	end

	if self.object:has_info("escape_stalker_die") then
		self.object:set_task_state(task.fail, "esc_help_wounded_from_raid", 0)
	end
	if self.object:has_info("escape_stalker_done") then
		self.object:set_task_state(task.completed, "esc_help_wounded_from_raid", 0)
	end

	if self.object:has_info("escape_stalker_to_trader_done") then
		self.object:set_task_state(task.completed, "esc_wounded_to_trader_gift", 0)
	end

	if	self.object:has_info("escape_artefact_start") and
		self.object:dont_has_info("escape_artefact_gain") and 
		(self.object:object("af_vyvert") ~= nil or
		 self.object:object("af_gravi") ~= nil or
		 self.object:object("af_gold_fish") ~= nil)
	then		
		self.object:give_info_portion("escape_artefact_gain")
		self.object:set_task_state(task.completed, "esc_trader_need_electra_artefact", 1)
	end 

	if self.object:has_info("escape_blockpost_case") and
	   self.object:object("quest_case_01") ~= nil
	then
		self.object:give_info_portion("escape_blockpost_case_have")
		self.object:set_task_state(task.completed, "esc_blockpost_case_to_trader", 1)
	end       	

	if self.object:has_info("escape_dynamite_start") and
	   self.object:object("dynamite") ~= nil
	then
		self.object:give_info_portion("escape_dynamite_have")
		self.object:set_task_state(task.completed, "esc_dinamit_to_volk", 1)
	end       	

--[[
       		if self.object:has_info("escape_need_agroprom_documents") and
       		   self.object:object("quest_case_02") ~= nil
       		then
       			self.object:give_info_portion("agroprom_take_agroprom_documents")
				self.object:set_task_state(task.completed, "agroprom_get_military_documents", 1)
       		end       	

			if self.object:has_info("garbage_find_stalker") and
       			self.object:object("garbage_letter") ~= nil
       		then
       			self.object:give_info_portion("garbage_find_dead_stalker")
       			self.object:give_info_portion("agroprom_meet_gunslinger_band")
				self.object:set_task_state(task.fail, "garbage_meet_stalker", 0)				
       		end       	

       		if self.object:has_info("agroprom_meet_gunslinger_band") and
       		   self.object:object("agroprom_notebook") ~= nil
       		then
       			self.object:give_info_portion("agroprom_find_gunslinger_band")
				self.object:set_task_state(task.fail, "agroprom_meet_gunslinger_band", 0)
       		end
]]
end
----------------------------------------------------------------------------------------------------------------------
function actor_init    (npc)
	npc:bind_object(actor_binder(npc))
end

function object_init    (obj)
	local obj_ini = obj:spawn_ini()
	if obj_ini == nil then return end
	
	if obj_ini:section_exist("tip") == true then
		if obj_ini:line_exist("tip", "label") == true then
			local ll = obj_ini:r_string("tip", "label")
			local st = string_table()
			text = st:get_by_id(ll)
			obj:set_tip_text(text)
		end
	end
	
	if obj_ini:section_exist("info") == true then
		if obj_ini:line_exist("info", "id") == true then
			obj:set_use_callback(object_info_callback)
		end
	end	
end

function object_info_callback(obj)
	local obj_ini = obj:spawn_ini()	
	local actor = level.actor()
	if obj_ini == nil or actor == nil then return end
	if obj_ini:section_exist("info") == true then
		if obj_ini:line_exist("info", "id") == true then
			local label = obj_ini:r_string("info", "id")
			actor:give_info_portion(label)			
		end
	end
end

function script_zone_init(obj)
	obj:bind_object(xr_zones.zone_binder(obj))
end
