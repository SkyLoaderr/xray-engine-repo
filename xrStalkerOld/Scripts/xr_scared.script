-- xr_scared
--
-- Created by: Andrey Fidrya, "Zmey", af@svitonline.com
-- 

monster_info = {}

local state_main = 1
local state_roof = 2
local state_hideout = 3

---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_scared" (property_evaluator)

function evaluator_need_scared:__init(storage, name) super(nil, name)
  	self.st = storage
end

function evaluator_need_scared:evaluate()
	if self.st.enabled then
		if not monster_info[self.st.monster] then
			monster_info[self.st.monster] = {}
		end
		if not monster_info[self.st.monster].stalker then
			--printf("evaluator_need_scared: self.st.monster=%s, stalker set", self.st.monster)
			monster_info[self.st.monster].stalker = self.object
		end
	end

  	return self.st.enabled == true
end

----------------------------------------------------------------------------------------------------------------------
class "action_scared_activity" (action_base)

function action_scared_activity:__init (npc_name, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = move_mgr.move_mgr()
end

function action_scared_activity:hit_callback(obj, amount, local_direction, who, bone_index)
	printf("HIT_CALLBACK [%d]: self.object.health=%s", device():time_global(), utils.to_str(self.object.health))
	local monster = level.object(self.st.monster)
	if monster:id() == who:id() then
	--if not self.object:alive() then
		--printf("HIT_CALLBACK_BY_MONSTER")
		local h = hit()
		h.power = 1000
		h.direction = monster:direction()
		h.bone = "bip01_legs"
		h.draftsman = monster
		h.impulse = 1000
		h.type = hit.wound
		self.object:hit(h)
	end
end

function action_scared_activity:initialize()
	--printf("_bp: action_scared_activity: initialize")
	action_base.initialize(self)
	self.object:set_node_evaluator()
	self.object:set_path_evaluator()
	self.object:set_desired_position()
	self.object:set_desired_direction()

	self.object:set_hit_callback(self, "hit_callback")

	self.move_mgr:initialize(self.object)

	self:reset_scheme()
end


function action_scared_activity:reset_scheme()
	--xr_reactions.add_rule(self.object, "ignore")

	if self.st.path_main_walk_info == nil then
		self.st.path_main_walk_info = utils.path_parse_waypoints(self.st.path_main_walk)
	end
	if self.st.path_main_look_info == nil then
		self.st.path_main_look_info = utils.path_parse_waypoints(self.st.path_main_look)
	end
	if self.st.path_hideout_walk_info == nil then
		self.st.path_hideout_walk_info = utils.path_parse_waypoints(self.st.path_hideout_walk)
	end
	if self.st.path_hideout_look_info == nil then
		self.st.path_hideout_look_info = utils.path_parse_waypoints(self.st.path_hideout_look)
	end
	if self.st.path_roof_walk_info == nil then
		self.st.path_roof_walk_info = utils.path_parse_waypoints(self.st.path_roof_walk)
	end
	if self.st.path_roof_look_info == nil then
		self.st.path_roof_look_info = utils.path_parse_waypoints(self.st.path_roof_look)
	end

	self.state = state_main
	self.move_mgr:reset(self.st.path_main_walk, self.st.path_main_walk_info,
		self.st.path_main_look, self.st.path_main_look_info,
		nil,
		{running = true, danger = true})
end	

function action_scared_activity:callback(mode, number)
	monster_info[self.st.monster].finish_me_off = true
	return false
end

function action_scared_activity:execute()
	action_base.execute(self)
	self.move_mgr:update()

	local actor = level.actor()
	if actor then
		local pos = self.object:position()
		local actor_pos = actor:position()
		--printf("_bp: self.state==%d, dead=%s", self.state, utils.to_str(monster_info[self.st.monster].dead))
		if self.state ~= state_hideout and monster_info[self.st.monster].dead then
			self.state = state_hideout
			self.move_mgr:reset(self.st.path_hideout_walk, self.st.path_hideout_walk_info,
				self.st.path_hideout_look, self.st.path_hideout_look_info,
				nil,
				{running = true, danger = true})
		elseif self.state == state_main and pos:distance_to(actor_pos) < 20 then
			self.state = state_roof
			self.move_mgr:reset(self.st.path_roof_walk, self.st.path_roof_walk_info,
				self.st.path_roof_look, self.st.path_roof_look_info,
				nil,
				{running = true, danger = true},
				{obj = self, func = self.callback})
			monster_info[self.st.monster].going_to_roof = true
		end
	end
	
end

function action_scared_activity:finalize()
	self.object:clear_hit_callback(true)
	self.move_mgr:finalize()
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
--scared binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini)
	if char_ini == nil  or char_ini:section_exist ("scared") == true then
  		local operators	= {}
	  	local properties  = {}

	   	local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
	 	properties["need_scared"] = xr_evaluators_id.zmey_scared_base + 1

	 	operators["action_scared"] = xr_actions_id.zmey_scared_base + 1

	   	-- // evaluators
		manager:add_evaluator(properties["need_scared"], this.evaluator_need_scared(xr_motivator.storage[npc:id()].scared, "scared_need"))

		local new_action = this.action_scared_activity(npc, "action_scared_activity", xr_motivator.storage[npc:id()].scared)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(properties["need_scared"], true))
	   	new_action:add_effect(world_property(properties["need_scared"], false))
		manager:add_action(operators["action_scared"], new_action)

	  	new_action = manager:action(xr_actions_id.alife)
	  	new_action:add_precondition(world_property(properties["need_scared"], false))

		if char_ini ~= nil then
			xr_scared.set_scared(npc)
		end
	end
end

-- Включение схемы
function set_scared(object, enabled,
		path_main_walk, path_main_look,
		path_hideout_walk, path_hideout_look,
		path_roof_walk, path_roof_look,
		monster)
	--printf("set_scared")
	local char_ini = object:spawn_ini()
	local st = xr_motivator.storage[object:id()].scared

	st.enabled = utils.conf_get_bool(char_ini, "scared", "enabled", enabled, object, true)
	st.path_main_walk = utils.conf_get_string(char_ini, "scared", "path_main_walk", path_main_walk, object, true)
	st.path_main_look = utils.conf_get_string(char_ini, "scared", "path_main_look", path_main_look, object, false)
	st.path_hideout_walk = utils.conf_get_string(char_ini, "scared", "path_hideout_walk", path_hideout_walk, object, true)
	st.path_hideout_look = utils.conf_get_string(char_ini, "scared", "path_hideout_look", path_hideout_look, object, false)
	st.path_roof_walk = utils.conf_get_string(char_ini, "scared", "path_roof_walk", path_roof_walk, object, true)
	st.path_roof_look = utils.conf_get_string(char_ini, "scared", "path_roof_look", path_roof_look, object, false)
	st.monster = utils.conf_get_string(char_ini, "scared", "monster", monster, object, true)

	if not monster_info[st.monster] then
		--printf("set_scared: st.monster = %s", st.monster)
		monster_info[st.monster] = { }
	end

	st.path_main_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_main_look_info = nil -- не загружены.
	st.path_hideout_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_hideout_look_info = nil -- не загружены.
	st.path_roof_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_roof_look_info = nil -- не загружены.

	if st.action ~= nil then
		st.action.reset_scheme(st.action)
	end
	xr_motivator.checkStorage(object)
end

