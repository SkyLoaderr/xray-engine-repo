
local leader_no_command					= 0
local leader_move                       = 1
local leader_stop                       = 2
local leader_speak						= 3
local leader_speak_enable				= 4
local leader_return                     = 5  
local leader_free                       = 6

local num_phrases = 10

----------------------------------------------------------------------------------------------------------------------
-- Evaluators
----------------------------------------------------------------------------------------------------------------------
-- Есть лидер
class "evaluator_leader_present" (property_evaluator)
function evaluator_leader_present:__init (name, storage) super (nil, name)
	self.a = storage
	self.time = 0
end
--------------
function evaluator_leader_present:evaluate ()
    if self.a.leader == nil then
       if self.a.leader_name == nil then 
          self.a.leader_name = self:get_leader ()
          if self.a.leader_name == nil then 
             return false 
          end   
       end
       self.a.leader = level.object (self.a.leader_name)
       if self.a.leader == nil then 
          return false 
       else
          table.insert (db.storage[self.a.leader:id()].followers, self.a)
          self.a.leader_id = self.a.leader:id ()
       end   
    end
    return true
end
--------------
function evaluator_leader_present:get_leader ()
    local gulag = xr_gulag.isUnderFraction (self.object)
    if gulag == nil then return nil end
    local t = xr_gulag.fraction[gulag]:getJob (self.object)
    if t ~= nil and t.leader ~= nil then 
       local name = xr_gulag.fraction[gulag]:nameStalkerOnJob (t.leader)
       if name ~= nil then 
          printf ("LEADER NAME %s", name) 
          return name 
       end   
    end
    if self.time == 0 then
       self.time = device ():time_global ()
       return nil
    else
       if device ():time_global () - self.time > 10000 then
          xr_gulag.resetJob (gulag, self.object) 
          return nil
       end
    end      
end

----------------------------------------------------------------------------------------------------------------------
-- Окончание следования
class "evaluator_follow" (property_evaluator)
function evaluator_follow:__init (name, storage) super (nil, name)
	self.a = storage
end
--------------
function evaluator_follow:evaluate ()
    return xr_logic.is_active (self.object, self.a)
end


----------------------------------------------------------------------------------------------------------------------
-- Окончание рейда
class "evaluator_raid" (property_evaluator)
function evaluator_raid:__init (name, storage) super (nil, name)
	self.a = storage
end
--------------
function evaluator_raid:evaluate ()
    return self.a.raid_process
end


----------------------------------------------------------------------------------------------------------------------
-- Actions
----------------------------------------------------------------------------------------------------------------------
-- Если нет лидера - стоим ждем
class "action_leader_wait" (action_base)
--------------
function action_leader_wait:__init (name, storage) super (nil, name)
	self.a = storage
    self.current_animation = 0
end
--------------
function action_leader_wait:initialize ()
    action_base.initialize (self)
    self.object:clear_animations ()
    
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.idle, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.stand)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_mental_state          (anim.free)
    self.object:set_sight                 (look.path_dir, nil, 0)
end
--------------
function action_leader_wait:execute ()
    action_base.execute                 (self)
    self.object:set_item                (object.idle, self.object:best_weapon ())
    xr_state.anim_update ("idle", self.object)
end
--------------
function action_leader_wait:finalize ()
    action_base.finalize (self)
    self.object:clear_animations ()
end
--------------


----------------------------------------------------------------------------------------------------------------------
-- Следуем за лидером
class "action_follow" (action_base)
function action_follow:__init (name, storage) super (nil, name)
	self.a = storage
    self.current_vertex_id = -1
    self.stage = 0
    self.leader_v_id = -1
    self.last_time = 0
    self.mental_state = anim.free
    self.time = 0
    self.dist = self.a.distance
    self.sound_s = { 
                   rnd = 100,
                   maxidle = math.random (30, 60),
                   sumidle = math.random (2, 10),
                   themes = { "weather", "state" } 
                   }
end
--------------
function action_follow:initialize ()
    action_base.initialize (self)

    self.object:set_callback (self, "move_callback", game_object.movement)
    self.object:clear_animations ()
    
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_item                  (object.activate, self.object:best_weapon ())
    self.object:set_detail_path_type      (move.line)
    self.object:set_body_state            (move.standing)
    self.object:set_movement_type         (move.stand)
    self.object:set_path_type             (game_object.level_path)
    self.object:set_mental_state          (self.a.mental_state)
    self.object:set_sight                 (look.path_dir, nil, 0)
    

    
    if self.stage ~= 3 then 
       self.stage = 0 
       self:check_path ()    
       if self.object:accessible (self.current_vertex_id) == false then 
          self.current_vertex_id = self.a.leader:level_vertex_id ()
       end   
       self.object:set_dest_level_vertex_id  (self.current_vertex_id)
       self.object:set_movement_type         (move.walk)
    else
       if self.a.escape_path == nil then 
          self.a.enabled = false
          self.stage = 0
          return true
       end         
       self.object:set_path_type (game_object.patrol_path)
       self.object:set_patrol_path (self.a.escape_path, patrol.nearest, patrol.stop, false)
       self.object:set_mental_state (anim.danger)
       self.object:set_movement_type (move.run)
    end   
    
    self.last_time = 0
end
---------------------------------------------------------------------------------------------------------------------
function action_follow:free ()
    local st = xr_gulag.isUnderFraction (self.object)
    if st ~= nil then
       xr_gulag.resetJob (st, self.object)
    else
       if xr_logic.try_switch_to_another_section (self.object, self.a, db.actor) then
           return
       end
    end
end
--------------
function action_follow:execute ()
    action_base.execute                 (self)
    
    if self.object:active_item () ~= nil then
       self.object:set_item (object.idle, self.object:best_weapon ())
    else
       self.object:set_item (object.activate, self.object:best_weapon ())     
    end   
    
    
    if self.a.leader_command == leader_free then
       self.a.stage = 0 
       self.a.enabled = false
       self:free ()
       return 
    end   
    
    if is_object_online (self.a.leader_id) == false then
       self.a.leader_command = leader_return
       self:check_path ()
       return
    end    
    
    --if self.dist ~= self.a.distance then
       self:recalculate_position ()
      -- self.dist = self.a.distance
    --end        
    
    if self.stage == 0 then 
       if self:check_path () == false then
          self:update_stage_0 ()
       end   
       if self.object:active_sound_count() == 0 then
          xr_sound.sound_update (self.object, self.sound_s)
       end
    elseif self.stage == 1 then        
       self:check_path     ()
       self:update_stage_1 ()
       if self.object:active_sound_count() == 0 then
          xr_sound.sound_update(self.object, self.sound_s)
       end
    elseif self.stage == 2 then
       self:update_stage_2 ()
    elseif self.stage == 3 then
       self.object:set_mental_state (anim.danger)
       self.object:set_movement_type (move.run)
    elseif self.stage == 4 then
       self:update_stage_4 ()         
    end       
end    
--------------
function action_follow:finalize ()
    action_base.finalize (self)
    self.object:clear_animations ()
    self.object:clear_callback (game_object.movement)
end
--------------
function action_follow:move_callback (obj, action_type, index)
    if index == -1 then return end
    if patrol (self.object:patrol ()):flag (index, 6) == true then
       self.a.stage = 0 
       self.a.enabled = false
       local st = xr_gulag.isUnderFraction (self.object)
       if st ~= nil then
          xr_gulag.resetJob (st, self.object)
       else   
          if xr_logic.try_switch_to_another_section (self.object, self.a, db.actor) then
              return
          end
       end
    end   
end
--------------
function action_follow:check_path ()

    if is_object_online (self.a.leader_id) == false or self.a.leader:alive () == false or self.a.leader_command == leader_return then 
       if self.a.escape_path == nil then 
          self.a.enabled = false
          return false
       end         
       self.object:set_path_type (game_object.patrol_path)
       self.object:set_patrol_path (self.a.escape_path, patrol.nearest, patrol.stop, false)
       self.object:set_mental_state (anim.danger)
       self.object:set_movement_type (move.run)
       self.stage = 3 
       return false
    end   
    
    self.object:set_mental_state (self.a.mental_state)
    if self.last_time - device ():time_global () > 0 then 
       return false 
    end
    self.last_time = 5000 + device ():time_global ()

    if self.current_vertex_id ~= -1 then
       if self.object:level_vertex_id () ~= self.current_vertex_id then --and self.current_vertex_id ~= -1 then 
          return false 
       end
    end   
    
    if self.a.leader_command == leader_stop then
       self.object:set_movement_type (move.stand)
       self.stage = 2  
       return false
    end   
    
    local cv_id = level.vertex_in_direction (self.a.leader:level_vertex_id (), self.a.direction, self.a.distance)
    if cv_id == -1 then 
       cv_id = self.a.leader:level_vertex_id ()
    end   
    if cv_id == self.current_vertex_id or self.object:accessible (cv_id) == false then 
       return false 
    end
    self.current_vertex_id = cv_id
    
    --local leader_direction = self.a.leader:direction ()
    --leader_direction.invert(leader_direction)
    --self.object:set_desired_direction (leader_direction)
    
    self.object:set_desired_direction (self.a.leader:direction ())
    self.object:set_dest_level_vertex_id  (self.current_vertex_id)   
    self.object:set_sight (look.path_dir, nil, 0)
    return false
end
--------------
function action_follow:recalculate_position ()
    local cv_id = level.vertex_in_direction (self.a.leader:level_vertex_id (), self.a.direction, self.a.distance)
    if cv_id == self.current_vertex_id then return end
    if cv_id == -1 then cv_id = self.a.leader:level_vertex_id () end
	stop_play_sound(self.object)
    if self.object:accessible (cv_id) == false then
       cv_id = self.a.leader:level_vertex_id ()
    end  
    self.current_vertex_id = cv_id
    self.object:set_desired_direction (self.a.leader:direction ())
    self.object:set_dest_level_vertex_id  (self.current_vertex_id)   
    self.object:set_sight (look.path_dir, nil, 0)
end
--------------
function action_follow:update_stage_0 ()

	if self.a.leader_command == leader_speak then
		stop_play_sound(self.object)
       self.a.leader_command = 0
    end   
    
	if self.a.leader_command == leader_speak_enable then
	   self.current_phrase = self.current_phrase + 1 
	   if self.current_phrase >= num_phrases then self.current_phrase = 0 end
       --xr_sounds.play_sound (self.object, 0, "commander_patrol", 1, 2, self.current_phrase)
       --self.object:play_sound (soldiers_idle_snd, 1, 0, 1, 0, self.current_phrase)
       self.a.leader_command = 0
    end   
	   

    if self.object:position ():distance_to (level.vertex_position (self.a.leader:level_vertex_id ())) < (self.a.distance * 3) then
       self.object:set_movement_type         (move.walk)
       self.object:set_mental_state          (self.a.mental_state)
       self.object:set_sight                 (look.path_dir, nil, 0)
       self.object:set_desired_direction     (self.a.leader:direction ())
       return
    end
    self.stage = 1
    self:update_stage_1 ()   
end
--------------
function action_follow:update_stage_1 ()
    if self.object:position ():distance_to (level.vertex_position (self.a.leader:level_vertex_id ())) < (self.a.distance + self.a.distance * 0.5) then
       self.stage = 0
       self:update_stage_0 ()
       return 
    end
    self.last_time = -1
    self.current_vertex_id = -1
    self:check_path ()
    self.object:set_movement_type         (move.run)
    self.object:set_mental_state          (anim.danger)
    self.object:set_sight                 (look.path_dir, nil, 0)
    self.object:set_desired_direction     (self.a.leader:direction ())
        
end
----------------------------------------------------------------------------------------------------------------------
function action_follow:update_stage_2 ()

    if self.a.leader:alive () == false or self.a.leader_command == leader_return then 
       self.object:clear_animations ()
       if self.a.escape_path == nil then 
          self.a.enabled = false
          return
       end         
       self.object:set_path_type (game_object.patrol_path)
       self.object:set_patrol_path (self.a.escape_path, patrol.nearest, patrol.stop, false)
       self.object:set_mental_state (anim.danger)
       self.object:set_movement_type (move.run)
       self.stage = 3 
       return
    end   

    if self.a.leader_command == leader_move then
       self.stage = 0
       self.object:clear_animations ()
       return
    end 
    --if self.object:animation_count () <= 1 then
       --self:set_animation ()
    --end    
    self.object:set_movement_type (move.stand)
    xr_state.anim_update ("idle", self.object)
end
----------------------------------------------------------------------------------------------------------------------
function action_follow:update_stage_4 ()
    if device ():time_global () - self.time > 1500 then
       self.stage = 2
       return
    end    
end
----------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------
class "action_raid" (action_base)
-------------
function action_raid:__init (name, storage) super (nil, name)
    self.a = storage
	self.move_mgr = move_mgr.move_mgr (storage.npc)
end
-------------
function action_raid:initialize ()
    action_base.initialize (self)
    
	self.move_mgr:initialize ()
    if self.a.raid_path == nil or self.a.raid_look == nil then
       utils.abort ("Raid path not defined for patrol soldier %s", self.object:name ())
    end
    
    self.object:clear_animations          ()
    self.object:set_node_evaluator        ()
    self.object:set_path_evaluator        ()
    self.object:set_desired_position      ()
    self.object:set_desired_direction     ()
	
	self:reset_scheme ()
end
-------------
function action_raid:execute ()
    action_base.execute (self)
    
    self.move_mgr:update ()
    
end    
-------------
function action_raid:finalize ()
	self.move_mgr:finalize ()
    action_base.finalize (self) 
end
-------------
function action_raid:reset_scheme ()
    if self.a.raid_path == nil then return end

	if self.a.path_walk_info == nil then
	   self.a.path_walk_info = utils.path_parse_waypoints(self.a.raid_path)
	end
	if self.a.path_look_info == nil then 
	   self.a.path_look_info = utils.path_parse_waypoints(self.a.raid_look)
	end   
	self.move_mgr:reset(self.a.raid_path, self.a.path_walk_info, self.a.raid_look, self.a.path_look_info, self.a.team, nil, {obj = self, func = self.callback})
end	
-------------
function action_raid:callback (mode, number)
    if number == 0 then 
       self.a.raid_process = false 
       return true
    end   
    return false
end
----------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
function  add_to_binder(npc, ini, scheme, section, storage)
	local operators		= {}
	local properties	= {}
	
	local manager = npc:motivation_action_manager ()

	properties["leader_present"]        = xr_evaluators_id.sidor_follower_base + 0
	properties["follow"]                = xr_evaluators_id.sidor_follower_base + 1
	properties["raid"]                  = xr_evaluators_id.sidor_follower_base + 2

	operators["leader_wait"]            = xr_actions_id.sidor_act_follower_base + 0
	operators["follow"]                 = xr_actions_id.sidor_act_follower_base + 1
	operators["raid"]                   = xr_actions_id.sidor_act_follower_base + 2
   
    manager:add_evaluator (properties["leader_present"], this.evaluator_leader_present 	("follower_leader_alive", storage))
    manager:add_evaluator (properties["follow"], this.evaluator_follow	("follower_follow", storage))
    manager:add_evaluator (properties["raid"], this.evaluator_raid ("follower_raid", storage))
        
    local action = this.action_leader_wait ("action_leader_wait", storage)
    action:add_precondition     (world_property (stalker_ids.property_alive,    true))
    action:add_precondition     (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition     (world_property (properties["leader_present"],  false))
    xr_motivator.addCommonPrecondition(action)
    action:add_effect           (world_property (properties["leader_present"],  true))
    manager:add_action (operators["leader_wait"], action)
    military_radio.add (npc, action)
    
    action = this.action_follow ("action_follow", storage)
    action:add_precondition     (world_property (stalker_ids.property_alive,    true))
    action:add_precondition     (world_property (stalker_ids.property_enemy,    false))
    action:add_precondition     (world_property (properties["leader_present"],  true))
    action:add_precondition     (world_property (properties["raid"],            false))
    action:add_precondition     (world_property (properties["follow"],          true))
    xr_motivator.addCommonPrecondition(action)
    action:add_effect           (world_property (properties["follow"],          false))
    manager:add_action (operators["follow"], action)
    military_radio.add (npc, action)
    
    action = this.action_raid ("action_raid", storage)
    action:add_precondition (world_property(stalker_ids.property_alive, true))
    action:add_precondition (world_property(stalker_ids.property_enemy, false))
    action:add_precondition (world_property(properties["follow"], true))
    action:add_precondition (world_property(properties["raid"], true))
    xr_motivator.addCommonPrecondition(action)
    action:add_effect (world_property(properties["raid"], false))
    manager:add_action (operators["raid"], action)
    
    xr_logic.subscribe_action_for_events (npc, storage, action)
    
    action = manager:action     (xr_actions_id.alife)
    action:add_precondition     (world_property (properties["follow"],  false))

end
----------------------------------------------------------------------------------------------------------------------
function set_scheme (npc, ini, scheme, section, gulag_name)

	local st = xr_logic.assign_storage_and_bind (npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions (ini, section, npc)

	st.patrol_look  = utils.cfg_get_string (ini, section, "escape_path", npc, false, gulag_name)
	st.raid_path    = utils.cfg_get_string (ini, section, "raid_path",   npc, false, gulag_name)
	st.raid_look    = utils.cfg_get_string (ini, section, "raid_look",   npc, false, gulag_name)
	st.team         = utils.cfg_get_string (ini, section, "team",        npc, false, gulag_name)
    st.leader_name  = utils.cfg_get_string (ini, section, "leader_name", npc, true, "")
    
    st.leader_id = -1
    
    if st.leader_name == "empty" then st.leader_name = nil end
	
	st.mental_state = anim.free
    st.raid_process = false
	st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут еще
	st.path_look_info = nil -- быть не загружены.
	st.leader = nil
	st.direction = vector ():set (0, 0, 1)
	st.distance = 3
	st.look_dir = vector ():set (0, 0, 1)
	st.leader_command = leader_move
	st.npc = npc
	st.npc_id = npc:id ()
end
----------------------------------------------------------------------------------------
