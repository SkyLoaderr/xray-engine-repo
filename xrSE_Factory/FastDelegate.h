#ifndef fastdelegateH
#define fastdelegateH

#pragma pack(push,4)

//						FastDelegate.h 
//	Efficient delegates in C++ that generate only two lines of asm code!
//  Documentation is found at http://www.codeproject.com/cpp/FastDelegate.asp
//
//						- Don Clugston, Mar 2004.
// History:
// 24-Apr-04 1.0  Submitted to CodeProject.
// 28-Apr-04 1.1  * Prevent most unsafe uses of evil static function hack.
//				  * Improved syntax for horrible_cast (thanks Paul Bludov).
//				  * Tested on Metrowerks MWCC and Intel ICL (IA32)
//				  * Compiled, but not run, on Comeau C++ and Intel Itanium ICL.
//	27-Jun-04 1.2 * Now works on Borland C++ Builder 5.5
//				  * Now works on /clr "managed C++" code on VC7, VC7.1
//				  * Comeau C++ now compiles without warnings
//				  * Prevent the virtual inheritance case from being used on 
//					  VC6 and earlier, which generate incorrect code
//				  * Improved warning and error messages. Non-standard hacks
//					 now have compile-time checks to make them safer.
//				  * implicit_cast used instead of static_cast in many cases
//				  * If calling a const member function, a const class pointer can be used.
//				  * MakeDelegate() global helper function added to simplify pass-by-value.
//				  * Added fastdelegate.clear()

////////////////////////////////////////////////////////////////////////////////
//						Configuration options
//
////////////////////////////////////////////////////////////////////////////////

// Uncomment the following #define for optimally-sized of delegates.
// In this case, the generated asm code is almost identical to the code you'd get
// if the compiler had native support for delegates.
// It will not work on systems where sizeof(dataptr) < sizeof(codeptr). 
// Thus, it will not work for DOS compilers using the medium model. It will also
// probably fail on some DSP systems.
#define FASTDELEGATE_USESTATICFUNCTIONHACK

////////////////////////////////////////////////////////////////////////////////
//						General tricks used in this code
//
// (a) Error messages are generated by typdefing an array of negative size to
//     generate compile-time errors.
// (b) Warning messages on MSVC are generated by declaring unused variables, and
//	    enabling the "variable XXX is never used" warning.
// (c) Unions are used in a few compiler-specific cases to perform illegal casts.
// (d) For Microsoft and Intel, when adjusting the 'this' pointer, it's cast to
//     (char *) first to ensure that the correct number of *bytes* are added.
//
////////////////////////////////////////////////////////////////////////////////
//						Workarounds and helper templates
//
////////////////////////////////////////////////////////////////////////////////

// This next macro ensures that class 'CLASSNAME' uses full generality 
// member function pointers.
// It is only required for the virtual inheritance case in Intel, 
// and in MSVC 7.0 and greater when the /vmg compiler option is not used. 
// It just declares a harmless constant in an private namespace, but in doing so,
// it forces the compiler to use full generality member function pointers for the class.
// Because of a compiler bug, this workaround doesn't work in VC6 and earlier.
#if defined(_MSC_VER) && !defined(__MWERKS__) && (_MSC_VER>=1300)
#define FASTDELEGATEDECLARE(CLASSNAME)		\
class CLASSNAME;							\
namespace fastdelegate { namespace detail {	\
const int CLASSNAME##workaround = sizeof( void (CLASSNAME::*)(void)); } }

#else
// On other compilers, just forward-declare the class.
#define FASTDELEGATEDECLARE(CLASSNAME)	class CLASSNAME;

#endif

namespace fastdelegate {
namespace detail {	// we'll hide the implementation details in a nested namespace.

//		implicit_cast< >
// I believe this was originally going to be in the C++ standard but 
// was left out by accident. It's even milder than static_cast.
// I use it instead of static_cast<> to emphasize that I'm not doing
// anything nasty. 
// Usage is identical to static_cast<>
template <class OutputClass, class InputClass>
inline OutputClass implicit_cast(InputClass input){
	return input;
}

//		horrible_cast< >
// This is truly evil. It completely subverts C++'s type system, allowing you 
// to cast from any class to any other class. Technically, using a union 
// to perform the cast is undefined behaviour (even in C). But we can see if
// it is OK by checking that the union is the same size as each of its members.
// horrible_cast<> should only be used for compiler-specific workarounds. 
// Usage is identical to reinterpret_cast<>.
template <class OutputClass, class InputClass>
inline OutputClass horrible_cast(const InputClass input){
	union {
		OutputClass out;
		InputClass in;
	} u;
	// Cause a compile-time error if in, out and u are not the same size.
	// If the compile fails here, it means the compiler has peculiar
	// unions which would prevent the cast from working.
	typedef int ERROR_CantUsehorrible_cast[sizeof(InputClass)==sizeof(u) 
		&& sizeof(InputClass)==sizeof(OutputClass) ? 1 : -1];
	u.in = input;
	return u.out;
}



////////////////////////////////////////////////////////////////////////////////
//						Fast Delegates, part 1:
//
//		Conversion of member function pointer to a standard form
//
////////////////////////////////////////////////////////////////////////////////

// GenericClass is a fake class, ONLY used to provide a type.
// It is vitally important that it is never defined, so that the compiler doesn't
// think it can optimize the invocation. For example, Borland generates simpler
// code if it knows the class only uses single inheritance.

// Microsoft and Intel need to be treated as a special case.
// Metrowerks CodeWarrior and Intel fraudulently define Microsoft's identifier, _MSC_VER
#if defined(_MSC_VER) && !defined(__MWERKS__)  
	class __single_inheritance GenericClass;
	// For Microsoft, we want to ensure that it's the most efficient type of MFP 
	// (4 bytes), even when the /vmg option is used. Declaring an empty class 
	// would give 16 byte pointers in this case.
	// If compiled with the /clr option ("managed C++"), the JIT compiler thinks
	// it needs to load GenericClass before it can call any of its functions,
	// so we need to declare an empty class to make it happy.
	class GenericClass {};
#else
	class GenericClass;
#endif

// The size of a single inheritance member function pointer.
const int SINGLE_MEMFUNCPTR_SIZE = sizeof(void (GenericClass::*)());

//						SimplifyMemFunc< >::Convert()
//
//	A template function that converts an arbitrary member function pointer into the 
//	simplest possible form of member function pointer, using a supplied 'this' pointer.
//  According to the standard, this can be done legally with reinterpret_cast<>.
//	For (non-standard) compilers which use member function pointers which vary in size 
//  depending on the class, we need to use	knowledge of the internal structure of a 
//  member function pointer, as used by the compiler. Template specialization is used
//  to distinguish between the sizes. Because some compilers don't support partial 
//	template specialisation, I use full specialisation of a wrapper struct.

// general case -- don't know how to convert it. Force a compile failure
template <int N>
struct SimplifyMemFunc {
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
		GenericMemFuncType &bound_func) { 
		// Unsupported member function type -- force a compile failure.
	    // (it's illegal to have a array with negative size).
		typedef char ERROR_Unsupported_member_function_pointer_on_this_compiler[N-100];
		return 0; 
	}
};

// For compilers where all member func ptrs are the same size, everything goes here.
// For non-standard compilers, only single_inheritance classes go here.
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE>  {	
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
			GenericMemFuncType &bound_func) {
#if defined __DMC__  
		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
		// even though the standard says you can. The 32-bit compiler lets you
		// static_cast through an int, but the DOS compiler doesn't.
//		bound_func = static_cast<GenericMemFuncType>(static_cast<int>(function_to_bind));
		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
#endif
        return reinterpret_cast<GenericClass *>(pthis);
	}
};

////////////////////////////////////////////////////////////////////////////////
//						Fast Delegates, part 1b:
//
//					Workarounds for Microsoft and Intel
//
////////////////////////////////////////////////////////////////////////////////


// Compilers with member function pointers which violate the standard (MSVC, Intel),
// need to be treated as a special case. Metrowerks and Intel both fraudently pretend
// to be MSVC, so we need to filter Metrowerks out.
#if defined(_MSC_VER) && !defined(__MWERKS__)

// We use unions to perform horrible_casts. I would like to use #pragma pack(push, 1)
// at the start of each function for extra safety, but VC6 seems to ICE
// intermittently if you do this inside a template.

// __multiple_inheritance classes go here
// Nasty hack for Microsoft and Intel (IA32 and Itanium)
template<>
struct SimplifyMemFunc< SINGLE_MEMFUNCPTR_SIZE + sizeof(int) >  {
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
		GenericMemFuncType &bound_func) { 
		// We need to use a horrible_cast to do this conversion.
		// In MSVC, a multiple inheritance member pointer is internally defined as:
        union {
			XFuncType func;
			struct {	 
				GenericMemFuncType m_funcaddress; // points to the actual member function
				int m_delta;	     // #BYTES to be added to the 'this' pointer
			}s;
        } u;
		// Check that the horrible_cast will work
		typedef int ERROR_CantUsehorrible_cast[sizeof(function_to_bind)==sizeof(u.s)? 1 : -1];
        u.func = function_to_bind;
		bound_func = u.s.m_funcaddress;
		return reinterpret_cast<GenericClass *>(reinterpret_cast<char *>(pthis) + u.s.m_delta); 
	}
};

// virtual inheritance is a real nuisance. It's inefficient and complicated.
// On MSVC and Intel, we don't have enough information to convert it to a closure pointer,
// so we generate a compile-time error. There are two workarounds which avert the problem.
// Unfortunately, on MSVC6 there is a compiler bug (discussed below) which means that neither
// workaround is possible.

#if (_MSC_VER <1300)
// VC6 case. The best we can do is generate a warning that the code may be incorrect,
// and if the compiler bug occurs, crash the program immediately before something worse
// happens. The program will crash as soon as there's an attempt to set the delegate,
// so it should be easy to detect the source of the error (note that it will be on
// one of the lines which generated the warning message).

// This is a trick: we only want a warning message if the code is actually used.
#pragma warning(push)
#pragma warning(1: 4101) // enable the 'uninitialized variable' warning.

template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 2*sizeof(int) >
{
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
		GenericMemFuncType &bound_func) {

		union {
			XFuncType func;
			// In VC++ and ICL, a virtual_inheritance member pointer 
			// is internally defined as:
			struct {
				GenericMemFuncType m_funcaddress; // points to the actual member function
				int m_delta;		// #bytes to be added to the 'this' pointer
				int m_vtable_index; // or 0 if no virtual inheritance
			}s;
		} u;
		// Check that the horrible_cast will work
	typedef int ERROR_CantUsehorrible_cast[sizeof(function_to_bind)==sizeof(u.s)? 1 : -1];

		u.func = function_to_bind;
		bound_func = u.s.m_funcaddress;

		// Generate an 'unused variable' warning in MSVC6. The code is not
		// guaranteed to work.
		// Because MSVC and ICL use non-standard member pointers, it's not
		// possible to guarantee that the code is correct in this case.	
		// Fortunately, the wrong function is only called in very obscure cases.
		// It only occurs when a derived class overrides a virtual function declared 
		// in a virtual base class, and the member function 
		// points to the *Derived* version of that function. The problem can be
		// completely averted in 100% of cases by using the *Base class* for the 
		// member fpointer. Ie, if you use the base class as an interface, you'll
		// stay out of trouble.
		// If you get this warning, try to replace the derived class member 
		// function pointer with the equivalent base class member function pointer.
		// Occasionally, you might want to point directly to a derived class function
		// that isn't an override of a base class. We can generate correct code 
		// in this case, but it can't be guaranteed at compile time. To prevent an 
		// incorrect call from ever being made, on MSVC6 we generate a warning, and
		// crash the program at runtime if disaster is about to strike.
		// On VC7 and later, and on ICL, there are workarounds but 
		// they don't work on VC6 due to a compiler bug.
		int WARNING_PossibleIncorrectCodeGenerated;

		if (u.s.m_vtable_index) {
			// Abandon hope beyond this point. Crash the program immediately
			// before anything worse happens.
			// If your program crashes here, it means that you used a *derived class* 
			// member function pointer to an overriden virtual function.
			// If you change it to specify the same function via a base class member 
			// fpointer, the problem will disappear. (It should be easy to find the 
			// offending statement by digging down the call stack).
			int *Force_A_Crash=0;
			*Force_A_Crash = 1;
		}
        return reinterpret_cast<GenericClass *>(
			reinterpret_cast<char *>(pthis) + u.s.m_delta);
	}
};

#pragma warning(pop)

// Nasty hack for Microsoft Visual C++ 6.0
// unknown_inheritance classes go here
// There is a compiler bug in MSVC6 which generates incorrect code in this case!!
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 3*sizeof(int) >
{
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
		GenericMemFuncType &bound_func) {
		// There is an apalling but obscure compiler bug in MSVC6 and earlier:
		// vtable_index and 'vtordisp' are always set to 0 in the 
		// unknown_inheritance case!
		// This means that an incorrect function could be called!!!
		// Compiling with the /vmg option leads to potentially incorrect code.
		// This is probably the reason that the IDE has a user interface for specifying
		// the /vmg option, but it is disabled -  you can only specify /vmg on 
		// the command line. In VC1.5 and earlier, the compiler would ICE if it ever
		// encountered this situation.
		// It is OK to use the /vmg option if /vmm or /vms is specified.

		// Fortunately, the wrong function is only called in very obscure cases.
		// It only occurs when a derived class overrides a virtual function declared 
		// in a virtual base class, and the member function 
		// points to the *Derived* version of that function. The problem can be
		// completely averted in 100% of cases by using the *Base class* for the 
		// member fpointer. Ie, if you use the base class as an interface, you'll
		// stay out of trouble.
		// Occasionally, you might want to point directly to a derived class function
		// that isn't an override of a base class. In this case, both vtable_index 
		// and 'vtordisp' are zero, but a virtual_inheritance pointer will be generated.
		// We can generate correct code in this case. To prevent an incorrect call from
		// ever being made, on MSVC6 we generate a warning, and call a function to 
		// make the program crash instantly. 
		typedef char ERROR_VC6CompilerBug[-100];
		return 0; 
	}
};


#else 

// MSVC 7 and above. 
// On MSVC and Intel, we don't have enough information to convert it to a closure pointer,
// so we generate a compile-time error. There are two workarounds which avert the problem.
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 2*sizeof(int) >
{
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
		GenericMemFuncType &bound_func) { 
		// Virtual inheritance pointers are non-standard in MSVC -- force a compile failure.
	    // (it's illegal to have a array with negative size).
		// There are two alternative workarounds:
		// (a) use the FASTDELEGATEDECLARE(CLASSNAME) macro before the declaration
		//     of the class; or
		// (b) compile your project with the /vmg compiler option.
		// For Intel, you have to use the macro.
		typedef char ERROR_VirtualInheritanceIsUnsafeOnMSVC[-100];
		return 0; 
	}
};

// Nasty hack for Microsoft and Intel (IA32 and Itanium)
// unknown_inheritance classes go here 
// This is probably the ugliest bit of code I've ever written. Look at the casts!
// There is a compiler bug in MSVC6 which prevents it from using this code.
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 3*sizeof(int) >
{
	template <class X, class XFuncType, class GenericMemFuncType>
	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
			GenericMemFuncType &bound_func) {
		// The member function pointer is 16 bytes long. We can't use a normal cast, but
		// we can use a union to do the conversion.
		union {
			XFuncType func;
			// In VC++ and ICL, an unknown_inheritance member pointer 
			// is internally defined as:
			struct {
				GenericMemFuncType m_funcaddress; // points to the actual member function
				int m_delta;		// #bytes to be added to the 'this' pointer
				int m_vtordisp;		// #bytes to add to 'this' to find the vtable
				int m_vtable_index; // or 0 if no virtual inheritance
			} s;
		} u;
		// Check that the horrible_cast will work
		typedef int ERROR_CantUsehorrible_cast[sizeof(XFuncType)==sizeof(u.s)? 1 : -1];
		u.func = function_to_bind;
		bound_func = u.s.m_funcaddress;
		int virtual_delta = 0;
		if (u.s.m_vtable_index) { // Virtual inheritance is used
			// First, get to the vtable. 
			// It is 'vtordisp' bytes from the start of the class.
			const int * vtable = *reinterpret_cast<const int *const*>(
				reinterpret_cast<const char *>(pthis) + u.s.m_vtordisp );

			// 'vtable_index' tells us where in the table we should be looking.
			virtual_delta = u.s.m_vtordisp + *reinterpret_cast<const int *>( 
				reinterpret_cast<const char *>(vtable) + u.s.m_vtable_index);
		}
		// The int at 'virtual_delta' gives us the amount to add to 'this'.
        // Finally we can add the three components together. Phew!
        return reinterpret_cast<GenericClass *>(
			reinterpret_cast<char *>(pthis) + u.s.m_delta + virtual_delta);
	};
};
#endif // MSVC 7 and greater

#endif // MS/Intel hack.

////////////////////////////////////////////////////////////////////////////////
//						Fast Delegates, part 2:
//
//	Define the delegate storage, and cope with static functions
//
////////////////////////////////////////////////////////////////////////////////

//						ClosurePtr<>
// 
// This class stores a delegate. GenericMemFunc must be a type of GenericClass 
// member function pointer. StaticFuncPtr must be a type of function pointer 
// with the same signature as GenericMemFunc.

// There's no 'varargs' template functionality in C++ at present, so we need a 
// wrapper class to do the invoking and the function typedefs. 
// This class does everything else.

// There are a few ways of dealing with static function pointers.
// There's a standard-compliant, but tricky method.
// There's also a straightforward hack, that won't work on DOS compilers using the
// medium memory model. It's so evil that I can't recommend it, but I've
// implemented it anyway because it produces very nice asm code.
// Both methods are identical for member functions.

// Originally, the fastdelegate classes derived from ClosurePtr, but in order to get
// it to compile on BCB 5.5, I had to change the code to use encapsulation.
// This makes the code soemwhat convoluted: it has to receive pointers to the
// parent class when copying and checking for equality.


#if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)

//				ClosurePtr<> - Safe version
//
// This implementation is standard-compliant, but a bit tricky.
// I store the function pointer inside the class, and the delegate then
// points to itself. Whenever the delegate is copied, these self-references
// must be transformed, and this complicates the = and == operators.

template < class GenericMemFunc, class StaticFuncPtr>
class ClosurePtr {
private:
	GenericClass *m_pthis;
	GenericMemFunc m_pFunction;
	StaticFuncPtr m_pStaticFunction;
public:
	// The next two functions are for operator ==, =, and the copy constructor.
	// We may need to convert the m_pthis pointers, so that
	// they remain as self-references.
	template< class DerivedClass >
	inline bool IsEqual (const DerivedClass *pParent, const ClosurePtr &x, const DerivedClass *xParent) const{
		if (m_pFunction!=x.m_pFunction) return false;
		if (reinterpret_cast<const GenericClass *>(pParent)!=m_pthis) return m_pthis==x.m_pthis;
		if (reinterpret_cast<const GenericClass *>(xParent)!=x.m_pthis) return false;
		return m_pStaticFunction==x.m_pStaticFunction;
	}

	template< class DerivedClass >
	inline void CopyFrom (DerivedClass *pParent, const ClosurePtr &x, const DerivedClass *xParent) {
		if (x.m_pthis==reinterpret_cast<const GenericClass *>(xParent)) {
			// transform self references...
			m_pthis=reinterpret_cast<GenericClass *>(pParent); 
			m_pStaticFunction=x.m_pStaticFunction;
		} else m_pthis=x.m_pthis;
		m_pFunction = x.m_pFunction;
	}

	// These functions are for setting the delegate to a member function, or to a 
	// static function.
	// Here's the clever bit: we convert an arbitrary member function into a 
	// standard form. XMemFunc should be a member function of class X, but I can't 
	// enforce that here. It needs to be enforced by the wrapper class.
	template < class X, class XMemFunc >
	inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
			::Convert(pthis, function_to_bind, m_pFunction);
	}
	// For const member functions, we only need a const class pointer.
	// Since we know that the member function is const, it's safe to 
	// remove the const qualifier from the 'this' pointer with a const_cast.
	// VC6 has problems if we just overload 'bindmemfunc', so we give it a different name.
	template < class X, class XMemFunc>
	inline void bindconstmemfunc(const X *pthis, XMemFunc const function_to_bind) {
		m_pthis= SimplifyMemFunc< sizeof(function_to_bind) >
			::Convert(const_cast<X*>(pthis), function_to_bind, m_pFunction);
	}
	// For static functions, the 'static_function_invoker' class in the parent 
	// will be called. The parent then needs to call GetStaticFunction() to find out 
	// the actual function to invoke.
	template < class DerivedClass, class ParentInvokerSig >
	inline void bindstaticfunc(DerivedClass *pParent, ParentInvokerSig static_function_invoker, 
				StaticFuncPtr function_to_bind ) {
		m_pStaticFunction=function_to_bind; 
		bindmemfunc(pParent, static_function_invoker);
	}
	// These functions are required for invoking the stored function
	inline GenericClass *GetClosureThis() const { return m_pthis; };
	inline GenericMemFunc GetClosureMemPtr() const { return m_pFunction; };
	inline StaticFuncPtr GetStaticFunction() const { return m_pStaticFunction; };
	ClosurePtr() : m_pthis(0), m_pFunction(0) {};
	inline bool operator ! () const		// Is it bound to anything?
	{ return (m_pFunction)==0; };
	void clear() {
		m_pthis=0; m_pFunction=0;
	}
};

#else

//				ClosurePtr<> - Evil version
//
// For compilers where data pointers are at least as big as code pointers, it is 
// possible to store the function pointer in the this pointer, using another 
// horrible_cast. Invocation isn't any faster, but it saves 4 bytes, and
// speeds up comparison and assignment. If C++ provided direct language support
// for delegates, they would produce asm code that was almost identical to this.
// Note that the Sun C++ and MSVC documentation explicitly state that they 
// support static_cast between void * and function pointers.

template < class GenericMemFunc, class StaticFuncPtr>
class ClosurePtr {
private:
	GenericClass *m_pthis;
	GenericMemFunc m_pFunction;
public:
	// The next two functions are for operator ==, =, and the copy constructor.
	template< class DerivedClass >
	inline bool IsEqual (const DerivedClass *pParent, const ClosurePtr &x, const DerivedClass *xParent) const{
		return m_pFunction==x.m_pFunction && m_pthis==x.m_pthis;
	}
	template< class DerivedClass >
	inline void CopyFrom (DerivedClass *pParent, const ClosurePtr &x, const DerivedClass *xParent) {
		m_pFunction= x.m_pFunction; m_pthis=x.m_pthis;
	}
	// These functions are for setting the delegate to a member function, or to a 
	// static function.
	// Here's the clever bit: we convert an arbitrary member function into a 
	// standard form. XMemFunc should be a member function of class X, but I can't 
	// enforce that here. It needs to be enforced by the wrapper class.
	template < class X, class XMemFunc >
	inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
		m_pthis= SimplifyMemFunc< sizeof(function_to_bind) >
			::Convert(pthis, function_to_bind, m_pFunction);
	}
	// For const member functions, we only need a const class pointer.
	// Since we know that the member function is const, 
	// it's safe to remove the const qualifier from the
	// 'this' pointer with a const_cast.
	template < class X, class XMemFunc>
	inline void bindconstmemfunc(const X *pthis, XMemFunc const function_to_bind) {
		m_pthis= SimplifyMemFunc< sizeof(function_to_bind) >
			::Convert(const_cast<X*>(pthis), function_to_bind, m_pFunction);
	}

	// For static functions, the 'static_function_invoker' class in the parent 
	// will be called. The parent then needs to call GetStaticFunction() to find out 
	// the actual function to invoke.
	// ******** EVIL, EVIL CODE! *******
	template < 	class DerivedClass, class ParentInvokerSig>
	inline void bindstaticfunc(DerivedClass *pParent, ParentInvokerSig static_function_invoker, 
				StaticFuncPtr function_to_bind) {
		// We'll be ignoring the 'this' pointer, but we need to make sure we pass
		// a valid value to bindmemfunc().
		bindmemfunc(pParent, static_function_invoker);

		// WARNING! Evil hack. We store the function in the 'this' pointer!
		// Ensure that there's a compilation failure if function pointers 
		// and data pointers have different sizes.
		// If you get this error, you need to #undef FASTDELEGATE_USESTATICFUNCTIONHACK.
		typedef int ERROR_CantUseEvilMethod[sizeof(GenericClass *)==sizeof(function_to_bind) ? 1 : -1];
		m_pthis = horrible_cast<GenericClass *>(function_to_bind);
		// MSVC and DMC accept the following (non-standard) code:
//		m_pthis = static_cast<GenericClass *>(static_cast<void *>(function_to_bind));
		// BCC32, Comeau and DMC accept this method. MSVC7.1 needs __int64 instead of long
//		m_pthis = reinterpret_cast<GenericClass *>(reinterpret_cast<long>(function_to_bind));
	}
	// These functions are required for invoking the stored function
	inline GenericClass *GetClosureThis() const { return m_pthis; };
	inline GenericMemFunc GetClosureMemPtr() const { return m_pFunction; };
	// ******** EVIL, EVIL CODE! *******
	// This function will be called with an invalid 'this' pointer!!
	// We're just returning the 'this' pointer, converted into
	// a function pointer!
	inline StaticFuncPtr GetStaticFunction() const {
		// Ensure that there's a compilation failure if function pointers 
		// and data pointers have different sizes.
		// If you get this error, you need to #undef FASTDELEGATE_USESTATICFUNCTIONHACK.
		typedef int ERROR_CantUseEvilMethod[sizeof(StaticFuncPtr)==sizeof(this) ? 1 : -1];
		return horrible_cast<StaticFuncPtr>(this);
	};
	ClosurePtr() : m_pthis(0), m_pFunction(0) {};
	inline bool operator ! () const		// Is it bound to anything?
	{ return (m_pFunction)==0; }
	void clear() {
		m_pthis=0; m_pFunction=0;
	}
};

#endif // !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)

} // namespace detail

////////////////////////////////////////////////////////////////////////////////
//						Fast Delegates, part 3:
//
//				Wrapper classes to ensure type safety
//
////////////////////////////////////////////////////////////////////////////////


// Once we have the member function conversion templates, it's easy to make the
// wrapper classes. So that they will work with as many compilers as possible, 
// the classes are of the form
//   FastDelegate3<int, char *, double>
// They can cope with any combination of parameters. The max number of parameters
// allowed is 8, but it is trivial to increase this limit.
// If C++ had some kind of 'varargs' facility for templates, implementation 
// would be very simple. Without them, it's tedious, and leads to very repetitive
// code. 
// I'm lazy, and I hate repetitive code (it's too easy to make a typographical 
// error), so I've abused the preprocessor. An alternative approach would be to 
// use the boost preprocessor library.
// Note that we need to treat const member functions seperately.

// Because of the weird rule about the class of derived member function pointers,
// you sometimes need to apply a downcast to the 'this' pointer.
// This is the reason for the use of "implicit_cast<X*>(pthis)" in the code below. 
// If CDerivedClass is derived from CBaseClass, but doesn't override SimpleVirtualFunction,
// without this trick you'd need to write:
//		MyDelegate(static_cast<CBaseClass *>(&d), &CDerivedClass::SimpleVirtualFunction);
// but with the trick you can write
//		MyDelegate(&d, &CDerivedClass::SimpleVirtualFunction);


// Wrapper class. Defined as a macro because I'm lazy.
// All this class does is to enforce type safety, and invoke the delegate with
// the correct list of parameters.

#define DLGT_DECLAREDELEGATE(NUM, FUNCLIST, INVOKELIST)							\
class FastDelegate##NUM { 														\
private:																		\
	typedef void (detail::GenericClass::*GenericMemFn)FUNCLIST;					\
	typedef void (*StaticFunctionPtr)FUNCLIST;									\
	detail::ClosurePtr<GenericMemFn, StaticFunctionPtr> m_Closure;				\
public:																			\
	FastDelegate##NUM() {};														\
	FastDelegate##NUM(const FastDelegate##NUM &x) {								\
					m_Closure.CopyFrom(this, x.m_Closure, &x); };				\
	void operator = (const FastDelegate##NUM &x)  {								\
					m_Closure.CopyFrom(this, x.m_Closure, &x); };				\
	bool operator ==(const FastDelegate##NUM &x) const {						\
				return m_Closure.IsEqual(this, x.m_Closure, &x);	};			\
	bool operator !=(const FastDelegate##NUM &x) const {						\
				return !m_Closure.IsEqual(this, x.m_Closure, &x);};				\
	/* Binding to non-const member functions */									\
	template < class X, class Y >												\
	FastDelegate##NUM(Y *pthis, void (__stdcall X::* function_to_bind)FUNCLIST ) {		\
	m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind);}	\
	template < class X, class Y >												\
	inline void bind(Y *pthis, void (__stdcall X::* function_to_bind)FUNCLIST ) {			\
		m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind);	}	\
	/* Binding to const member functions. */									\
	template < class X, class Y >												\
	FastDelegate##NUM(const Y *pthis, void (X::* function_to_bind)FUNCLIST const) {	\
		m_Closure.bindconstmemfunc(detail::implicit_cast<const X*>(pthis), function_to_bind);	}	\
	template < class X, class Y >												\
	inline void bind(const Y *pthis, void (X::* function_to_bind)FUNCLIST const) {	\
		m_Closure.bindconstmemfunc(detail::implicit_cast<const X *>(pthis), function_to_bind);	}	\
	/* Static functions. We convert them into a member function call. */		\
	/* Note that this also provides a conversion from static functions. */		\
	FastDelegate##NUM(void (*function_to_bind)FUNCLIST ) {						\
		bind(function_to_bind);	};												\
	inline void bind(void (*function_to_bind)FUNCLIST) {						\
		m_Closure.bindstaticfunc(this,											\
			&FastDelegate##NUM::InvokeStaticFunction, function_to_bind); };		\
																				\
	void operator() FUNCLIST const { /* Invoke the delegate */					\
		/* this next line is the only one that violates the standard */			\
		(m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))INVOKELIST; };	\
	inline bool operator ! () const	{	/* Is it bound to anything? */			\
			return !m_Closure; };												\
	void clear() { m_Closure.clear();};											\
																				\
public:	/* Invoker for static functions */										\
	void InvokeStaticFunction FUNCLIST const {									\
	(*(m_Closure.GetStaticFunction()))INVOKELIST; };							\
};

// Declare FastDelegate classes for zero to 8 arguments.
// It's trivial to extend it to more arguments, if required.

// For member functions with no arguments
DLGT_DECLAREDELEGATE( 0, (), () )

// For member functions with one argument
template <class Param1>
DLGT_DECLAREDELEGATE(1, (Param1 p1), (p1))

template <class Param1, class Param2>
DLGT_DECLAREDELEGATE(2, (Param1 p1, Param2 p2), (p1, p2))

template <class Param1, class Param2, class Param3>
DLGT_DECLAREDELEGATE(3, (Param1 p1, Param2 p2, Param3 p3), (p1, p2, p3))

template <class Param1, class Param2, class Param3, class Param4>
DLGT_DECLAREDELEGATE(4, (Param1 p1, Param2 p2, Param3 p3, Param4 p4), (p1, p2, p3, p4))

template <class Param1, class Param2, class Param3, class Param4, class Param5>
DLGT_DECLAREDELEGATE(5, (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5), 
					 (p1, p2, p3, p4, p5))

template <class Param1, class Param2, class Param3, class Param4, class Param5, 
		  class Param6>
DLGT_DECLAREDELEGATE(6, 
 (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6),
 (p1, p2, p3, p4, p5, p6))

template <class Param1, class Param2, class Param3, class Param4, class Param5, 
		  class Param6, class Param7>
DLGT_DECLAREDELEGATE(7, 
 (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7),
 (p1, p2, p3, p4, p5, p6, p7))

template <class Param1, class Param2, class Param3, class Param4, class Param5, 
		  class Param6, class Param7, class Param8>
DLGT_DECLAREDELEGATE(8, 
 (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8),
 (p1, p2, p3, p4, p5, p6, p7, p8))

////////////////////////////////////////////////////////////////////////////////
//						Fast Delegates, part 4:
//
//				MakeDelegate() helper function
//
//			MakeDelegate(&x, &X::func) returns a fastdelegate of the type
//			necessary for calling x.func() with the correct number of arguments.
//			This makes it possible to eliminate many typedefs from user code.
//
////////////////////////////////////////////////////////////////////////////////

// Also declare overloads of a MakeDelegate() global function to 
// reduce the need for typedefs.
// We need seperate overloads for const and non-const member functions.
// Also, because of the weird rule about the class of derived member function pointers,
// implicit downcasts may need to be applied later to the 'this' pointer.
// That's why two classes (X and Y) appear in the definitions. Y must be implicitly
// castable to X.
// This code is extremely simple, but extremely tedious.

template <class X, class Y>
FastDelegate0 MakeDelegate(Y* x, void (X::*func)()) { 
	return FastDelegate0(x, func); }
template <class X, class Y>
FastDelegate0 MakeDelegate(Y* x, void (X::*func)() const) { 
	return FastDelegate0(x, func); }

template <class X, class Y, class Param1>
FastDelegate1<Param1> MakeDelegate(Y* x, void (X::*func)(Param1)) { 
	return FastDelegate1<Param1>(x, func); }
template <class X, class Y, class Param1>
FastDelegate1<Param1> MakeDelegate(Y* x, void (X::*func)(Param1) const) { 
	return FastDelegate1<Param1>(x, func); }

template <class X, class Y, class Param1, class Param2>
FastDelegate2<Param1, Param2> MakeDelegate(Y* x, void (X::*func)(Param1, Param2)) { 
	return FastDelegate2<Param1, Param2>(x, func); }
template <class X, class Y, class Param1, class Param2>
FastDelegate2<Param1, Param2> MakeDelegate(Y* x, void (X::*func)(Param1, Param2) const) { 
	return FastDelegate2<Param1, Param2>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3>
FastDelegate3<Param1, Param2, Param3> MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3)) { 
	return FastDelegate3<Param1, Param2, Param3>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3>
FastDelegate3<Param1, Param2, Param3> MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3) const) { 
	return FastDelegate3<Param1, Param2, Param3>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3, class Param4>
FastDelegate4<Param1, Param2, Param3, Param4> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4)) { 
		return FastDelegate4<Param1, Param2, Param3, Param4>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3, class Param4>
FastDelegate4<Param1, Param2, Param3, Param4> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4) const) { 
		return FastDelegate4<Param1, Param2, Param3, Param4>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3, class Param4, class Param5>
FastDelegate5<Param1, Param2, Param3, Param4, Param5> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5)) { 
		return FastDelegate5<Param1, Param2, Param3, Param4, Param5>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3, class Param4, class Param5>
FastDelegate5<Param1, Param2, Param3, Param4, Param5> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5) const) { 
		return FastDelegate5<Param1, Param2, Param3, Param4, Param5>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6>
FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6)) { 
		return FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6>
FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6) const) { 
		return FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6, class Param7>
FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6, Param7)) { 
		return FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6, class Param7>
FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6, Param7) const) { 
		return FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7>(x, func); }

template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6, class Param7, class Param8>
FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8> 
	MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8)) { 
		return FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8>(x, func); }
template <class X, class Y, class Param1, class Param2, class Param3, class Param4, 
	class Param5, class Param6, class Param7, class Param8>
FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8> 
  MakeDelegate(Y* x, void (X::*func)(Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8) const)
{ return FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8>(x, func); 
}


 // clean up after ourselves...
#undef DLGT_DECLAREDELEGATE

} // namespace fastdelegate

#pragma pack(pop)

#endif // fastdelegateH